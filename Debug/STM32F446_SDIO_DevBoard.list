
STM32F446_SDIO_DevBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  0800bf24  0800bf24  0001bf24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7f0  0800c7f0  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7f0  0800c7f0  0001c7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7f8  0800c7f8  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7f8  0800c7f8  0001c7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7fc  0800c7fc  0001c7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800c800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000698c  20000290  0800ca90  00020290  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006c1c  0800ca90  00026c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002eb67  00000000  00000000  00020303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000614d  00000000  00000000  0004ee6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000155fe  00000000  00000000  00054fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ed8  00000000  00000000  0006a5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017d4  00000000  00000000  0006c490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000295ec  00000000  00000000  0006dc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000352ab  00000000  00000000  00097250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dec7a  00000000  00000000  000cc4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a8c  00000000  00000000  001ab178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  001b0c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000290 	.word	0x20000290
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bf0c 	.word	0x0800bf0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000294 	.word	0x20000294
 800020c:	0800bf0c 	.word	0x0800bf0c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vcp_Read>:
uint8_t vcp_Read()
{
    uint8_t readValue = 0;

    // If there is no data to read return 0
    if(0 == vcpRxCount)
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <vcp_Read+0x38>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80005c4:	b1a3      	cbz	r3, 80005f0 <vcp_Read+0x34>
    {
        return readValue;
    }

    // Get data from RxTail and increment RxTail
    readValue = vcpRxBuffer[vcpRxTail++];
 80005c6:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <vcp_Read+0x3c>)
 80005c8:	7813      	ldrb	r3, [r2, #0]
 80005ca:	b2d9      	uxtb	r1, r3
 80005cc:	3301      	adds	r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	7013      	strb	r3, [r2, #0]
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <vcp_Read+0x40>)
 80005d4:	5c58      	ldrb	r0, [r3, r1]
 80005d6:	b2c0      	uxtb	r0, r0

    // Check if the RxTail needs to wrap around to zero
    if(sizeof(vcpRxBuffer) <= vcpRxTail)
 80005d8:	7813      	ldrb	r3, [r2, #0]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b3f      	cmp	r3, #63	; 0x3f
 80005de:	d902      	bls.n	80005e6 <vcp_Read+0x2a>
    {
        vcpRxTail = 0;
 80005e0:	4613      	mov	r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable the UART Data Register not empty Interrupt */

//    (void)USB_DisableGlobalInt(USBx);
    vcpRxCount--;
 80005e6:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <vcp_Read+0x38>)
 80005e8:	7813      	ldrb	r3, [r2, #0]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	7013      	strb	r3, [r2, #0]
//    (void)USB_EnableGlobalInt(USBx);

    return readValue;
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200002ec 	.word	0x200002ec
 80005f8:	200002ee 	.word	0x200002ee
 80005fc:	200002ac 	.word	0x200002ac

08000600 <vcp_RxDataHandler>:

void vcp_RxDataHandler(uint8_t* _Buf, uint32_t *_Len)
{
 8000600:	b530      	push	{r4, r5, lr}

	for(int i=0; i< *_Len; i++)
 8000602:	2200      	movs	r2, #0
 8000604:	e000      	b.n	8000608 <vcp_RxDataHandler+0x8>
 8000606:	3201      	adds	r2, #1
 8000608:	680b      	ldr	r3, [r1, #0]
 800060a:	4696      	mov	lr, r2
 800060c:	4293      	cmp	r3, r2
 800060e:	d921      	bls.n	8000654 <vcp_RxDataHandler+0x54>
	{
		if(vcpRxTail - 1 != vcpRxHead)
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <vcp_RxDataHandler+0x58>)
 8000612:	f893 c000 	ldrb.w	ip, [r3]
 8000616:	f10c 3cff 	add.w	ip, ip, #4294967295
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <vcp_RxDataHandler+0x5c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	459c      	cmp	ip, r3
 8000622:	d0f0      	beq.n	8000606 <vcp_RxDataHandler+0x6>
		{
			// Store data in buffer and increment RxHead
			vcpRxBuffer[vcpRxHead++] = _Buf[i];
 8000624:	4c0d      	ldr	r4, [pc, #52]	; (800065c <vcp_RxDataHandler+0x5c>)
 8000626:	7823      	ldrb	r3, [r4, #0]
 8000628:	b2dd      	uxtb	r5, r3
 800062a:	3301      	adds	r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	7023      	strb	r3, [r4, #0]
 8000630:	f810 c00e 	ldrb.w	ip, [r0, lr]
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <vcp_RxDataHandler+0x60>)
 8000636:	f803 c005 	strb.w	ip, [r3, r5]
			// Increment data count
			//    (void)USB_DisableGlobalInt(USBx);
			vcpRxCount++;
 800063a:	4d0a      	ldr	r5, [pc, #40]	; (8000664 <vcp_RxDataHandler+0x64>)
 800063c:	782b      	ldrb	r3, [r5, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	702b      	strb	r3, [r5, #0]
			//    (void)USB_EnableGlobalInt(USBx);

			// Check if the RxHead needs to be wrapped back to zero
			if(sizeof(vcpRxBuffer) <= vcpRxHead)
 8000644:	7823      	ldrb	r3, [r4, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b3f      	cmp	r3, #63	; 0x3f
 800064a:	d9dc      	bls.n	8000606 <vcp_RxDataHandler+0x6>
			{
				vcpRxHead = 0;
 800064c:	4623      	mov	r3, r4
 800064e:	2400      	movs	r4, #0
 8000650:	701c      	strb	r4, [r3, #0]
 8000652:	e7d8      	b.n	8000606 <vcp_RxDataHandler+0x6>
			}
		}
	}

}
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop
 8000658:	200002ee 	.word	0x200002ee
 800065c:	200002ed 	.word	0x200002ed
 8000660:	200002ac 	.word	0x200002ac
 8000664:	200002ec 	.word	0x200002ec

08000668 <vcp_getRxCount>:

// Safely return RxCount without race conditions
uint8_t vcp_getRxCount()
{
//  __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
  uint8_t RxCount = vcpRxCount;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <vcp_getRxCount+0x8>)
 800066a:	7818      	ldrb	r0, [r3, #0]
//  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
  return RxCount;
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200002ec 	.word	0x200002ec

08000674 <blackbox_GetCardInfo>:
	return fr;
}

/* Get card info */
uint8_t blackbox_GetCardInfo()
{
 8000674:	b510      	push	{r4, lr}
	if(blackboxState != BB_INITIALIZED) return FR_NOT_READY;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <blackbox_GetCardInfo+0x54>)
 8000678:	781c      	ldrb	r4, [r3, #0]
 800067a:	2c01      	cmp	r4, #1
 800067c:	d002      	beq.n	8000684 <blackbox_GetCardInfo+0x10>
 800067e:	2403      	movs	r4, #3
		  LogBlockNbr = sdCardInfo.LogBlockNbr;      /*!< Specifies the Card logical Capacity in blocks   */
		  LogBlockSize = sdCardInfo.LogBlockSize;    /*!< Specifies logical block size in bytes           */
		  return BLACKBOX_OK;
	}
	return BLACKBOX_ERROR;
}
 8000680:	4620      	mov	r0, r4
 8000682:	bd10      	pop	{r4, pc}
	if(HAL_SD_GetCardInfo(&hsd, &sdCardInfo) == HAL_OK)
 8000684:	4911      	ldr	r1, [pc, #68]	; (80006cc <blackbox_GetCardInfo+0x58>)
 8000686:	4812      	ldr	r0, [pc, #72]	; (80006d0 <blackbox_GetCardInfo+0x5c>)
 8000688:	f004 fa47 	bl	8004b1a <HAL_SD_GetCardInfo>
 800068c:	4602      	mov	r2, r0
 800068e:	2800      	cmp	r0, #0
 8000690:	d1f6      	bne.n	8000680 <blackbox_GetCardInfo+0xc>
		  CardType = sdCardInfo.CardType;            /*!< Specifies the card Type                         */
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <blackbox_GetCardInfo+0x58>)
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	490f      	ldr	r1, [pc, #60]	; (80006d4 <blackbox_GetCardInfo+0x60>)
 8000698:	6008      	str	r0, [r1, #0]
		  CardVersion = sdCardInfo.CardVersion;      /*!< Specifies the card version                      */
 800069a:	6858      	ldr	r0, [r3, #4]
 800069c:	490e      	ldr	r1, [pc, #56]	; (80006d8 <blackbox_GetCardInfo+0x64>)
 800069e:	6008      	str	r0, [r1, #0]
		  Class = sdCardInfo.Class;                  /*!< Specifies the class of the card class           */
 80006a0:	6898      	ldr	r0, [r3, #8]
 80006a2:	490e      	ldr	r1, [pc, #56]	; (80006dc <blackbox_GetCardInfo+0x68>)
 80006a4:	6008      	str	r0, [r1, #0]
		  RelCardAdd = sdCardInfo.RelCardAdd;        /*!< Specifies the Relative Card Address             */
 80006a6:	68d8      	ldr	r0, [r3, #12]
 80006a8:	490d      	ldr	r1, [pc, #52]	; (80006e0 <blackbox_GetCardInfo+0x6c>)
 80006aa:	6008      	str	r0, [r1, #0]
		  BlockNbr = sdCardInfo.BlockNbr;            /*!< Specifies the Card Capacity in blocks           */
 80006ac:	6918      	ldr	r0, [r3, #16]
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <blackbox_GetCardInfo+0x70>)
 80006b0:	6008      	str	r0, [r1, #0]
		  BlockSize = sdCardInfo.BlockSize;          /*!< Specifies one block size in bytes               */
 80006b2:	6958      	ldr	r0, [r3, #20]
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <blackbox_GetCardInfo+0x74>)
 80006b6:	6008      	str	r0, [r1, #0]
		  LogBlockNbr = sdCardInfo.LogBlockNbr;      /*!< Specifies the Card logical Capacity in blocks   */
 80006b8:	6998      	ldr	r0, [r3, #24]
 80006ba:	490c      	ldr	r1, [pc, #48]	; (80006ec <blackbox_GetCardInfo+0x78>)
 80006bc:	6008      	str	r0, [r1, #0]
		  LogBlockSize = sdCardInfo.LogBlockSize;    /*!< Specifies logical block size in bytes           */
 80006be:	69d9      	ldr	r1, [r3, #28]
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <blackbox_GetCardInfo+0x7c>)
 80006c2:	6019      	str	r1, [r3, #0]
		  return BLACKBOX_OK;
 80006c4:	4614      	mov	r4, r2
 80006c6:	e7db      	b.n	8000680 <blackbox_GetCardInfo+0xc>
 80006c8:	20000101 	.word	0x20000101
 80006cc:	20004418 	.word	0x20004418
 80006d0:	20004744 	.word	0x20004744
 80006d4:	200002f8 	.word	0x200002f8
 80006d8:	200002fc 	.word	0x200002fc
 80006dc:	20000300 	.word	0x20000300
 80006e0:	2000030c 	.word	0x2000030c
 80006e4:	200002f0 	.word	0x200002f0
 80006e8:	200002f4 	.word	0x200002f4
 80006ec:	20000304 	.word	0x20000304
 80006f0:	20000308 	.word	0x20000308

080006f4 <blackbox_Init>:
{
 80006f4:	b508      	push	{r3, lr}
	blackboxBuffIndex = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	4a11      	ldr	r2, [pc, #68]	; (8000740 <blackbox_Init+0x4c>)
 80006fa:	8013      	strh	r3, [r2, #0]
	blackboxDataPending = 0;
 80006fc:	4a11      	ldr	r2, [pc, #68]	; (8000744 <blackbox_Init+0x50>)
 80006fe:	7013      	strb	r3, [r2, #0]
	blackboxCurrentBuff = blackboxWriteBuff1;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <blackbox_Init+0x54>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <blackbox_Init+0x58>)
 8000704:	601a      	str	r2, [r3, #0]
	uint8_t returnMSD = BSP_SD_Init();
 8000706:	f006 f93b 	bl	8006980 <BSP_SD_Init>
	if(returnMSD == MSD_OK){
 800070a:	b140      	cbz	r0, 800071e <blackbox_Init+0x2a>
		blackboxState = BB_ERROR;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <blackbox_Init+0x5c>)
 800070e:	2202      	movs	r2, #2
 8000710:	701a      	strb	r2, [r3, #0]
		fr = FR_DISK_ERR;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <blackbox_Init+0x60>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
}
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <blackbox_Init+0x60>)
 800071a:	7818      	ldrb	r0, [r3, #0]
 800071c:	bd08      	pop	{r3, pc}
		fr = f_mount(&fs, "/", 1); // Initialize SD card and get card info
 800071e:	2201      	movs	r2, #1
 8000720:	490d      	ldr	r1, [pc, #52]	; (8000758 <blackbox_Init+0x64>)
 8000722:	480e      	ldr	r0, [pc, #56]	; (800075c <blackbox_Init+0x68>)
 8000724:	f009 fc3c 	bl	8009fa0 <f_mount>
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <blackbox_Init+0x60>)
 800072a:	7018      	strb	r0, [r3, #0]
		if(fr == FR_OK)
 800072c:	2800      	cmp	r0, #0
 800072e:	d1f3      	bne.n	8000718 <blackbox_Init+0x24>
			SDInitialized = 1; // Depricated for typedef BLACKBOXSTATE
 8000730:	2301      	movs	r3, #1
 8000732:	4a0b      	ldr	r2, [pc, #44]	; (8000760 <blackbox_Init+0x6c>)
 8000734:	7013      	strb	r3, [r2, #0]
			blackboxState = BB_INITIALIZED;
 8000736:	4a06      	ldr	r2, [pc, #24]	; (8000750 <blackbox_Init+0x5c>)
 8000738:	7013      	strb	r3, [r2, #0]
			blackbox_GetCardInfo();
 800073a:	f7ff ff9b 	bl	8000674 <blackbox_GetCardInfo>
 800073e:	e7eb      	b.n	8000718 <blackbox_Init+0x24>
 8000740:	20000360 	.word	0x20000360
 8000744:	2000036c 	.word	0x2000036c
 8000748:	20000368 	.word	0x20000368
 800074c:	20000378 	.word	0x20000378
 8000750:	20000101 	.word	0x20000101
 8000754:	20002380 	.word	0x20002380
 8000758:	0800bf24 	.word	0x0800bf24
 800075c:	20002384 	.word	0x20002384
 8000760:	20000310 	.word	0x20000310

08000764 <blackbox_SetHeader>:
	return fr;
}

uint8_t blackbox_SetHeader(uint8_t* Buf, uint16_t Len)
{
	if(Len == 0) return BLACKBOX_ERROR;
 8000764:	468c      	mov	ip, r1
 8000766:	b159      	cbz	r1, 8000780 <blackbox_SetHeader+0x1c>

	blackboxHeaderLength = Len;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <blackbox_SetHeader+0x20>)
 800076a:	7019      	strb	r1, [r3, #0]
	for(int i = 0; i < Len; i++)
 800076c:	2300      	movs	r3, #0
 800076e:	e003      	b.n	8000778 <blackbox_SetHeader+0x14>
	{
		blackboxHeader[i] = Buf[i];
 8000770:	5cc1      	ldrb	r1, [r0, r3]
 8000772:	4a05      	ldr	r2, [pc, #20]	; (8000788 <blackbox_SetHeader+0x24>)
 8000774:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < Len; i++)
 8000776:	3301      	adds	r3, #1
 8000778:	459c      	cmp	ip, r3
 800077a:	dcf9      	bgt.n	8000770 <blackbox_SetHeader+0xc>
	}

	return BLACKBOX_OK;
 800077c:	2000      	movs	r0, #0
 800077e:	4770      	bx	lr
	if(Len == 0) return BLACKBOX_ERROR;
 8000780:	2001      	movs	r0, #1
}
 8000782:	4770      	bx	lr
 8000784:	20000100 	.word	0x20000100
 8000788:	20000000 	.word	0x20000000

0800078c <blackbox_BufferData>:
 *  @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY*/
uint8_t blackbox_BufferData(uint8_t* Buf, uint16_t Len)
{
	fr = FR_OK;
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <blackbox_BufferData+0x8c>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]

	if(blackboxState != BB_FILE_READY) return FR_NOT_READY;
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <blackbox_BufferData+0x90>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d136      	bne.n	8000808 <blackbox_BufferData+0x7c>

	/* Drop packet if SD buffers full */
	if( blackboxDataPending && Len >= (SECTOR_SIZE - blackboxBuffIndex) )
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <blackbox_BufferData+0x94>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b35b      	cbz	r3, 80007f8 <blackbox_BufferData+0x6c>
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <blackbox_BufferData+0x98>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80007a8:	4299      	cmp	r1, r3
 80007aa:	da2f      	bge.n	800080c <blackbox_BufferData+0x80>
 80007ac:	4613      	mov	r3, r2
 80007ae:	e024      	b.n	80007fa <blackbox_BufferData+0x6e>
		/* If buffer is full, flip flop to other buffer and set buffer full flag */
		if(blackboxBuffIndex == SECTOR_SIZE)
		{
			blackboxDataPending = 1;
			blackboxBuffIndex = 0;
			blackboxCurrentBuff = (blackboxCurrentBuff == blackboxWriteBuff1) ? blackboxWriteBuff2 : blackboxWriteBuff1;
 80007b0:	4c1d      	ldr	r4, [pc, #116]	; (8000828 <blackbox_BufferData+0x9c>)
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <blackbox_BufferData+0xa0>)
 80007b4:	6014      	str	r4, [r2, #0]
	for(int k = 0; k < Len; k++)
 80007b6:	3301      	adds	r3, #1
 80007b8:	4299      	cmp	r1, r3
 80007ba:	dd22      	ble.n	8000802 <blackbox_BufferData+0x76>
		blackboxCurrentBuff[blackboxBuffIndex++] = Buf[k];
 80007bc:	4a1b      	ldr	r2, [pc, #108]	; (800082c <blackbox_BufferData+0xa0>)
 80007be:	6814      	ldr	r4, [r2, #0]
 80007c0:	4a18      	ldr	r2, [pc, #96]	; (8000824 <blackbox_BufferData+0x98>)
 80007c2:	f8b2 c000 	ldrh.w	ip, [r2]
 80007c6:	f10c 0e01 	add.w	lr, ip, #1
 80007ca:	f8a2 e000 	strh.w	lr, [r2]
 80007ce:	f810 e003 	ldrb.w	lr, [r0, r3]
 80007d2:	f804 e00c 	strb.w	lr, [r4, ip]
		if(blackboxBuffIndex == SECTOR_SIZE)
 80007d6:	8812      	ldrh	r2, [r2, #0]
 80007d8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80007dc:	d1eb      	bne.n	80007b6 <blackbox_BufferData+0x2a>
			blackboxDataPending = 1;
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <blackbox_BufferData+0x94>)
 80007e0:	2401      	movs	r4, #1
 80007e2:	7014      	strb	r4, [r2, #0]
			blackboxBuffIndex = 0;
 80007e4:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <blackbox_BufferData+0x98>)
 80007e6:	2400      	movs	r4, #0
 80007e8:	8014      	strh	r4, [r2, #0]
			blackboxCurrentBuff = (blackboxCurrentBuff == blackboxWriteBuff1) ? blackboxWriteBuff2 : blackboxWriteBuff1;
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <blackbox_BufferData+0xa0>)
 80007ec:	6814      	ldr	r4, [r2, #0]
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <blackbox_BufferData+0xa4>)
 80007f0:	4294      	cmp	r4, r2
 80007f2:	d0dd      	beq.n	80007b0 <blackbox_BufferData+0x24>
 80007f4:	4c0e      	ldr	r4, [pc, #56]	; (8000830 <blackbox_BufferData+0xa4>)
 80007f6:	e7dc      	b.n	80007b2 <blackbox_BufferData+0x26>
 80007f8:	2300      	movs	r3, #0
	for(int k = 0; k < Len; k++)
 80007fa:	4299      	cmp	r1, r3
 80007fc:	dd08      	ble.n	8000810 <blackbox_BufferData+0x84>
{
 80007fe:	b510      	push	{r4, lr}
 8000800:	e7dc      	b.n	80007bc <blackbox_BufferData+0x30>
		}
	}
	return fr;
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <blackbox_BufferData+0x8c>)
 8000804:	7818      	ldrb	r0, [r3, #0]
}
 8000806:	bd10      	pop	{r4, pc}
	if(blackboxState != BB_FILE_READY) return FR_NOT_READY;
 8000808:	2003      	movs	r0, #3
 800080a:	4770      	bx	lr
		return FR_NOT_READY;
 800080c:	2003      	movs	r0, #3
 800080e:	4770      	bx	lr
	return fr;
 8000810:	4b01      	ldr	r3, [pc, #4]	; (8000818 <blackbox_BufferData+0x8c>)
 8000812:	7818      	ldrb	r0, [r3, #0]
}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20002380 	.word	0x20002380
 800081c:	20000101 	.word	0x20000101
 8000820:	2000036c 	.word	0x2000036c
 8000824:	20000360 	.word	0x20000360
 8000828:	20001378 	.word	0x20001378
 800082c:	20000368 	.word	0x20000368
 8000830:	20000378 	.word	0x20000378

08000834 <blackbox_WriteHeader>:
{
 8000834:	b508      	push	{r3, lr}
	return blackbox_BufferData(blackboxHeader, blackboxHeaderLength);
 8000836:	4b03      	ldr	r3, [pc, #12]	; (8000844 <blackbox_WriteHeader+0x10>)
 8000838:	7819      	ldrb	r1, [r3, #0]
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <blackbox_WriteHeader+0x14>)
 800083c:	f7ff ffa6 	bl	800078c <blackbox_BufferData>
}
 8000840:	bd08      	pop	{r3, pc}
 8000842:	bf00      	nop
 8000844:	20000100 	.word	0x20000100
 8000848:	20000000 	.word	0x20000000

0800084c <blackbox_CreateFile>:
	if(blackboxState != BB_INITIALIZED) return FR_NOT_READY;
 800084c:	4b30      	ldr	r3, [pc, #192]	; (8000910 <blackbox_CreateFile+0xc4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d15a      	bne.n	800090a <blackbox_CreateFile+0xbe>
{
 8000854:	b530      	push	{r4, r5, lr}
 8000856:	b0e9      	sub	sp, #420	; 0x1a4
 8000858:	4605      	mov	r5, r0
	TCHAR myFileName[32] = {'\0'}; // Path name
 800085a:	2400      	movs	r4, #0
 800085c:	9460      	str	r4, [sp, #384]	; 0x180
 800085e:	9461      	str	r4, [sp, #388]	; 0x184
 8000860:	9462      	str	r4, [sp, #392]	; 0x188
 8000862:	9463      	str	r4, [sp, #396]	; 0x18c
 8000864:	9464      	str	r4, [sp, #400]	; 0x190
 8000866:	9465      	str	r4, [sp, #404]	; 0x194
 8000868:	9466      	str	r4, [sp, #408]	; 0x198
 800086a:	9467      	str	r4, [sp, #412]	; 0x19c
		fileIndex++;
 800086c:	3401      	adds	r4, #1
 800086e:	b2e4      	uxtb	r4, r4
		sprintf(myFileName, "File%i.txt", fileIndex);
 8000870:	4622      	mov	r2, r4
 8000872:	4928      	ldr	r1, [pc, #160]	; (8000914 <blackbox_CreateFile+0xc8>)
 8000874:	a860      	add	r0, sp, #384	; 0x180
 8000876:	f00a fea5 	bl	800b5c4 <siprintf>
		fr = f_findfirst(&dj, &fno, "/", myFileName);
 800087a:	ab60      	add	r3, sp, #384	; 0x180
 800087c:	4a26      	ldr	r2, [pc, #152]	; (8000918 <blackbox_CreateFile+0xcc>)
 800087e:	a902      	add	r1, sp, #8
 8000880:	a84a      	add	r0, sp, #296	; 0x128
 8000882:	f00a f9f0 	bl	800ac66 <f_findfirst>
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <blackbox_CreateFile+0xd0>)
 8000888:	7018      	strb	r0, [r3, #0]
	}while(fr == FR_OK && fno.fname[0]);
 800088a:	b918      	cbnz	r0, 8000894 <blackbox_CreateFile+0x48>
 800088c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1eb      	bne.n	800086c <blackbox_CreateFile+0x20>
	if(fr == FR_OK)
 8000894:	b138      	cbz	r0, 80008a6 <blackbox_CreateFile+0x5a>
	if(fr != FR_OK)
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <blackbox_CreateFile+0xd0>)
 8000898:	7818      	ldrb	r0, [r3, #0]
 800089a:	b110      	cbz	r0, 80008a2 <blackbox_CreateFile+0x56>
		blackboxState = BB_ERROR;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <blackbox_CreateFile+0xc4>)
 800089e:	2202      	movs	r2, #2
 80008a0:	701a      	strb	r2, [r3, #0]
}
 80008a2:	b069      	add	sp, #420	; 0x1a4
 80008a4:	bd30      	pop	{r4, r5, pc}
		fr = f_open((&myFile), myFileName, FA_CREATE_NEW  | FA_WRITE); // Open file with settings
 80008a6:	2206      	movs	r2, #6
 80008a8:	a960      	add	r1, sp, #384	; 0x180
 80008aa:	481d      	ldr	r0, [pc, #116]	; (8000920 <blackbox_CreateFile+0xd4>)
 80008ac:	f009 fba6 	bl	8009ffc <f_open>
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <blackbox_CreateFile+0xd0>)
 80008b2:	7018      	strb	r0, [r3, #0]
		if(fr == FR_OK)
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d1ee      	bne.n	8000896 <blackbox_CreateFile+0x4a>
			fr = f_truncate(&myFile);
 80008b8:	4819      	ldr	r0, [pc, #100]	; (8000920 <blackbox_CreateFile+0xd4>)
 80008ba:	f00a f9e2 	bl	800ac82 <f_truncate>
 80008be:	4c17      	ldr	r4, [pc, #92]	; (800091c <blackbox_CreateFile+0xd0>)
 80008c0:	7020      	strb	r0, [r4, #0]
			HAL_Delay(10);
 80008c2:	200a      	movs	r0, #10
 80008c4:	f001 fbac 	bl	8002020 <HAL_Delay>
			if(fr == FR_OK)
 80008c8:	7823      	ldrb	r3, [r4, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1e3      	bne.n	8000896 <blackbox_CreateFile+0x4a>
				fr = f_expand(&myFile, fileSize, 1); // Create contiguous file for faster write transactions later
 80008ce:	2301      	movs	r3, #1
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	462a      	mov	r2, r5
 80008d4:	2300      	movs	r3, #0
 80008d6:	4812      	ldr	r0, [pc, #72]	; (8000920 <blackbox_CreateFile+0xd4>)
 80008d8:	f00a fa37 	bl	800ad4a <f_expand>
 80008dc:	7020      	strb	r0, [r4, #0]
				if(fr == FR_OK)
 80008de:	2800      	cmp	r0, #0
 80008e0:	d1d9      	bne.n	8000896 <blackbox_CreateFile+0x4a>
						fr = f_rewind(&myFile);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2300      	movs	r3, #0
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <blackbox_CreateFile+0xd4>)
 80008e8:	f009 ff2b 	bl	800a742 <f_lseek>
 80008ec:	7020      	strb	r0, [r4, #0]
						blackboxState = BB_FILE_READY;
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <blackbox_CreateFile+0xc4>)
 80008f0:	2100      	movs	r1, #0
 80008f2:	7011      	strb	r1, [r2, #0]
						if(fr == FR_OK)
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d1ce      	bne.n	8000896 <blackbox_CreateFile+0x4a>
							fr = blackbox_WriteHeader();
 80008f8:	f7ff ff9c 	bl	8000834 <blackbox_WriteHeader>
 80008fc:	7020      	strb	r0, [r4, #0]
							blackboxBytesWritten = 0;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <blackbox_CreateFile+0xd8>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
							blackboxFileSizeBytes = fileSize;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <blackbox_CreateFile+0xdc>)
 8000906:	601d      	str	r5, [r3, #0]
 8000908:	e7c5      	b.n	8000896 <blackbox_CreateFile+0x4a>
	if(blackboxState != BB_INITIALIZED) return FR_NOT_READY;
 800090a:	2003      	movs	r0, #3
}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000101 	.word	0x20000101
 8000914:	0800bf28 	.word	0x0800bf28
 8000918:	0800bf24 	.word	0x0800bf24
 800091c:	20002380 	.word	0x20002380
 8000920:	200033c0 	.word	0x200033c0
 8000924:	20000364 	.word	0x20000364
 8000928:	20000370 	.word	0x20000370

0800092c <blackboxIsFileFull>:
/* Check if we have reached the end of the contiguous file
 * @retval FR_OK if data sent or nothing to do
 * */
uint8_t blackboxIsFileFull()
{
	return (blackboxFileSizeBytes - blackboxBytesWritten < SECTOR_SIZE) ? 1 : 0;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <blackboxIsFileFull+0x18>)
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <blackboxIsFileFull+0x1c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	1ac0      	subs	r0, r0, r3
}
 8000936:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800093a:	bf2c      	ite	cs
 800093c:	2000      	movcs	r0, #0
 800093e:	2001      	movcc	r0, #1
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000370 	.word	0x20000370
 8000948:	20000364 	.word	0x20000364

0800094c <blackbox_Sync>:

/* Sync file and truncate file size */
uint8_t blackbox_Sync()
{
 800094c:	b508      	push	{r3, lr}
	if(blackboxState != BB_FILE_READY) return FR_NOT_READY;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <blackbox_Sync+0x30>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b98b      	cbnz	r3, 8000978 <blackbox_Sync+0x2c>

	fr = f_truncate(&myFile);
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <blackbox_Sync+0x34>)
 8000956:	f00a f994 	bl	800ac82 <f_truncate>
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <blackbox_Sync+0x38>)
 800095c:	7018      	strb	r0, [r3, #0]
	if(fr == FR_OK)
 800095e:	b110      	cbz	r0, 8000966 <blackbox_Sync+0x1a>
	{
		HAL_Delay(20);
		fr = f_sync(&myFile);
	}
	return fr;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <blackbox_Sync+0x38>)
 8000962:	7818      	ldrb	r0, [r3, #0]
}
 8000964:	bd08      	pop	{r3, pc}
		HAL_Delay(20);
 8000966:	2014      	movs	r0, #20
 8000968:	f001 fb5a 	bl	8002020 <HAL_Delay>
		fr = f_sync(&myFile);
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <blackbox_Sync+0x34>)
 800096e:	f009 fe2d 	bl	800a5cc <f_sync>
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <blackbox_Sync+0x38>)
 8000974:	7018      	strb	r0, [r3, #0]
 8000976:	e7f3      	b.n	8000960 <blackbox_Sync+0x14>
	if(blackboxState != BB_FILE_READY) return FR_NOT_READY;
 8000978:	2003      	movs	r0, #3
 800097a:	e7f3      	b.n	8000964 <blackbox_Sync+0x18>
 800097c:	20000101 	.word	0x20000101
 8000980:	200033c0 	.word	0x200033c0
 8000984:	20002380 	.word	0x20002380

08000988 <sdCheckState>:
}



uint32_t sdCheckState()
{
 8000988:	b508      	push	{r3, lr}
	if(blackboxState != BB_FILE_READY) return FR_NOT_READY;
 800098a:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <sdCheckState+0xa8>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d14b      	bne.n	8000a2a <sdCheckState+0xa2>

	uint32_t SD_CardState = 0;

	/* Check if the DMA is busy */
	if(HAL_DMA_GetState(&hdma_sdio_tx) != HAL_DMA_STATE_READY)
 8000992:	4828      	ldr	r0, [pc, #160]	; (8000a34 <sdCheckState+0xac>)
 8000994:	f001 fe86 	bl	80026a4 <HAL_DMA_GetState>
 8000998:	2801      	cmp	r0, #1
 800099a:	d005      	beq.n	80009a8 <sdCheckState+0x20>
	{
		SD_CARD_DMA_BUSY_COUNT++;
 800099c:	4a26      	ldr	r2, [pc, #152]	; (8000a38 <sdCheckState+0xb0>)
 800099e:	6813      	ldr	r3, [r2, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	6013      	str	r3, [r2, #0]
		return FR_NOT_READY;
 80009a4:	2003      	movs	r0, #3
 80009a6:	e041      	b.n	8000a2c <sdCheckState+0xa4>
	}
	/* Check if the SD card is ready for action */

	SD_CardState = HAL_SD_GetCardState(&hsd);
 80009a8:	4824      	ldr	r0, [pc, #144]	; (8000a3c <sdCheckState+0xb4>)
 80009aa:	f004 f929 	bl	8004c00 <HAL_SD_GetCardState>
#if BLACKBOX_DEBUG == 1
	if(SD_CardState == HAL_SD_CARD_TRANSFER)SD_CARD_TRANSFER_COUNT++;
 80009ae:	2804      	cmp	r0, #4
 80009b0:	d00c      	beq.n	80009cc <sdCheckState+0x44>
	else if(SD_CardState == HAL_SD_CARD_READY) SD_CARD_READY_COUNT++;
 80009b2:	2808      	cmp	r0, #8
 80009b4:	d80f      	bhi.n	80009d6 <sdCheckState+0x4e>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d038      	beq.n	8000a2c <sdCheckState+0xa4>
 80009ba:	1e43      	subs	r3, r0, #1
 80009bc:	2b07      	cmp	r3, #7
 80009be:	d835      	bhi.n	8000a2c <sdCheckState+0xa4>
 80009c0:	e8df f003 	tbb	[pc, r3]
 80009c4:	341a1510 	.word	0x341a1510
 80009c8:	2e29241f 	.word	0x2e29241f
	if(SD_CardState == HAL_SD_CARD_TRANSFER)SD_CARD_TRANSFER_COUNT++;
 80009cc:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <sdCheckState+0xb8>)
 80009ce:	6813      	ldr	r3, [r2, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	e02a      	b.n	8000a2c <sdCheckState+0xa4>
 80009d6:	28ff      	cmp	r0, #255	; 0xff
 80009d8:	d128      	bne.n	8000a2c <sdCheckState+0xa4>
	else if(SD_CardState == HAL_SD_CARD_STANDBY) SD_CARD_STANDBY_COUNT++;
	else if(SD_CardState == HAL_SD_CARD_SENDING) SD_CARD_SENDING_COUNT++;
	else if(SD_CardState == HAL_SD_CARD_RECEIVING) SD_CARD_RECEIVING_COUNT++;
	else if(SD_CardState == HAL_SD_CARD_PROGRAMMING) SD_CARD_PROGRAMMING_COUNT++;
	else if(SD_CardState == HAL_SD_CARD_DISCONNECTED) SD_CARD_DISCONNECTED_COUNT++;
	else if(SD_CardState == HAL_SD_CARD_ERROR) SD_CARD_ERROR_COUNT++;
 80009da:	4a1a      	ldr	r2, [pc, #104]	; (8000a44 <sdCheckState+0xbc>)
 80009dc:	6813      	ldr	r3, [r2, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e023      	b.n	8000a2c <sdCheckState+0xa4>
	else if(SD_CardState == HAL_SD_CARD_READY) SD_CARD_READY_COUNT++;
 80009e4:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <sdCheckState+0xc0>)
 80009e6:	6813      	ldr	r3, [r2, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	e01e      	b.n	8000a2c <sdCheckState+0xa4>
	else if(SD_CardState == HAL_SD_CARD_IDENTIFICATION) SD_CARD_IDENTIFICATION_COUNT++;
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <sdCheckState+0xc4>)
 80009f0:	6813      	ldr	r3, [r2, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	e019      	b.n	8000a2c <sdCheckState+0xa4>
	else if(SD_CardState == HAL_SD_CARD_STANDBY) SD_CARD_STANDBY_COUNT++;
 80009f8:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <sdCheckState+0xc8>)
 80009fa:	6813      	ldr	r3, [r2, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e014      	b.n	8000a2c <sdCheckState+0xa4>
	else if(SD_CardState == HAL_SD_CARD_SENDING) SD_CARD_SENDING_COUNT++;
 8000a02:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <sdCheckState+0xcc>)
 8000a04:	6813      	ldr	r3, [r2, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	e00f      	b.n	8000a2c <sdCheckState+0xa4>
	else if(SD_CardState == HAL_SD_CARD_RECEIVING) SD_CARD_RECEIVING_COUNT++;
 8000a0c:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <sdCheckState+0xd0>)
 8000a0e:	6813      	ldr	r3, [r2, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	e00a      	b.n	8000a2c <sdCheckState+0xa4>
	else if(SD_CardState == HAL_SD_CARD_PROGRAMMING) SD_CARD_PROGRAMMING_COUNT++;
 8000a16:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <sdCheckState+0xd4>)
 8000a18:	6813      	ldr	r3, [r2, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	e005      	b.n	8000a2c <sdCheckState+0xa4>
	else if(SD_CardState == HAL_SD_CARD_DISCONNECTED) SD_CARD_DISCONNECTED_COUNT++;
 8000a20:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <sdCheckState+0xd8>)
 8000a22:	6813      	ldr	r3, [r2, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	e000      	b.n	8000a2c <sdCheckState+0xa4>
	if(blackboxState != BB_FILE_READY) return FR_NOT_READY;
 8000a2a:	2003      	movs	r0, #3
#endif
	return SD_CardState;
}
 8000a2c:	bd08      	pop	{r3, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000101 	.word	0x20000101
 8000a34:	200046e4 	.word	0x200046e4
 8000a38:	2000031c 	.word	0x2000031c
 8000a3c:	20004744 	.word	0x20004744
 8000a40:	2000035c 	.word	0x2000035c
 8000a44:	20000320 	.word	0x20000320
 8000a48:	2000034c 	.word	0x2000034c
 8000a4c:	20000324 	.word	0x20000324
 8000a50:	20000358 	.word	0x20000358
 8000a54:	20000354 	.word	0x20000354
 8000a58:	20000350 	.word	0x20000350
 8000a5c:	20000348 	.word	0x20000348
 8000a60:	20000318 	.word	0x20000318

08000a64 <blackbox_WriteSector>:
{
 8000a64:	b538      	push	{r3, r4, r5, lr}
	if(blackboxState != BB_FILE_READY) return FR_NOT_READY;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <blackbox_WriteSector+0x50>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	bb03      	cbnz	r3, 8000aae <blackbox_WriteSector+0x4a>
 8000a6c:	4604      	mov	r4, r0
	if(sdCheckState() == HAL_SD_CARD_TRANSFER)
 8000a6e:	f7ff ff8b 	bl	8000988 <sdCheckState>
 8000a72:	2804      	cmp	r0, #4
 8000a74:	d005      	beq.n	8000a82 <blackbox_WriteSector+0x1e>
		fr = FR_NOT_READY;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <blackbox_WriteSector+0x54>)
 8000a78:	2203      	movs	r2, #3
 8000a7a:	701a      	strb	r2, [r3, #0]
	return fr;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <blackbox_WriteSector+0x54>)
 8000a7e:	7818      	ldrb	r0, [r3, #0]
}
 8000a80:	bd38      	pop	{r3, r4, r5, pc}
		sd_FastWriteFlag = 1;
 8000a82:	4d0e      	ldr	r5, [pc, #56]	; (8000abc <blackbox_WriteSector+0x58>)
 8000a84:	2301      	movs	r3, #1
 8000a86:	602b      	str	r3, [r5, #0]
		fr = f_write(&myFile, Buf, SECTOR_SIZE, &bytesWritten);
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <blackbox_WriteSector+0x5c>)
 8000a8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8e:	4621      	mov	r1, r4
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <blackbox_WriteSector+0x60>)
 8000a92:	f009 fc70 	bl	800a376 <f_write>
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <blackbox_WriteSector+0x54>)
 8000a98:	7018      	strb	r0, [r3, #0]
		sd_FastWriteFlag = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	602b      	str	r3, [r5, #0]
		if(fr == FR_OK)
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d1ec      	bne.n	8000a7c <blackbox_WriteSector+0x18>
			blackboxBytesWritten += SECTOR_SIZE;
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <blackbox_WriteSector+0x64>)
 8000aa4:	6813      	ldr	r3, [r2, #0]
 8000aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	e7e6      	b.n	8000a7c <blackbox_WriteSector+0x18>
	if(blackboxState != BB_FILE_READY) return FR_NOT_READY;
 8000aae:	2003      	movs	r0, #3
 8000ab0:	e7e6      	b.n	8000a80 <blackbox_WriteSector+0x1c>
 8000ab2:	bf00      	nop
 8000ab4:	20000101 	.word	0x20000101
 8000ab8:	20002380 	.word	0x20002380
 8000abc:	20004a40 	.word	0x20004a40
 8000ac0:	2000237c 	.word	0x2000237c
 8000ac4:	200033c0 	.word	0x200033c0
 8000ac8:	20000364 	.word	0x20000364

08000acc <blackbox_WriteRandom>:
	if(blackboxState != BB_FILE_READY) return FR_NOT_READY;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <blackbox_WriteRandom+0x44>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b9db      	cbnz	r3, 8000b0a <blackbox_WriteRandom+0x3e>
{
 8000ad2:	b570      	push	{r4, r5, r6, lr}
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	460d      	mov	r5, r1
	if(sdCheckState() == HAL_SD_CARD_TRANSFER)
 8000ad8:	f7ff ff56 	bl	8000988 <sdCheckState>
 8000adc:	2804      	cmp	r0, #4
 8000ade:	d005      	beq.n	8000aec <blackbox_WriteRandom+0x20>
		fr = FR_NOT_READY;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <blackbox_WriteRandom+0x48>)
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	701a      	strb	r2, [r3, #0]
	return fr;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <blackbox_WriteRandom+0x48>)
 8000ae8:	7818      	ldrb	r0, [r3, #0]
}
 8000aea:	bd70      	pop	{r4, r5, r6, pc}
		fr = f_write(&myFile, Buf, Len, &bytesWritten);
 8000aec:	4e0a      	ldr	r6, [pc, #40]	; (8000b18 <blackbox_WriteRandom+0x4c>)
 8000aee:	4633      	mov	r3, r6
 8000af0:	462a      	mov	r2, r5
 8000af2:	4621      	mov	r1, r4
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <blackbox_WriteRandom+0x50>)
 8000af6:	f009 fc3e 	bl	800a376 <f_write>
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <blackbox_WriteRandom+0x48>)
 8000afc:	7018      	strb	r0, [r3, #0]
		blackboxBytesWritten += bytesWritten;
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <blackbox_WriteRandom+0x54>)
 8000b00:	6813      	ldr	r3, [r2, #0]
 8000b02:	6831      	ldr	r1, [r6, #0]
 8000b04:	440b      	add	r3, r1
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e7ed      	b.n	8000ae6 <blackbox_WriteRandom+0x1a>
	if(blackboxState != BB_FILE_READY) return FR_NOT_READY;
 8000b0a:	2003      	movs	r0, #3
}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000101 	.word	0x20000101
 8000b14:	20002380 	.word	0x20002380
 8000b18:	2000237c 	.word	0x2000237c
 8000b1c:	200033c0 	.word	0x200033c0
 8000b20:	20000364 	.word	0x20000364

08000b24 <blackboxFlushBuffers>:

void blackboxFlushBuffers()
{
	for(int k = 0; k < SECTOR_SIZE; k++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	e005      	b.n	8000b34 <blackboxFlushBuffers+0x10>
	{
		blackboxWriteBuff1[k] = '\0';
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <blackboxFlushBuffers+0x28>)
 8000b2c:	54ca      	strb	r2, [r1, r3]
		blackboxWriteBuff2[k] = '\0';
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <blackboxFlushBuffers+0x2c>)
 8000b30:	54ca      	strb	r2, [r1, r3]
	for(int k = 0; k < SECTOR_SIZE; k++)
 8000b32:	3301      	adds	r3, #1
 8000b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b38:	dbf6      	blt.n	8000b28 <blackboxFlushBuffers+0x4>
	}
	/*Initialize Buffer*/
	blackboxBuffIndex = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <blackboxFlushBuffers+0x30>)
 8000b3e:	8013      	strh	r3, [r2, #0]
	blackboxDataPending = 0;
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <blackboxFlushBuffers+0x34>)
 8000b42:	7013      	strb	r3, [r2, #0]
	blackboxCurrentBuff = blackboxWriteBuff1;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <blackboxFlushBuffers+0x38>)
 8000b46:	4a01      	ldr	r2, [pc, #4]	; (8000b4c <blackboxFlushBuffers+0x28>)
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000378 	.word	0x20000378
 8000b50:	20001378 	.word	0x20001378
 8000b54:	20000360 	.word	0x20000360
 8000b58:	2000036c 	.word	0x2000036c
 8000b5c:	20000368 	.word	0x20000368

08000b60 <blackboxGetBufferAvailable>:

uint16_t blackboxGetBufferAvailable()
{
	uint16_t availableBytes;
	availableBytes = SECTOR_SIZE - blackboxBuffIndex;
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <blackboxGetBufferAvailable+0xc>)
 8000b62:	8818      	ldrh	r0, [r3, #0]
 8000b64:	f5c0 5080 	rsb	r0, r0, #4096	; 0x1000
//	else
//	{
//		availableBytes = blackboxTail - blackboxHead;
//	}
	return availableBytes;
}
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	20000360 	.word	0x20000360

08000b70 <blackboxMeasureWritekBps>:
}


/* Track logging performance kBps */
void blackboxMeasureWritekBps(uint32_t bytesWritten)
{
 8000b70:	b508      	push	{r3, lr}
	static uint32_t blackboxlastPeriodMillis = 0;
	static uint32_t blackboxLastBytesWritten = 0;

	if(HAL_GetTick() - blackboxlastPeriodMillis >= 1000)
 8000b72:	f001 fa4f 	bl	8002014 <HAL_GetTick>
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <blackboxMeasureWritekBps+0x30>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	1ac0      	subs	r0, r0, r3
 8000b7c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b80:	d200      	bcs.n	8000b84 <blackboxMeasureWritekBps+0x14>
	{
		blackboxlastPeriodMillis = HAL_GetTick();
		writeSpeedkBps = (blackboxBytesWritten - blackboxLastBytesWritten)/1024;
		blackboxLastBytesWritten = blackboxBytesWritten;
	}
}
 8000b82:	bd08      	pop	{r3, pc}
		blackboxlastPeriodMillis = HAL_GetTick();
 8000b84:	f001 fa46 	bl	8002014 <HAL_GetTick>
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <blackboxMeasureWritekBps+0x30>)
 8000b8a:	6018      	str	r0, [r3, #0]
		writeSpeedkBps = (blackboxBytesWritten - blackboxLastBytesWritten)/1024;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <blackboxMeasureWritekBps+0x34>)
 8000b8e:	6819      	ldr	r1, [r3, #0]
 8000b90:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <blackboxMeasureWritekBps+0x38>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	1acb      	subs	r3, r1, r3
 8000b96:	0a9b      	lsrs	r3, r3, #10
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <blackboxMeasureWritekBps+0x3c>)
 8000b9a:	6003      	str	r3, [r0, #0]
		blackboxLastBytesWritten = blackboxBytesWritten;
 8000b9c:	6011      	str	r1, [r2, #0]
}
 8000b9e:	e7f0      	b.n	8000b82 <blackboxMeasureWritekBps+0x12>
 8000ba0:	20002378 	.word	0x20002378
 8000ba4:	20000364 	.word	0x20000364
 8000ba8:	20000374 	.word	0x20000374
 8000bac:	20004438 	.word	0x20004438

08000bb0 <blackbox_ProcessData>:
{
 8000bb0:	b508      	push	{r3, lr}
	fr = FR_OK;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <blackbox_ProcessData+0x68>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
	blackboxMeasureWritekBps();
 8000bb8:	f7ff ffda 	bl	8000b70 <blackboxMeasureWritekBps>
	if(blackboxDataPending == 1)
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <blackbox_ProcessData+0x6c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d002      	beq.n	8000bca <blackbox_ProcessData+0x1a>
	return fr;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <blackbox_ProcessData+0x68>)
 8000bc6:	7818      	ldrb	r0, [r3, #0]
}
 8000bc8:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(PIN_TEST2_GPIO_Port, PIN_TEST2_Pin, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2120      	movs	r1, #32
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <blackbox_ProcessData+0x70>)
 8000bd0:	f001 fe65 	bl	800289e <HAL_GPIO_WritePin>
		if(blackboxIsFileFull()) return BB_FILE_FULL;
 8000bd4:	f7ff feaa 	bl	800092c <blackboxIsFileFull>
 8000bd8:	b9d8      	cbnz	r0, 8000c12 <blackbox_ProcessData+0x62>
		if(blackboxCurrentBuff == blackboxWriteBuff1)
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <blackbox_ProcessData+0x74>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <blackbox_ProcessData+0x78>)
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d010      	beq.n	8000c06 <blackbox_ProcessData+0x56>
			fr = blackbox_WriteSector(blackboxWriteBuff1);
 8000be4:	4810      	ldr	r0, [pc, #64]	; (8000c28 <blackbox_ProcessData+0x78>)
 8000be6:	f7ff ff3d 	bl	8000a64 <blackbox_WriteSector>
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <blackbox_ProcessData+0x68>)
 8000bec:	7018      	strb	r0, [r3, #0]
		if(fr == FR_OK)
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <blackbox_ProcessData+0x68>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b913      	cbnz	r3, 8000bfa <blackbox_ProcessData+0x4a>
			blackboxDataPending = 0;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <blackbox_ProcessData+0x6c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(PIN_TEST2_GPIO_Port, PIN_TEST2_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <blackbox_ProcessData+0x70>)
 8000c00:	f001 fe4d 	bl	800289e <HAL_GPIO_WritePin>
 8000c04:	e7de      	b.n	8000bc4 <blackbox_ProcessData+0x14>
			fr = blackbox_WriteSector(blackboxWriteBuff2);
 8000c06:	4809      	ldr	r0, [pc, #36]	; (8000c2c <blackbox_ProcessData+0x7c>)
 8000c08:	f7ff ff2c 	bl	8000a64 <blackbox_WriteSector>
 8000c0c:	4b02      	ldr	r3, [pc, #8]	; (8000c18 <blackbox_ProcessData+0x68>)
 8000c0e:	7018      	strb	r0, [r3, #0]
 8000c10:	e7ed      	b.n	8000bee <blackbox_ProcessData+0x3e>
		if(blackboxIsFileFull()) return BB_FILE_FULL;
 8000c12:	2003      	movs	r0, #3
 8000c14:	e7d8      	b.n	8000bc8 <blackbox_ProcessData+0x18>
 8000c16:	bf00      	nop
 8000c18:	20002380 	.word	0x20002380
 8000c1c:	2000036c 	.word	0x2000036c
 8000c20:	40020800 	.word	0x40020800
 8000c24:	20000368 	.word	0x20000368
 8000c28:	20000378 	.word	0x20000378
 8000c2c:	20001378 	.word	0x20001378

08000c30 <blackbox_CloseFile>:
	if(blackboxState != BB_FILE_READY) return FR_NOT_READY;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <blackbox_CloseFile+0x68>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	bb73      	cbnz	r3, 8000c94 <blackbox_CloseFile+0x64>
{
 8000c36:	b510      	push	{r4, lr}
	uint32_t startFileCLoseMillis = HAL_GetTick();
 8000c38:	f001 f9ec 	bl	8002014 <HAL_GetTick>
 8000c3c:	4604      	mov	r4, r0
	while(blackboxDataPending && HAL_GetTick() - startFileCLoseMillis < 300)
 8000c3e:	e001      	b.n	8000c44 <blackbox_CloseFile+0x14>
		blackbox_ProcessData();
 8000c40:	f7ff ffb6 	bl	8000bb0 <blackbox_ProcessData>
	while(blackboxDataPending && HAL_GetTick() - startFileCLoseMillis < 300)
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <blackbox_CloseFile+0x6c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b12b      	cbz	r3, 8000c56 <blackbox_CloseFile+0x26>
 8000c4a:	f001 f9e3 	bl	8002014 <HAL_GetTick>
 8000c4e:	1b00      	subs	r0, r0, r4
 8000c50:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8000c54:	d3f4      	bcc.n	8000c40 <blackbox_CloseFile+0x10>
	blackbox_WriteRandom(blackboxCurrentBuff, blackboxBuffIndex);
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <blackbox_CloseFile+0x70>)
 8000c58:	8819      	ldrh	r1, [r3, #0]
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <blackbox_CloseFile+0x74>)
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	f7ff ff35 	bl	8000acc <blackbox_WriteRandom>
	fr = f_truncate(&myFile);
 8000c62:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <blackbox_CloseFile+0x78>)
 8000c64:	f00a f80d 	bl	800ac82 <f_truncate>
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <blackbox_CloseFile+0x7c>)
 8000c6a:	7018      	strb	r0, [r3, #0]
	if(fr == FR_OK)
 8000c6c:	b110      	cbz	r0, 8000c74 <blackbox_CloseFile+0x44>
	return fr;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <blackbox_CloseFile+0x7c>)
 8000c70:	7818      	ldrb	r0, [r3, #0]
}
 8000c72:	bd10      	pop	{r4, pc}
		HAL_Delay(10);
 8000c74:	200a      	movs	r0, #10
 8000c76:	f001 f9d3 	bl	8002020 <HAL_Delay>
		fr = f_close(&myFile);
 8000c7a:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <blackbox_CloseFile+0x78>)
 8000c7c:	f009 fd4c 	bl	800a718 <f_close>
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <blackbox_CloseFile+0x7c>)
 8000c82:	7018      	strb	r0, [r3, #0]
		if(fr == FR_OK)
 8000c84:	2800      	cmp	r0, #0
 8000c86:	d1f2      	bne.n	8000c6e <blackbox_CloseFile+0x3e>
			blackboxFlushBuffers();
 8000c88:	f7ff ff4c 	bl	8000b24 <blackboxFlushBuffers>
			blackboxState = BB_INITIALIZED;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <blackbox_CloseFile+0x68>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	e7ec      	b.n	8000c6e <blackbox_CloseFile+0x3e>
	if(blackboxState != BB_FILE_READY) return FR_NOT_READY;
 8000c94:	2003      	movs	r0, #3
}
 8000c96:	4770      	bx	lr
 8000c98:	20000101 	.word	0x20000101
 8000c9c:	2000036c 	.word	0x2000036c
 8000ca0:	20000360 	.word	0x20000360
 8000ca4:	20000368 	.word	0x20000368
 8000ca8:	200033c0 	.word	0x200033c0
 8000cac:	20002380 	.word	0x20002380

08000cb0 <sdGetCardType>:
}


/* Mutator functions for sd card info */
uint32_t blackboxIsInitialized(){return SDInitialized;}
uint32_t sdGetCardType(){return CardType;}
 8000cb0:	4b01      	ldr	r3, [pc, #4]	; (8000cb8 <sdGetCardType+0x8>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	200002f8 	.word	0x200002f8

08000cbc <sdGetCardVersion>:
uint32_t sdGetCardVersion(){return CardVersion;}
 8000cbc:	4b01      	ldr	r3, [pc, #4]	; (8000cc4 <sdGetCardVersion+0x8>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200002fc 	.word	0x200002fc

08000cc8 <sdGetCardClass>:
uint32_t sdGetCardClass(){return Class;}
 8000cc8:	4b01      	ldr	r3, [pc, #4]	; (8000cd0 <sdGetCardClass+0x8>)
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000300 	.word	0x20000300

08000cd4 <sdGetCardAdd>:
uint32_t sdGetCardAdd(){return RelCardAdd;}
 8000cd4:	4b01      	ldr	r3, [pc, #4]	; (8000cdc <sdGetCardAdd+0x8>)
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2000030c 	.word	0x2000030c

08000ce0 <sdGetCardBlockNber>:
uint32_t sdGetCardBlockNber(){return BlockNbr;}
 8000ce0:	4b01      	ldr	r3, [pc, #4]	; (8000ce8 <sdGetCardBlockNber+0x8>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	200002f0 	.word	0x200002f0

08000cec <sdGetCardBlockSize>:
uint32_t sdGetCardBlockSize(){return BlockSize;}
 8000cec:	4b01      	ldr	r3, [pc, #4]	; (8000cf4 <sdGetCardBlockSize+0x8>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200002f4 	.word	0x200002f4

08000cf8 <sdGetCardLogBlkNber>:
uint32_t sdGetCardLogBlkNber(){return LogBlockNbr;}
 8000cf8:	4b01      	ldr	r3, [pc, #4]	; (8000d00 <sdGetCardLogBlkNber+0x8>)
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000304 	.word	0x20000304

08000d04 <sdGetCardLogBlockSize>:
uint32_t sdGetCardLogBlockSize(){return LogBlockSize;}
 8000d04:	4b01      	ldr	r3, [pc, #4]	; (8000d0c <sdGetCardLogBlockSize+0x8>)
 8000d06:	6818      	ldr	r0, [r3, #0]
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000308 	.word	0x20000308

08000d10 <sdGetWritekBps>:
uint32_t sdGetWritekBps(){return writeSpeedkBps;}
 8000d10:	4b01      	ldr	r3, [pc, #4]	; (8000d18 <sdGetWritekBps+0x8>)
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20004438 	.word	0x20004438

08000d1c <blackboxGetBytesWritten>:
uint32_t blackboxGetBytesWritten(){return blackboxBytesWritten;}
 8000d1c:	4b01      	ldr	r3, [pc, #4]	; (8000d24 <blackboxGetBytesWritten+0x8>)
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000364 	.word	0x20000364

08000d28 <printCLI>:
{
	memset(sprintfBuffer, '\0', strlen(sprintfBuffer));
}

void printCLI(void)
{
 8000d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d2c:	b093      	sub	sp, #76	; 0x4c
//	char read_Value = usart_Read(&huart1);
	char read_Value = vcp_Read();
 8000d2e:	f7ff fc45 	bl	80005bc <vcp_Read>
 8000d32:	4604      	mov	r4, r0

	/* Reset all streaming variables */
	memset(sprintfBuffer, '\0', strlen(sprintfBuffer));
 8000d34:	4d86      	ldr	r5, [pc, #536]	; (8000f50 <printCLI+0x228>)
 8000d36:	4628      	mov	r0, r5
 8000d38:	f7ff fa6a 	bl	8000210 <strlen>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4628      	mov	r0, r5
 8000d42:	f00a fc5f 	bl	800b604 <memset>
	if(read_Value == 'h')
 8000d46:	2c68      	cmp	r4, #104	; 0x68
 8000d48:	d04f      	beq.n	8000dea <printCLI+0xc2>
				"r - Reset CPU load\n\r"
				"\n"
				);
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
	}
	else if(read_Value == 'a')
 8000d4a:	3c31      	subs	r4, #49	; 0x31
 8000d4c:	2c49      	cmp	r4, #73	; 0x49
 8000d4e:	f200 81f4 	bhi.w	800113a <printCLI+0x412>
 8000d52:	e8df f014 	tbh	[pc, r4, lsl #1]
 8000d56:	007e      	.short	0x007e
 8000d58:	009c0099 	.word	0x009c0099
 8000d5c:	01f201f2 	.word	0x01f201f2
 8000d60:	01f201f2 	.word	0x01f201f2
 8000d64:	01f201f2 	.word	0x01f201f2
 8000d68:	01f201f2 	.word	0x01f201f2
 8000d6c:	01f201f2 	.word	0x01f201f2
 8000d70:	01f201f2 	.word	0x01f201f2
 8000d74:	01f201f2 	.word	0x01f201f2
 8000d78:	01f201f2 	.word	0x01f201f2
 8000d7c:	01f201f2 	.word	0x01f201f2
 8000d80:	01f201f2 	.word	0x01f201f2
 8000d84:	01f201f2 	.word	0x01f201f2
 8000d88:	01f201f2 	.word	0x01f201f2
 8000d8c:	01f201f2 	.word	0x01f201f2
 8000d90:	01f201f2 	.word	0x01f201f2
 8000d94:	01f201f2 	.word	0x01f201f2
 8000d98:	01f201f2 	.word	0x01f201f2
 8000d9c:	01f201f2 	.word	0x01f201f2
 8000da0:	01f201f2 	.word	0x01f201f2
 8000da4:	01f201f2 	.word	0x01f201f2
 8000da8:	01f201f2 	.word	0x01f201f2
 8000dac:	01f201f2 	.word	0x01f201f2
 8000db0:	01f201f2 	.word	0x01f201f2
 8000db4:	005901f2 	.word	0x005901f2
 8000db8:	011b01f2 	.word	0x011b01f2
 8000dbc:	01f20064 	.word	0x01f20064
 8000dc0:	01f200be 	.word	0x01f200be
 8000dc4:	01f201f2 	.word	0x01f201f2
 8000dc8:	01f201f2 	.word	0x01f201f2
 8000dcc:	00cd019a 	.word	0x00cd019a
 8000dd0:	01b201f2 	.word	0x01b201f2
 8000dd4:	01f201c8 	.word	0x01f201c8
 8000dd8:	00b801df 	.word	0x00b801df
 8000ddc:	01f201f2 	.word	0x01f201f2
 8000de0:	01f20161 	.word	0x01f20161
 8000de4:	01f2018a 	.word	0x01f2018a
 8000de8:	0184      	.short	0x0184
		sprintf(sprintfBuffer,"\n\r"
 8000dea:	22fc      	movs	r2, #252	; 0xfc
 8000dec:	4959      	ldr	r1, [pc, #356]	; (8000f54 <printCLI+0x22c>)
 8000dee:	4628      	mov	r0, r5
 8000df0:	f00a fc3c 	bl	800b66c <memcpy>
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 8000df4:	4628      	mov	r0, r5
 8000df6:	f7ff fa0b 	bl	8000210 <strlen>
 8000dfa:	4601      	mov	r1, r0
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	f00a f98f 	bl	800b120 <CDC_Transmit_FS>
	else
	{
		sprintf(sprintfBuffer, "Invalid Command");
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
	}
}
 8000e02:	b013      	add	sp, #76	; 0x4c
 8000e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(stopBlink) stopBlink = 0;
 8000e08:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <printCLI+0x230>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	b11b      	cbz	r3, 8000e16 <printCLI+0xee>
 8000e0e:	4b52      	ldr	r3, [pc, #328]	; (8000f58 <printCLI+0x230>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e7f5      	b.n	8000e02 <printCLI+0xda>
		else stopBlink = 1;
 8000e16:	4b50      	ldr	r3, [pc, #320]	; (8000f58 <printCLI+0x230>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e7f1      	b.n	8000e02 <printCLI+0xda>
		sprintf(sprintfBuffer,"SD Inserted\n\r");
 8000e1e:	4b4f      	ldr	r3, [pc, #316]	; (8000f5c <printCLI+0x234>)
 8000e20:	4c4b      	ldr	r4, [pc, #300]	; (8000f50 <printCLI+0x228>)
 8000e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e24:	c407      	stmia	r4!, {r0, r1, r2}
 8000e26:	8023      	strh	r3, [r4, #0]
		if(HAL_GPIO_ReadPin(SDDETECT_GPIO_Port, SDDETECT_Pin))
 8000e28:	2102      	movs	r1, #2
 8000e2a:	484d      	ldr	r0, [pc, #308]	; (8000f60 <printCLI+0x238>)
 8000e2c:	f001 fd30 	bl	8002890 <HAL_GPIO_ReadPin>
 8000e30:	b940      	cbnz	r0, 8000e44 <printCLI+0x11c>
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 8000e32:	4c47      	ldr	r4, [pc, #284]	; (8000f50 <printCLI+0x228>)
 8000e34:	4620      	mov	r0, r4
 8000e36:	f7ff f9eb 	bl	8000210 <strlen>
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f00a f96f 	bl	800b120 <CDC_Transmit_FS>
 8000e42:	e7de      	b.n	8000e02 <printCLI+0xda>
			sprintf(sprintfBuffer,"NO SD INSERTED\n\r");
 8000e44:	3c0c      	subs	r4, #12
 8000e46:	4d47      	ldr	r5, [pc, #284]	; (8000f64 <printCLI+0x23c>)
 8000e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	7023      	strb	r3, [r4, #0]
 8000e50:	e7ef      	b.n	8000e32 <printCLI+0x10a>
		uint8_t res = blackbox_CloseFile();
 8000e52:	f7ff feed 	bl	8000c30 <blackbox_CloseFile>
		if(res == 0){
 8000e56:	4602      	mov	r2, r0
 8000e58:	b988      	cbnz	r0, 8000e7e <printCLI+0x156>
			sprintf(sprintfBuffer,"Closed Successfully\n\r");
 8000e5a:	4c3d      	ldr	r4, [pc, #244]	; (8000f50 <printCLI+0x228>)
 8000e5c:	4d42      	ldr	r5, [pc, #264]	; (8000f68 <printCLI+0x240>)
 8000e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e66:	f844 0b04 	str.w	r0, [r4], #4
 8000e6a:	8021      	strh	r1, [r4, #0]
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 8000e6c:	4c38      	ldr	r4, [pc, #224]	; (8000f50 <printCLI+0x228>)
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f7ff f9ce 	bl	8000210 <strlen>
 8000e74:	4601      	mov	r1, r0
 8000e76:	4620      	mov	r0, r4
 8000e78:	f00a f952 	bl	800b120 <CDC_Transmit_FS>
 8000e7c:	e7c1      	b.n	8000e02 <printCLI+0xda>
			sprintf(sprintfBuffer,"Close Failed %u\n\r", res);
 8000e7e:	493b      	ldr	r1, [pc, #236]	; (8000f6c <printCLI+0x244>)
 8000e80:	4833      	ldr	r0, [pc, #204]	; (8000f50 <printCLI+0x228>)
 8000e82:	f00a fb9f 	bl	800b5c4 <siprintf>
 8000e86:	e7f1      	b.n	8000e6c <printCLI+0x144>
		blackbox_Sync();
 8000e88:	f7ff fd60 	bl	800094c <blackbox_Sync>
 8000e8c:	e7b9      	b.n	8000e02 <printCLI+0xda>
		uint8_t res = blackbox_CreateFile(loggingFileSize);
 8000e8e:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <printCLI+0x248>)
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	f7ff fcdb 	bl	800084c <blackbox_CreateFile>
		if(res == 0){
 8000e96:	4602      	mov	r2, r0
 8000e98:	b980      	cbnz	r0, 8000ebc <printCLI+0x194>
			sprintf(sprintfBuffer,"File Created\n\r");
 8000e9a:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <printCLI+0x24c>)
 8000e9c:	4c2c      	ldr	r4, [pc, #176]	; (8000f50 <printCLI+0x228>)
 8000e9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea0:	c407      	stmia	r4!, {r0, r1, r2}
 8000ea2:	f824 3b02 	strh.w	r3, [r4], #2
 8000ea6:	0c1b      	lsrs	r3, r3, #16
 8000ea8:	7023      	strb	r3, [r4, #0]
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 8000eaa:	4c29      	ldr	r4, [pc, #164]	; (8000f50 <printCLI+0x228>)
 8000eac:	4620      	mov	r0, r4
 8000eae:	f7ff f9af 	bl	8000210 <strlen>
 8000eb2:	4601      	mov	r1, r0
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f00a f933 	bl	800b120 <CDC_Transmit_FS>
 8000eba:	e7a2      	b.n	8000e02 <printCLI+0xda>
			sprintf(sprintfBuffer,"File Failed %u\n\r", res);
 8000ebc:	492e      	ldr	r1, [pc, #184]	; (8000f78 <printCLI+0x250>)
 8000ebe:	4824      	ldr	r0, [pc, #144]	; (8000f50 <printCLI+0x228>)
 8000ec0:	f00a fb80 	bl	800b5c4 <siprintf>
 8000ec4:	e7f1      	b.n	8000eaa <printCLI+0x182>
		 streamSDIO = streamSDIO ^ 1;
 8000ec6:	4a2d      	ldr	r2, [pc, #180]	; (8000f7c <printCLI+0x254>)
 8000ec8:	6813      	ldr	r3, [r2, #0]
 8000eca:	f083 0301 	eor.w	r3, r3, #1
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	e797      	b.n	8000e02 <printCLI+0xda>
		if(!streamDataSet)
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <printCLI+0x258>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b92b      	cbnz	r3, 8000ee4 <printCLI+0x1bc>
			streamDataSet = 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	4a29      	ldr	r2, [pc, #164]	; (8000f80 <printCLI+0x258>)
 8000edc:	7013      	strb	r3, [r2, #0]
			streamBuffRem = 1;
 8000ede:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <printCLI+0x25c>)
 8000ee0:	7013      	strb	r3, [r2, #0]
 8000ee2:	e78e      	b.n	8000e02 <printCLI+0xda>
			streamDataSet = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	4a26      	ldr	r2, [pc, #152]	; (8000f80 <printCLI+0x258>)
 8000ee8:	7013      	strb	r3, [r2, #0]
			streamBuffRem = 0;
 8000eea:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <printCLI+0x25c>)
 8000eec:	7013      	strb	r3, [r2, #0]
 8000eee:	e788      	b.n	8000e02 <printCLI+0xda>
		sprintf(sprintfBuffer,"\n\r"
 8000ef0:	f7ff fede 	bl	8000cb0 <sdGetCardType>
 8000ef4:	4605      	mov	r5, r0
 8000ef6:	f7ff fee1 	bl	8000cbc <sdGetCardVersion>
 8000efa:	4606      	mov	r6, r0
 8000efc:	f7ff fee4 	bl	8000cc8 <sdGetCardClass>
 8000f00:	4607      	mov	r7, r0
 8000f02:	f7ff fee7 	bl	8000cd4 <sdGetCardAdd>
 8000f06:	4680      	mov	r8, r0
 8000f08:	f7ff feea 	bl	8000ce0 <sdGetCardBlockNber>
 8000f0c:	4681      	mov	r9, r0
 8000f0e:	f7ff feed 	bl	8000cec <sdGetCardBlockSize>
 8000f12:	4682      	mov	sl, r0
 8000f14:	f7ff fef0 	bl	8000cf8 <sdGetCardLogBlkNber>
 8000f18:	4683      	mov	fp, r0
 8000f1a:	f7ff fef3 	bl	8000d04 <sdGetCardLogBlockSize>
 8000f1e:	4c0c      	ldr	r4, [pc, #48]	; (8000f50 <printCLI+0x228>)
 8000f20:	9005      	str	r0, [sp, #20]
 8000f22:	f8cd b010 	str.w	fp, [sp, #16]
 8000f26:	f8cd a00c 	str.w	sl, [sp, #12]
 8000f2a:	f8cd 9008 	str.w	r9, [sp, #8]
 8000f2e:	f8cd 8004 	str.w	r8, [sp, #4]
 8000f32:	9700      	str	r7, [sp, #0]
 8000f34:	4633      	mov	r3, r6
 8000f36:	462a      	mov	r2, r5
 8000f38:	4913      	ldr	r1, [pc, #76]	; (8000f88 <printCLI+0x260>)
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f00a fb42 	bl	800b5c4 <siprintf>
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 8000f40:	4620      	mov	r0, r4
 8000f42:	f7ff f965 	bl	8000210 <strlen>
 8000f46:	4601      	mov	r1, r0
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f00a f8e9 	bl	800b120 <CDC_Transmit_FS>
 8000f4e:	e758      	b.n	8000e02 <printCLI+0xda>
 8000f50:	20004440 	.word	0x20004440
 8000f54:	0800bf34 	.word	0x0800bf34
 8000f58:	20004a1c 	.word	0x20004a1c
 8000f5c:	0800c030 	.word	0x0800c030
 8000f60:	40020400 	.word	0x40020400
 8000f64:	0800c040 	.word	0x0800c040
 8000f68:	0800c054 	.word	0x0800c054
 8000f6c:	0800c06c 	.word	0x0800c06c
 8000f70:	20000124 	.word	0x20000124
 8000f74:	0800c080 	.word	0x0800c080
 8000f78:	0800c090 	.word	0x0800c090
 8000f7c:	20004a20 	.word	0x20004a20
 8000f80:	20004641 	.word	0x20004641
 8000f84:	20004640 	.word	0x20004640
 8000f88:	0800c0a4 	.word	0x0800c0a4
		sprintf(sprintfBuffer,"\n\r"
 8000f8c:	4b71      	ldr	r3, [pc, #452]	; (8001154 <printCLI+0x42c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	930d      	str	r3, [sp, #52]	; 0x34
 8000f92:	4b71      	ldr	r3, [pc, #452]	; (8001158 <printCLI+0x430>)
 8000f94:	6819      	ldr	r1, [r3, #0]
 8000f96:	910e      	str	r1, [sp, #56]	; 0x38
 8000f98:	4b70      	ldr	r3, [pc, #448]	; (800115c <printCLI+0x434>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	900f      	str	r0, [sp, #60]	; 0x3c
 8000f9e:	4b70      	ldr	r3, [pc, #448]	; (8001160 <printCLI+0x438>)
 8000fa0:	681c      	ldr	r4, [r3, #0]
 8000fa2:	9410      	str	r4, [sp, #64]	; 0x40
 8000fa4:	4b6f      	ldr	r3, [pc, #444]	; (8001164 <printCLI+0x43c>)
 8000fa6:	681d      	ldr	r5, [r3, #0]
 8000fa8:	9511      	str	r5, [sp, #68]	; 0x44
 8000faa:	4b6f      	ldr	r3, [pc, #444]	; (8001168 <printCLI+0x440>)
 8000fac:	681e      	ldr	r6, [r3, #0]
 8000fae:	4b6f      	ldr	r3, [pc, #444]	; (800116c <printCLI+0x444>)
 8000fb0:	681f      	ldr	r7, [r3, #0]
 8000fb2:	4b6f      	ldr	r3, [pc, #444]	; (8001170 <printCLI+0x448>)
 8000fb4:	f8d3 8000 	ldr.w	r8, [r3]
 8000fb8:	4b6e      	ldr	r3, [pc, #440]	; (8001174 <printCLI+0x44c>)
 8000fba:	f8d3 9000 	ldr.w	r9, [r3]
 8000fbe:	4b6e      	ldr	r3, [pc, #440]	; (8001178 <printCLI+0x450>)
 8000fc0:	f8d3 a000 	ldr.w	sl, [r3]
 8000fc4:	4b6d      	ldr	r3, [pc, #436]	; (800117c <printCLI+0x454>)
 8000fc6:	f8d3 b000 	ldr.w	fp, [r3]
				(blackboxGetBytesWritten()/(1048576)),
 8000fca:	f7ff fea7 	bl	8000d1c <blackboxGetBytesWritten>
 8000fce:	4604      	mov	r4, r0
				blackboxIsFileFull()
 8000fd0:	f7ff fcac 	bl	800092c <blackboxIsFileFull>
		sprintf(sprintfBuffer,"\n\r"
 8000fd4:	4d6a      	ldr	r5, [pc, #424]	; (8001180 <printCLI+0x458>)
 8000fd6:	900a      	str	r0, [sp, #40]	; 0x28
 8000fd8:	0d24      	lsrs	r4, r4, #20
 8000fda:	9409      	str	r4, [sp, #36]	; 0x24
 8000fdc:	f8cd b020 	str.w	fp, [sp, #32]
 8000fe0:	f8cd a01c 	str.w	sl, [sp, #28]
 8000fe4:	f8cd 9018 	str.w	r9, [sp, #24]
 8000fe8:	f8cd 8014 	str.w	r8, [sp, #20]
 8000fec:	9704      	str	r7, [sp, #16]
 8000fee:	9603      	str	r6, [sp, #12]
 8000ff0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8000ff2:	9602      	str	r6, [sp, #8]
 8000ff4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8000ff6:	9401      	str	r4, [sp, #4]
 8000ff8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000ffa:	9000      	str	r0, [sp, #0]
 8000ffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001000:	4960      	ldr	r1, [pc, #384]	; (8001184 <printCLI+0x45c>)
 8001002:	4628      	mov	r0, r5
 8001004:	f00a fade 	bl	800b5c4 <siprintf>
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 8001008:	4628      	mov	r0, r5
 800100a:	f7ff f901 	bl	8000210 <strlen>
 800100e:	4601      	mov	r1, r0
 8001010:	4628      	mov	r0, r5
 8001012:	f00a f885 	bl	800b120 <CDC_Transmit_FS>
 8001016:	e6f4      	b.n	8000e02 <printCLI+0xda>
		sprintf(sprintfBuffer,"\n\r"
 8001018:	4c59      	ldr	r4, [pc, #356]	; (8001180 <printCLI+0x458>)
 800101a:	4b5b      	ldr	r3, [pc, #364]	; (8001188 <printCLI+0x460>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	9305      	str	r3, [sp, #20]
 8001020:	4b5a      	ldr	r3, [pc, #360]	; (800118c <printCLI+0x464>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	9304      	str	r3, [sp, #16]
 8001026:	4b5a      	ldr	r3, [pc, #360]	; (8001190 <printCLI+0x468>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	9303      	str	r3, [sp, #12]
 800102c:	4b59      	ldr	r3, [pc, #356]	; (8001194 <printCLI+0x46c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	4b59      	ldr	r3, [pc, #356]	; (8001198 <printCLI+0x470>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	4b58      	ldr	r3, [pc, #352]	; (800119c <printCLI+0x474>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	4b58      	ldr	r3, [pc, #352]	; (80011a0 <printCLI+0x478>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a58      	ldr	r2, [pc, #352]	; (80011a4 <printCLI+0x47c>)
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	4958      	ldr	r1, [pc, #352]	; (80011a8 <printCLI+0x480>)
 8001048:	4620      	mov	r0, r4
 800104a:	f00a fabb 	bl	800b5c4 <siprintf>
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 800104e:	4620      	mov	r0, r4
 8001050:	f7ff f8de 	bl	8000210 <strlen>
 8001054:	4601      	mov	r1, r0
 8001056:	4620      	mov	r0, r4
 8001058:	f00a f862 	bl	800b120 <CDC_Transmit_FS>
 800105c:	e6d1      	b.n	8000e02 <printCLI+0xda>
		doSDBenchmark = doSDBenchmark ^ 1;
 800105e:	4a53      	ldr	r2, [pc, #332]	; (80011ac <printCLI+0x484>)
 8001060:	7813      	ldrb	r3, [r2, #0]
 8001062:	f083 0301 	eor.w	r3, r3, #1
 8001066:	7013      	strb	r3, [r2, #0]
 8001068:	e6cb      	b.n	8000e02 <printCLI+0xda>
		sprintf(sprintfBuffer, "Write kBps %u\n\r", sdGetWritekBps());
 800106a:	f7ff fe51 	bl	8000d10 <sdGetWritekBps>
 800106e:	4602      	mov	r2, r0
 8001070:	4c43      	ldr	r4, [pc, #268]	; (8001180 <printCLI+0x458>)
 8001072:	494f      	ldr	r1, [pc, #316]	; (80011b0 <printCLI+0x488>)
 8001074:	4620      	mov	r0, r4
 8001076:	f00a faa5 	bl	800b5c4 <siprintf>
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff f8c8 	bl	8000210 <strlen>
 8001080:	4601      	mov	r1, r0
 8001082:	4620      	mov	r0, r4
 8001084:	f00a f84c 	bl	800b120 <CDC_Transmit_FS>
 8001088:	e6bb      	b.n	8000e02 <printCLI+0xda>
				cpuLoad_GetPercentLoad(),
 800108a:	f000 f975 	bl	8001378 <cpuLoad_GetPercentLoad>
 800108e:	4605      	mov	r5, r0
		sprintf(sprintfBuffer,
 8001090:	f000 f97e 	bl	8001390 <cpuLoad_GetMinLoopTime>
 8001094:	4606      	mov	r6, r0
 8001096:	f000 f975 	bl	8001384 <cpuLoad_GetMaxLoopTime>
 800109a:	4c39      	ldr	r4, [pc, #228]	; (8001180 <printCLI+0x458>)
 800109c:	9000      	str	r0, [sp, #0]
 800109e:	4633      	mov	r3, r6
 80010a0:	462a      	mov	r2, r5
 80010a2:	4944      	ldr	r1, [pc, #272]	; (80011b4 <printCLI+0x48c>)
 80010a4:	4620      	mov	r0, r4
 80010a6:	f00a fa8d 	bl	800b5c4 <siprintf>
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 80010aa:	4620      	mov	r0, r4
 80010ac:	f7ff f8b0 	bl	8000210 <strlen>
 80010b0:	4601      	mov	r1, r0
 80010b2:	4620      	mov	r0, r4
 80010b4:	f00a f834 	bl	800b120 <CDC_Transmit_FS>
 80010b8:	e6a3      	b.n	8000e02 <printCLI+0xda>
		if(delayMicroseconds > 1) delayMicroseconds--;
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <printCLI+0x490>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d902      	bls.n	80010c8 <printCLI+0x3a0>
 80010c2:	3b01      	subs	r3, #1
 80010c4:	4a3c      	ldr	r2, [pc, #240]	; (80011b8 <printCLI+0x490>)
 80010c6:	6013      	str	r3, [r2, #0]
		sprintf(sprintfBuffer, "Delay %u\n\r", delayMicroseconds);
 80010c8:	4c2d      	ldr	r4, [pc, #180]	; (8001180 <printCLI+0x458>)
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <printCLI+0x490>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	493b      	ldr	r1, [pc, #236]	; (80011bc <printCLI+0x494>)
 80010d0:	4620      	mov	r0, r4
 80010d2:	f00a fa77 	bl	800b5c4 <siprintf>
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 80010d6:	4620      	mov	r0, r4
 80010d8:	f7ff f89a 	bl	8000210 <strlen>
 80010dc:	4601      	mov	r1, r0
 80010de:	4620      	mov	r0, r4
 80010e0:	f00a f81e 	bl	800b120 <CDC_Transmit_FS>
 80010e4:	e68d      	b.n	8000e02 <printCLI+0xda>
		if(delayMicroseconds < 100000) delayMicroseconds++;
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <printCLI+0x490>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a35      	ldr	r2, [pc, #212]	; (80011c0 <printCLI+0x498>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d802      	bhi.n	80010f6 <printCLI+0x3ce>
 80010f0:	3301      	adds	r3, #1
 80010f2:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <printCLI+0x490>)
 80010f4:	6013      	str	r3, [r2, #0]
		sprintf(sprintfBuffer, "Delay %u\n\r", delayMicroseconds);
 80010f6:	4c22      	ldr	r4, [pc, #136]	; (8001180 <printCLI+0x458>)
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <printCLI+0x490>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	492f      	ldr	r1, [pc, #188]	; (80011bc <printCLI+0x494>)
 80010fe:	4620      	mov	r0, r4
 8001100:	f00a fa60 	bl	800b5c4 <siprintf>
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 8001104:	4620      	mov	r0, r4
 8001106:	f7ff f883 	bl	8000210 <strlen>
 800110a:	4601      	mov	r1, r0
 800110c:	4620      	mov	r0, r4
 800110e:	f00a f807 	bl	800b120 <CDC_Transmit_FS>
 8001112:	e676      	b.n	8000e02 <printCLI+0xda>
		cpuLoad_Reset();
 8001114:	f000 f914 	bl	8001340 <cpuLoad_Reset>
		sprintf(sprintfBuffer, "CPU Load Calculation Reset\n\r");
 8001118:	4e19      	ldr	r6, [pc, #100]	; (8001180 <printCLI+0x458>)
 800111a:	4634      	mov	r4, r6
 800111c:	4d29      	ldr	r5, [pc, #164]	; (80011c4 <printCLI+0x49c>)
 800111e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001122:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001126:	c407      	stmia	r4!, {r0, r1, r2}
 8001128:	7023      	strb	r3, [r4, #0]
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 800112a:	4630      	mov	r0, r6
 800112c:	f7ff f870 	bl	8000210 <strlen>
 8001130:	4601      	mov	r1, r0
 8001132:	4630      	mov	r0, r6
 8001134:	f009 fff4 	bl	800b120 <CDC_Transmit_FS>
 8001138:	e663      	b.n	8000e02 <printCLI+0xda>
		sprintf(sprintfBuffer, "Invalid Command");
 800113a:	4c11      	ldr	r4, [pc, #68]	; (8001180 <printCLI+0x458>)
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <printCLI+0x4a0>)
 800113e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff f863 	bl	8000210 <strlen>
 800114a:	4601      	mov	r1, r0
 800114c:	4620      	mov	r0, r4
 800114e:	f009 ffe7 	bl	800b120 <CDC_Transmit_FS>
}
 8001152:	e656      	b.n	8000e02 <printCLI+0xda>
 8001154:	2000034c 	.word	0x2000034c
 8001158:	20000324 	.word	0x20000324
 800115c:	20000358 	.word	0x20000358
 8001160:	2000035c 	.word	0x2000035c
 8001164:	20000354 	.word	0x20000354
 8001168:	20000350 	.word	0x20000350
 800116c:	20000348 	.word	0x20000348
 8001170:	20000318 	.word	0x20000318
 8001174:	2000031c 	.word	0x2000031c
 8001178:	20000314 	.word	0x20000314
 800117c:	20000320 	.word	0x20000320
 8001180:	20004440 	.word	0x20004440
 8001184:	0800c11c 	.word	0x0800c11c
 8001188:	20000344 	.word	0x20000344
 800118c:	20000338 	.word	0x20000338
 8001190:	20000328 	.word	0x20000328
 8001194:	20000334 	.word	0x20000334
 8001198:	2000032c 	.word	0x2000032c
 800119c:	20000340 	.word	0x20000340
 80011a0:	2000033c 	.word	0x2000033c
 80011a4:	20000330 	.word	0x20000330
 80011a8:	0800c1d8 	.word	0x0800c1d8
 80011ac:	20004a10 	.word	0x20004a10
 80011b0:	0800c230 	.word	0x0800c230
 80011b4:	0800c240 	.word	0x0800c240
 80011b8:	20000108 	.word	0x20000108
 80011bc:	0800c26c 	.word	0x0800c26c
 80011c0:	0001869f 	.word	0x0001869f
 80011c4:	0800c278 	.word	0x0800c278
 80011c8:	0800c298 	.word	0x0800c298

080011cc <streamData>:

void streamData()
{
	static uint32_t printLastTimeMillis = 0;
	if(streamDataSet)
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <streamData+0x4c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b903      	cbnz	r3, 80011d4 <streamData+0x8>
 80011d2:	4770      	bx	lr
{
 80011d4:	b510      	push	{r4, lr}
	{
		if(HAL_GetTick() - printLastTimeMillis >= 5)
 80011d6:	f000 ff1d 	bl	8002014 <HAL_GetTick>
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <streamData+0x50>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ac0      	subs	r0, r0, r3
 80011e0:	2804      	cmp	r0, #4
 80011e2:	d800      	bhi.n	80011e6 <streamData+0x1a>
				sprintf(sprintfBuffer, "%u\n", blackboxGetBufferAvailable());
				CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
			}
		}
	}
}
 80011e4:	bd10      	pop	{r4, pc}
			printLastTimeMillis = HAL_GetTick();
 80011e6:	f000 ff15 	bl	8002014 <HAL_GetTick>
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <streamData+0x50>)
 80011ec:	6018      	str	r0, [r3, #0]
			if(streamBuffRem)
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <streamData+0x54>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f6      	beq.n	80011e4 <streamData+0x18>
				sprintf(sprintfBuffer, "%u\n", blackboxGetBufferAvailable());
 80011f6:	f7ff fcb3 	bl	8000b60 <blackboxGetBufferAvailable>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4c09      	ldr	r4, [pc, #36]	; (8001224 <streamData+0x58>)
 80011fe:	490a      	ldr	r1, [pc, #40]	; (8001228 <streamData+0x5c>)
 8001200:	4620      	mov	r0, r4
 8001202:	f00a f9df 	bl	800b5c4 <siprintf>
				CDC_Transmit_FS((uint8_t*) sprintfBuffer, strlen(sprintfBuffer));
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff f802 	bl	8000210 <strlen>
 800120c:	4601      	mov	r1, r0
 800120e:	4620      	mov	r0, r4
 8001210:	f009 ff86 	bl	800b120 <CDC_Transmit_FS>
}
 8001214:	e7e6      	b.n	80011e4 <streamData+0x18>
 8001216:	bf00      	nop
 8001218:	20004641 	.word	0x20004641
 800121c:	2000443c 	.word	0x2000443c
 8001220:	20004640 	.word	0x20004640
 8001224:	20004440 	.word	0x20004440
 8001228:	0800c2a8 	.word	0x0800c2a8

0800122c <cpuLoad_Init>:

/* Initialize states of CPU processes */
void cpuLoad_Init(cpuLoad_t *cpuLoad)
{
	/* Time variables */
	cpuLoad->functionStartMicros = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	6003      	str	r3, [r0, #0]
	cpuLoad->functionEndMicros = 0;
 8001230:	6043      	str	r3, [r0, #4]
	cpuLoad->totalFunctionMicros = 0;
 8001232:	6083      	str	r3, [r0, #8]
	/* Statistics */
	cpuLoad->maxMicros = 0;
 8001234:	6103      	str	r3, [r0, #16]
	cpuLoad->minMicros = UINT32_T_MAX;
 8001236:	f04f 32ff 	mov.w	r2, #4294967295
 800123a:	6142      	str	r2, [r0, #20]
	cpuLoad->avgMicros = 0;
 800123c:	6183      	str	r3, [r0, #24]
	cpuLoad->numSamples = 0;
 800123e:	f880 3020 	strb.w	r3, [r0, #32]
}
 8001242:	4770      	bx	lr

08001244 <cpuLoad_Start>:

/* Start the calculate of CPU load times */
void cpuLoad_Start(cpuLoad_t *cpuLoad)
{
 8001244:	b510      	push	{r4, lr}
 8001246:	4604      	mov	r4, r0
	cpuLoad->functionStartMicros = getMircos();
 8001248:	f000 fe66 	bl	8001f18 <getMircos>
 800124c:	6020      	str	r0, [r4, #0]
}
 800124e:	bd10      	pop	{r4, pc}

08001250 <cpuLoad_End>:

/* Stop/Halt the calculate of CPU load times
 * Retrieve the time and calculate statistics
 * */
void cpuLoad_End(cpuLoad_t *cpuLoad)
{
 8001250:	b510      	push	{r4, lr}
 8001252:	4604      	mov	r4, r0
	cpuLoad->functionEndMicros = getMircos();
 8001254:	f000 fe60 	bl	8001f18 <getMircos>
 8001258:	6060      	str	r0, [r4, #4]
	cpuLoad->totalFunctionMicros = cpuLoad->functionEndMicros - cpuLoad->functionStartMicros;
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	1ac3      	subs	r3, r0, r3
 800125e:	60a3      	str	r3, [r4, #8]

	cpuLoadMicrosSum += cpuLoad->totalFunctionMicros;
 8001260:	4911      	ldr	r1, [pc, #68]	; (80012a8 <cpuLoad_End+0x58>)
 8001262:	680a      	ldr	r2, [r1, #0]
 8001264:	441a      	add	r2, r3
 8001266:	600a      	str	r2, [r1, #0]

	if(cpuLoad->totalFunctionMicros > cpuLoad->maxMicros) cpuLoad->maxMicros = cpuLoad->totalFunctionMicros;
 8001268:	6922      	ldr	r2, [r4, #16]
 800126a:	4293      	cmp	r3, r2
 800126c:	d90c      	bls.n	8001288 <cpuLoad_End+0x38>
 800126e:	6123      	str	r3, [r4, #16]
	else if(cpuLoad->totalFunctionMicros < cpuLoad->minMicros) cpuLoad->minMicros = cpuLoad->totalFunctionMicros;

	cpuLoad->numSamples++;
 8001270:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001274:	3201      	adds	r2, #1
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	f884 2020 	strb.w	r2, [r4, #32]
	cpuLoad->avgMicrosAccum += cpuLoad->totalFunctionMicros;
 800127c:	69e1      	ldr	r1, [r4, #28]
 800127e:	440b      	add	r3, r1
 8001280:	61e3      	str	r3, [r4, #28]
	if(cpuLoad->numSamples == CPU_LOAD_NUM_SAMPLES)
 8001282:	2a14      	cmp	r2, #20
 8001284:	d005      	beq.n	8001292 <cpuLoad_End+0x42>
	{
		cpuLoad->numSamples = 0;
		cpuLoad->avgMicros = cpuLoad->avgMicrosAccum / CPU_LOAD_NUM_SAMPLES;
	}

}
 8001286:	bd10      	pop	{r4, pc}
	else if(cpuLoad->totalFunctionMicros < cpuLoad->minMicros) cpuLoad->minMicros = cpuLoad->totalFunctionMicros;
 8001288:	6962      	ldr	r2, [r4, #20]
 800128a:	4293      	cmp	r3, r2
 800128c:	d2f0      	bcs.n	8001270 <cpuLoad_End+0x20>
 800128e:	6163      	str	r3, [r4, #20]
 8001290:	e7ee      	b.n	8001270 <cpuLoad_End+0x20>
		cpuLoad->numSamples = 0;
 8001292:	2200      	movs	r2, #0
 8001294:	f884 2020 	strb.w	r2, [r4, #32]
		cpuLoad->avgMicros = cpuLoad->avgMicrosAccum / CPU_LOAD_NUM_SAMPLES;
 8001298:	f1a2 3233 	sub.w	r2, r2, #858993459	; 0x33333333
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	61a3      	str	r3, [r4, #24]
}
 80012a4:	e7ef      	b.n	8001286 <cpuLoad_End+0x36>
 80012a6:	bf00      	nop
 80012a8:	20004648 	.word	0x20004648

080012ac <cpuLoad_Process>:
static uint32_t dummyvalue = 0;
/* Must be run every main loop
 * House keeping and checks when a new CPU utilization should be calculated
 * */
void cpuLoad_Process()
{
 80012ac:	b510      	push	{r4, lr}
	uint32_t loopMicros = cpuLoadMicrosSum - cpuLoadMicrosSumPrevious;
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <cpuLoad_Process+0x70>)
 80012b0:	6819      	ldr	r1, [r3, #0]
 80012b2:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <cpuLoad_Process+0x74>)
 80012b4:	6813      	ldr	r3, [r2, #0]
 80012b6:	1acb      	subs	r3, r1, r3
	cpuLoadMicrosSumPrevious = cpuLoadMicrosSum;
 80012b8:	6011      	str	r1, [r2, #0]

	if(loopMicros > cpuLoadMaxLoopMicros) cpuLoadMaxLoopMicros = loopMicros;
 80012ba:	4a1a      	ldr	r2, [pc, #104]	; (8001324 <cpuLoad_Process+0x78>)
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d210      	bcs.n	80012e4 <cpuLoad_Process+0x38>
 80012c2:	4a18      	ldr	r2, [pc, #96]	; (8001324 <cpuLoad_Process+0x78>)
 80012c4:	6013      	str	r3, [r2, #0]
	else if(loopMicros < cpuLoadMinLoopMicros) cpuLoadMinLoopMicros = loopMicros;

	uint32_t microsNow = getMircos();
 80012c6:	f000 fe27 	bl	8001f18 <getMircos>
	uint32_t microsDelta = microsNow - cpuLoadStartMicros;
 80012ca:	4c17      	ldr	r4, [pc, #92]	; (8001328 <cpuLoad_Process+0x7c>)
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	1ac0      	subs	r0, r0, r3
	dummyvalue = microsDelta;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <cpuLoad_Process+0x80>)
 80012d2:	6018      	str	r0, [r3, #0]
	if(getMircos() - cpuLoadStartMicros >= cpuLoadPeriodMicros)
 80012d4:	f000 fe20 	bl	8001f18 <getMircos>
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	1ac0      	subs	r0, r0, r3
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <cpuLoad_Process+0x84>)
 80012de:	4298      	cmp	r0, r3
 80012e0:	d807      	bhi.n	80012f2 <cpuLoad_Process+0x46>
		cpuLoadStartMicros = getMircos();
		cpuPercentLoad = (100*cpuLoadMicrosSum)/cpuLoadPeriodMicros;
		cpuLoadMicrosSum = 0;
		cpuLoadMicrosSumPrevious = 0;
	}
}
 80012e2:	bd10      	pop	{r4, pc}
	else if(loopMicros < cpuLoadMinLoopMicros) cpuLoadMinLoopMicros = loopMicros;
 80012e4:	4a13      	ldr	r2, [pc, #76]	; (8001334 <cpuLoad_Process+0x88>)
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d9ec      	bls.n	80012c6 <cpuLoad_Process+0x1a>
 80012ec:	4a11      	ldr	r2, [pc, #68]	; (8001334 <cpuLoad_Process+0x88>)
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	e7e9      	b.n	80012c6 <cpuLoad_Process+0x1a>
		cpuLoadStartMicros = getMircos();
 80012f2:	f000 fe11 	bl	8001f18 <getMircos>
 80012f6:	6020      	str	r0, [r4, #0]
		cpuPercentLoad = (100*cpuLoadMicrosSum)/cpuLoadPeriodMicros;
 80012f8:	4a08      	ldr	r2, [pc, #32]	; (800131c <cpuLoad_Process+0x70>)
 80012fa:	6813      	ldr	r3, [r2, #0]
 80012fc:	2164      	movs	r1, #100	; 0x64
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <cpuLoad_Process+0x8c>)
 8001306:	fba1 1303 	umull	r1, r3, r1, r3
 800130a:	09db      	lsrs	r3, r3, #7
 800130c:	490b      	ldr	r1, [pc, #44]	; (800133c <cpuLoad_Process+0x90>)
 800130e:	700b      	strb	r3, [r1, #0]
		cpuLoadMicrosSum = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	6013      	str	r3, [r2, #0]
		cpuLoadMicrosSumPrevious = 0;
 8001314:	4a02      	ldr	r2, [pc, #8]	; (8001320 <cpuLoad_Process+0x74>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	e7e3      	b.n	80012e2 <cpuLoad_Process+0x36>
 800131a:	bf00      	nop
 800131c:	20004648 	.word	0x20004648
 8001320:	2000464c 	.word	0x2000464c
 8001324:	20004644 	.word	0x20004644
 8001328:	20004650 	.word	0x20004650
 800132c:	20004658 	.word	0x20004658
 8001330:	0001869f 	.word	0x0001869f
 8001334:	20000104 	.word	0x20000104
 8001338:	0a7c5ac5 	.word	0x0a7c5ac5
 800133c:	20004654 	.word	0x20004654

08001340 <cpuLoad_Reset>:

/* Reset statistic for CPU utilization */
void cpuLoad_Reset()
{
 8001340:	b508      	push	{r3, lr}
	cpuLoadMicrosSum = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <cpuLoad_Reset+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
	cpuLoadMicrosSumPrevious = 0;
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <cpuLoad_Reset+0x28>)
 800134a:	6013      	str	r3, [r2, #0]
	cpuLoadMaxLoopMicros = 0;
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <cpuLoad_Reset+0x2c>)
 800134e:	6013      	str	r3, [r2, #0]
	cpuLoadMinLoopMicros = UINT32_T_MAX;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <cpuLoad_Reset+0x30>)
 8001352:	f04f 32ff 	mov.w	r2, #4294967295
 8001356:	601a      	str	r2, [r3, #0]

	cpuLoadStartMicros = getMircos();
 8001358:	f000 fdde 	bl	8001f18 <getMircos>
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <cpuLoad_Reset+0x34>)
 800135e:	6018      	str	r0, [r3, #0]
}
 8001360:	bd08      	pop	{r3, pc}
 8001362:	bf00      	nop
 8001364:	20004648 	.word	0x20004648
 8001368:	2000464c 	.word	0x2000464c
 800136c:	20004644 	.word	0x20004644
 8001370:	20000104 	.word	0x20000104
 8001374:	20004650 	.word	0x20004650

08001378 <cpuLoad_GetPercentLoad>:

uint8_t cpuLoad_GetPercentLoad()
{
	return cpuPercentLoad;
}
 8001378:	4b01      	ldr	r3, [pc, #4]	; (8001380 <cpuLoad_GetPercentLoad+0x8>)
 800137a:	7818      	ldrb	r0, [r3, #0]
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20004654 	.word	0x20004654

08001384 <cpuLoad_GetMaxLoopTime>:

uint32_t cpuLoad_GetMaxLoopTime()
{
	return cpuLoadMaxLoopMicros;
}
 8001384:	4b01      	ldr	r3, [pc, #4]	; (800138c <cpuLoad_GetMaxLoopTime+0x8>)
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20004644 	.word	0x20004644

08001390 <cpuLoad_GetMinLoopTime>:

uint32_t cpuLoad_GetMinLoopTime()
{
	return cpuLoadMinLoopMicros;
}
 8001390:	4b01      	ldr	r3, [pc, #4]	; (8001398 <cpuLoad_GetMinLoopTime+0x8>)
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000104 	.word	0x20000104

0800139c <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <MX_SDIO_SD_Init+0x20>)
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <MX_SDIO_SD_Init+0x24>)
 80013a0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80013a6:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80013a8:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80013aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ae:	6119      	str	r1, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80013b0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80013b2:	2104      	movs	r1, #4
 80013b4:	6199      	str	r1, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B; // cubeMX issue must default to 1 bit wide bus then init function updates to 4
 80013b6:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20004744 	.word	0x20004744
 80013c0:	40012c00 	.word	0x40012c00

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	2400      	movs	r4, #0
 80013cc:	9405      	str	r4, [sp, #20]
 80013ce:	9406      	str	r4, [sp, #24]
 80013d0:	9407      	str	r4, [sp, #28]
 80013d2:	9408      	str	r4, [sp, #32]
 80013d4:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	9400      	str	r4, [sp, #0]
 80013d8:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <MX_GPIO_Init+0x114>)
 80013da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
 80013e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013e8:	9200      	str	r2, [sp, #0]
 80013ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	9401      	str	r4, [sp, #4]
 80013ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f0:	f042 0201 	orr.w	r2, r2, #1
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
 80013f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f8:	f002 0201 	and.w	r2, r2, #1
 80013fc:	9201      	str	r2, [sp, #4]
 80013fe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001400:	9402      	str	r4, [sp, #8]
 8001402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001404:	f042 0204 	orr.w	r2, r2, #4
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
 800140a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140c:	f002 0204 	and.w	r2, r2, #4
 8001410:	9202      	str	r2, [sp, #8]
 8001412:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	9403      	str	r4, [sp, #12]
 8001416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001418:	f042 0202 	orr.w	r2, r2, #2
 800141c:	631a      	str	r2, [r3, #48]	; 0x30
 800141e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001420:	f002 0202 	and.w	r2, r2, #2
 8001424:	9203      	str	r2, [sp, #12]
 8001426:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001428:	9404      	str	r4, [sp, #16]
 800142a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800142c:	f042 0208 	orr.w	r2, r2, #8
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	9304      	str	r3, [sp, #16]
 800143a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_TEST2_GPIO_Port, PIN_TEST2_Pin, GPIO_PIN_RESET);
 800143c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80014e4 <MX_GPIO_Init+0x120>
 8001440:	4622      	mov	r2, r4
 8001442:	2120      	movs	r1, #32
 8001444:	4640      	mov	r0, r8
 8001446:	f001 fa2a 	bl	800289e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PIN_TEST1_Pin|LED2_Pin|LED_FLT_Pin, GPIO_PIN_RESET);
 800144a:	4f24      	ldr	r7, [pc, #144]	; (80014dc <MX_GPIO_Init+0x118>)
 800144c:	4622      	mov	r2, r4
 800144e:	2119      	movs	r1, #25
 8001450:	4638      	mov	r0, r7
 8001452:	f001 fa24 	bl	800289e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001456:	4d22      	ldr	r5, [pc, #136]	; (80014e0 <MX_GPIO_Init+0x11c>)
 8001458:	4622      	mov	r2, r4
 800145a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145e:	4628      	mov	r0, r5
 8001460:	f001 fa1d 	bl	800289e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BMP_INT1_Pin */
  GPIO_InitStruct.Pin = BMP_INT1_Pin;
 8001464:	2308      	movs	r3, #8
 8001466:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001468:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BMP_INT1_GPIO_Port, &GPIO_InitStruct);
 800146c:	a905      	add	r1, sp, #20
 800146e:	4628      	mov	r0, r5
 8001470:	f001 f91e 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMP_INT2_Pin */
  GPIO_InitStruct.Pin = BMP_INT2_Pin;
 8001474:	2310      	movs	r3, #16
 8001476:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001478:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800147c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BMP_INT2_GPIO_Port, &GPIO_InitStruct);
 8001480:	a905      	add	r1, sp, #20
 8001482:	4640      	mov	r0, r8
 8001484:	f001 f914 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_TEST2_Pin */
  GPIO_InitStruct.Pin = PIN_TEST2_Pin;
 8001488:	2320      	movs	r3, #32
 800148a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2601      	movs	r6, #1
 800148e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(PIN_TEST2_GPIO_Port, &GPIO_InitStruct);
 8001494:	a905      	add	r1, sp, #20
 8001496:	4640      	mov	r0, r8
 8001498:	f001 f90a 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_TEST1_Pin LED2_Pin LED_FLT_Pin */
  GPIO_InitStruct.Pin = PIN_TEST1_Pin|LED2_Pin|LED_FLT_Pin;
 800149c:	2319      	movs	r3, #25
 800149e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	a905      	add	r1, sp, #20
 80014a8:	4638      	mov	r0, r7
 80014aa:	f001 f901 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDDETECT_Pin */
  GPIO_InitStruct.Pin = SDDETECT_Pin;
 80014ae:	2302      	movs	r3, #2
 80014b0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SDDETECT_GPIO_Port, &GPIO_InitStruct);
 80014b6:	a905      	add	r1, sp, #20
 80014b8:	4638      	mov	r0, r7
 80014ba:	f001 f8f9 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 80014be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80014ca:	a905      	add	r1, sp, #20
 80014cc:	4628      	mov	r0, r5
 80014ce:	f001 f8ef 	bl	80026b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d2:	b00a      	add	sp, #40	; 0x28
 80014d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40020800 	.word	0x40020800

080014e8 <MX_DMA_Init>:
{
 80014e8:	b510      	push	{r4, lr}
 80014ea:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014ec:	2400      	movs	r4, #0
 80014ee:	9401      	str	r4, [sp, #4]
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_DMA_Init+0x40>)
 80014f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001504:	4622      	mov	r2, r4
 8001506:	4621      	mov	r1, r4
 8001508:	203b      	movs	r0, #59	; 0x3b
 800150a:	f000 fe55 	bl	80021b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800150e:	203b      	movs	r0, #59	; 0x3b
 8001510:	f000 fe8a 	bl	8002228 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001514:	4622      	mov	r2, r4
 8001516:	4621      	mov	r1, r4
 8001518:	2045      	movs	r0, #69	; 0x45
 800151a:	f000 fe4d 	bl	80021b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800151e:	2045      	movs	r0, #69	; 0x45
 8001520:	f000 fe82 	bl	8002228 <HAL_NVIC_EnableIRQ>
}
 8001524:	b002      	add	sp, #8
 8001526:	bd10      	pop	{r4, pc}
 8001528:	40023800 	.word	0x40023800

0800152c <HAL_TIM_PeriodElapsedCallback>:
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	simNewDataFlag = 1;
 800152c:	4b01      	ldr	r3, [pc, #4]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x8>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
}
 8001532:	4770      	bx	lr
 8001534:	20004a18 	.word	0x20004a18

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
	  HAL_GPIO_WritePin(LED_FLT_GPIO_Port, LED_FLT_Pin, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	2110      	movs	r1, #16
 800153e:	4802      	ldr	r0, [pc, #8]	; (8001548 <Error_Handler+0x10>)
 8001540:	f001 f9ad 	bl	800289e <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001546:	e7fe      	b.n	8001546 <Error_Handler+0xe>
 8001548:	40020400 	.word	0x40020400

0800154c <MX_CAN2_Init>:
{
 800154c:	b508      	push	{r3, lr}
  hcan2.Instance = CAN2;
 800154e:	480b      	ldr	r0, [pc, #44]	; (800157c <MX_CAN2_Init+0x30>)
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_CAN2_Init+0x34>)
 8001552:	6003      	str	r3, [r0, #0]
  hcan2.Init.Prescaler = 16;
 8001554:	2310      	movs	r3, #16
 8001556:	6043      	str	r3, [r0, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001558:	2300      	movs	r3, #0
 800155a:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800155c:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800155e:	6103      	str	r3, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001560:	6143      	str	r3, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001562:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001564:	7643      	strb	r3, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001566:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001568:	76c3      	strb	r3, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800156a:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800156c:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800156e:	f000 fd6b 	bl	8002048 <HAL_CAN_Init>
 8001572:	b900      	cbnz	r0, 8001576 <MX_CAN2_Init+0x2a>
}
 8001574:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001576:	f7ff ffdf 	bl	8001538 <Error_Handler>
 800157a:	bf00      	nop
 800157c:	2000465c 	.word	0x2000465c
 8001580:	40006800 	.word	0x40006800

08001584 <MX_SPI1_Init>:
{
 8001584:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8001586:	480d      	ldr	r0, [pc, #52]	; (80015bc <MX_SPI1_Init+0x38>)
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <MX_SPI1_Init+0x3c>)
 800158a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001590:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001592:	2300      	movs	r3, #0
 8001594:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001596:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001598:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800159a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800159c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a2:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015aa:	230a      	movs	r3, #10
 80015ac:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ae:	f003 fc95 	bl	8004edc <HAL_SPI_Init>
 80015b2:	b900      	cbnz	r0, 80015b6 <MX_SPI1_Init+0x32>
}
 80015b4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015b6:	f7ff ffbf 	bl	8001538 <Error_Handler>
 80015ba:	bf00      	nop
 80015bc:	200047c8 	.word	0x200047c8
 80015c0:	40013000 	.word	0x40013000

080015c4 <MX_TIM3_Init>:
{
 80015c4:	b500      	push	{lr}
 80015c6:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c8:	2300      	movs	r3, #0
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	9303      	str	r3, [sp, #12]
 80015ce:	9304      	str	r3, [sp, #16]
 80015d0:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 80015d6:	4813      	ldr	r0, [pc, #76]	; (8001624 <MX_TIM3_Init+0x60>)
 80015d8:	4a13      	ldr	r2, [pc, #76]	; (8001628 <MX_TIM3_Init+0x64>)
 80015da:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 80015dc:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 80015e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e4:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015ea:	f003 fead 	bl	8005348 <HAL_TIM_Base_Init>
 80015ee:	b990      	cbnz	r0, 8001616 <MX_TIM3_Init+0x52>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015f6:	a902      	add	r1, sp, #8
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <MX_TIM3_Init+0x60>)
 80015fa:	f003 fede 	bl	80053ba <HAL_TIM_ConfigClockSource>
 80015fe:	b960      	cbnz	r0, 800161a <MX_TIM3_Init+0x56>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001604:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001606:	4669      	mov	r1, sp
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <MX_TIM3_Init+0x60>)
 800160a:	f003 ff55 	bl	80054b8 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	b930      	cbnz	r0, 800161e <MX_TIM3_Init+0x5a>
}
 8001610:	b007      	add	sp, #28
 8001612:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001616:	f7ff ff8f 	bl	8001538 <Error_Handler>
    Error_Handler();
 800161a:	f7ff ff8d 	bl	8001538 <Error_Handler>
    Error_Handler();
 800161e:	f7ff ff8b 	bl	8001538 <Error_Handler>
 8001622:	bf00      	nop
 8001624:	20004868 	.word	0x20004868
 8001628:	40000400 	.word	0x40000400

0800162c <MX_TIM7_Init>:
{
 800162c:	b500      	push	{lr}
 800162e:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	2300      	movs	r3, #0
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	9301      	str	r3, [sp, #4]
  htim7.Instance = TIM7;
 8001636:	480d      	ldr	r0, [pc, #52]	; (800166c <MX_TIM7_Init+0x40>)
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <MX_TIM7_Init+0x44>)
 800163a:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 800163c:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 26000;
 8001640:	f246 5290 	movw	r2, #26000	; 0x6590
 8001644:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001648:	f003 fe7e 	bl	8005348 <HAL_TIM_Base_Init>
 800164c:	b950      	cbnz	r0, 8001664 <MX_TIM7_Init+0x38>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001652:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001654:	4669      	mov	r1, sp
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_TIM7_Init+0x40>)
 8001658:	f003 ff2e 	bl	80054b8 <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	b920      	cbnz	r0, 8001668 <MX_TIM7_Init+0x3c>
}
 800165e:	b003      	add	sp, #12
 8001660:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001664:	f7ff ff68 	bl	8001538 <Error_Handler>
    Error_Handler();
 8001668:	f7ff ff66 	bl	8001538 <Error_Handler>
 800166c:	200048f8 	.word	0x200048f8
 8001670:	40001400 	.word	0x40001400

08001674 <MX_TIM6_Init>:
{
 8001674:	b500      	push	{lr}
 8001676:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	2300      	movs	r3, #0
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	9301      	str	r3, [sp, #4]
  htim6.Instance = TIM6;
 800167e:	480e      	ldr	r0, [pc, #56]	; (80016b8 <MX_TIM6_Init+0x44>)
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <MX_TIM6_Init+0x48>)
 8001682:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 83;
 8001684:	2253      	movs	r2, #83	; 0x53
 8001686:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 65535;
 800168a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168e:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001692:	f003 fe59 	bl	8005348 <HAL_TIM_Base_Init>
 8001696:	b950      	cbnz	r0, 80016ae <MX_TIM6_Init+0x3a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800169e:	4669      	mov	r1, sp
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_TIM6_Init+0x44>)
 80016a2:	f003 ff09 	bl	80054b8 <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	b920      	cbnz	r0, 80016b2 <MX_TIM6_Init+0x3e>
}
 80016a8:	b003      	add	sp, #12
 80016aa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80016ae:	f7ff ff43 	bl	8001538 <Error_Handler>
    Error_Handler();
 80016b2:	f7ff ff41 	bl	8001538 <Error_Handler>
 80016b6:	bf00      	nop
 80016b8:	200048b0 	.word	0x200048b0
 80016bc:	40001000 	.word	0x40001000

080016c0 <MX_TIM2_Init>:
{
 80016c0:	b500      	push	{lr}
 80016c2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c4:	2300      	movs	r3, #0
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	9303      	str	r3, [sp, #12]
 80016ca:	9304      	str	r3, [sp, #16]
 80016cc:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 80016d2:	4814      	ldr	r0, [pc, #80]	; (8001724 <MX_TIM2_Init+0x64>)
 80016d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d8:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 84-1;
 80016da:	2253      	movs	r2, #83	; 0x53
 80016dc:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016de:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ea:	f003 fe2d 	bl	8005348 <HAL_TIM_Base_Init>
 80016ee:	b990      	cbnz	r0, 8001716 <MX_TIM2_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016f6:	a902      	add	r1, sp, #8
 80016f8:	480a      	ldr	r0, [pc, #40]	; (8001724 <MX_TIM2_Init+0x64>)
 80016fa:	f003 fe5e 	bl	80053ba <HAL_TIM_ConfigClockSource>
 80016fe:	b960      	cbnz	r0, 800171a <MX_TIM2_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001704:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001706:	4669      	mov	r1, sp
 8001708:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_TIM2_Init+0x64>)
 800170a:	f003 fed5 	bl	80054b8 <HAL_TIMEx_MasterConfigSynchronization>
 800170e:	b930      	cbnz	r0, 800171e <MX_TIM2_Init+0x5e>
}
 8001710:	b007      	add	sp, #28
 8001712:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001716:	f7ff ff0f 	bl	8001538 <Error_Handler>
    Error_Handler();
 800171a:	f7ff ff0d 	bl	8001538 <Error_Handler>
    Error_Handler();
 800171e:	f7ff ff0b 	bl	8001538 <Error_Handler>
 8001722:	bf00      	nop
 8001724:	20004820 	.word	0x20004820

08001728 <SystemClock_Config>:
{
 8001728:	b500      	push	{lr}
 800172a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172c:	2234      	movs	r2, #52	; 0x34
 800172e:	2100      	movs	r1, #0
 8001730:	a807      	add	r0, sp, #28
 8001732:	f009 ff67 	bl	800b604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001736:	2300      	movs	r3, #0
 8001738:	9302      	str	r3, [sp, #8]
 800173a:	9303      	str	r3, [sp, #12]
 800173c:	9304      	str	r3, [sp, #16]
 800173e:	9305      	str	r3, [sp, #20]
 8001740:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <SystemClock_Config+0xa4>)
 8001746:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001748:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800174c:	6411      	str	r1, [r2, #64]	; 0x40
 800174e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001750:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001754:	9200      	str	r2, [sp, #0]
 8001756:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <SystemClock_Config+0xa8>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800176e:	2301      	movs	r3, #1
 8001770:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001776:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001778:	2302      	movs	r3, #2
 800177a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001780:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001782:	2206      	movs	r2, #6
 8001784:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 252;
 8001786:	22fc      	movs	r2, #252	; 0xfc
 8001788:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800178a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800178c:	2207      	movs	r2, #7
 800178e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001790:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001792:	a807      	add	r0, sp, #28
 8001794:	f002 faf0 	bl	8003d78 <HAL_RCC_OscConfig>
 8001798:	b998      	cbnz	r0, 80017c2 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179a:	230f      	movs	r3, #15
 800179c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179e:	2302      	movs	r3, #2
 80017a0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017aa:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b0:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017b2:	2105      	movs	r1, #5
 80017b4:	a802      	add	r0, sp, #8
 80017b6:	f001 ff27 	bl	8003608 <HAL_RCC_ClockConfig>
 80017ba:	b920      	cbnz	r0, 80017c6 <SystemClock_Config+0x9e>
}
 80017bc:	b015      	add	sp, #84	; 0x54
 80017be:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017c2:	f7ff feb9 	bl	8001538 <Error_Handler>
    Error_Handler();
 80017c6:	f7ff feb7 	bl	8001538 <Error_Handler>
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40007000 	.word	0x40007000

080017d4 <main>:
{
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
  HAL_Init();
 80017da:	f000 fbf5 	bl	8001fc8 <HAL_Init>
  SystemClock_Config();
 80017de:	f7ff ffa3 	bl	8001728 <SystemClock_Config>
  MX_GPIO_Init();
 80017e2:	f7ff fdef 	bl	80013c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017e6:	f7ff fe7f 	bl	80014e8 <MX_DMA_Init>
  MX_CAN2_Init();
 80017ea:	f7ff feaf 	bl	800154c <MX_CAN2_Init>
  MX_SDIO_SD_Init();
 80017ee:	f7ff fdd5 	bl	800139c <MX_SDIO_SD_Init>
  MX_USB_DEVICE_Init();
 80017f2:	f009 fc3d 	bl	800b070 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80017f6:	f7ff fec5 	bl	8001584 <MX_SPI1_Init>
  MX_FATFS_Init();
 80017fa:	f005 f869 	bl	80068d0 <MX_FATFS_Init>
  MX_TIM3_Init();
 80017fe:	f7ff fee1 	bl	80015c4 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001802:	f7ff ff13 	bl	800162c <MX_TIM7_Init>
  MX_TIM6_Init();
 8001806:	f7ff ff35 	bl	8001674 <MX_TIM6_Init>
  MX_TIM2_Init();
 800180a:	f7ff ff59 	bl	80016c0 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 800180e:	4892      	ldr	r0, [pc, #584]	; (8001a58 <main+0x284>)
 8001810:	f003 fc30 	bl	8005074 <HAL_TIM_Base_Start_IT>
  microsInit(&microsTimer);
 8001814:	4891      	ldr	r0, [pc, #580]	; (8001a5c <main+0x288>)
 8001816:	f000 fb77 	bl	8001f08 <microsInit>
  cpuLoad_Init(&cpuLoadDelay);
 800181a:	4891      	ldr	r0, [pc, #580]	; (8001a60 <main+0x28c>)
 800181c:	f7ff fd06 	bl	800122c <cpuLoad_Init>
  cpuLoad_Init(&cpuLoadBlackbox);
 8001820:	4890      	ldr	r0, [pc, #576]	; (8001a64 <main+0x290>)
 8001822:	f7ff fd03 	bl	800122c <cpuLoad_Init>
  cpuLoad_Init(&cpuLoadUSB);
 8001826:	4890      	ldr	r0, [pc, #576]	; (8001a68 <main+0x294>)
 8001828:	f7ff fd00 	bl	800122c <cpuLoad_Init>
  cpuLoad_Init(&cpuLoadCLI);
 800182c:	488f      	ldr	r0, [pc, #572]	; (8001a6c <main+0x298>)
 800182e:	f7ff fcfd 	bl	800122c <cpuLoad_Init>
  sdResult = blackbox_Init();
 8001832:	f7fe ff5f 	bl	80006f4 <blackbox_Init>
  if(sdResult == BLACKBOX_OK)
 8001836:	4606      	mov	r6, r0
 8001838:	b118      	cbz	r0, 8001842 <main+0x6e>
  if(sdResult != FR_OK)
 800183a:	b9ce      	cbnz	r6, 8001870 <main+0x9c>
  cpuLoad_Reset();
 800183c:	f7ff fd80 	bl	8001340 <cpuLoad_Reset>
 8001840:	e055      	b.n	80018ee <main+0x11a>
	  sprintf(sdHeader, "Param1\n\rParam2\n\rParam3\n\rParam4\n\rParam5\n\r$$ end of header\n\r");
 8001842:	466c      	mov	r4, sp
 8001844:	4d8a      	ldr	r5, [pc, #552]	; (8001a70 <main+0x29c>)
 8001846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800184c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001852:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001856:	c403      	stmia	r4!, {r0, r1}
 8001858:	f824 2b02 	strh.w	r2, [r4], #2
 800185c:	0c12      	lsrs	r2, r2, #16
 800185e:	7022      	strb	r2, [r4, #0]
	  blackbox_SetHeader(sdHeader, strlen(sdHeader));
 8001860:	4668      	mov	r0, sp
 8001862:	f7fe fcd5 	bl	8000210 <strlen>
 8001866:	b281      	uxth	r1, r0
 8001868:	4668      	mov	r0, sp
 800186a:	f7fe ff7b 	bl	8000764 <blackbox_SetHeader>
 800186e:	e7e4      	b.n	800183a <main+0x66>
	  uint32_t sdErrorStartMillis = HAL_GetTick();
 8001870:	f000 fbd0 	bl	8002014 <HAL_GetTick>
 8001874:	4604      	mov	r4, r0
	  uint32_t sdErrorBlinkTime = sdErrorStartMillis;
 8001876:	4605      	mov	r5, r0
	  while(HAL_GetTick() - sdErrorStartMillis < 5000)
 8001878:	f000 fbcc 	bl	8002014 <HAL_GetTick>
 800187c:	1b00      	subs	r0, r0, r4
 800187e:	f241 3387 	movw	r3, #4999	; 0x1387
 8001882:	4298      	cmp	r0, r3
 8001884:	d8da      	bhi.n	800183c <main+0x68>
		  if(HAL_GetTick() - sdErrorBlinkTime > 50)
 8001886:	f000 fbc5 	bl	8002014 <HAL_GetTick>
 800188a:	1b40      	subs	r0, r0, r5
 800188c:	2832      	cmp	r0, #50	; 0x32
 800188e:	d9f3      	bls.n	8001878 <main+0xa4>
			  sdErrorBlinkTime = HAL_GetTick();
 8001890:	f000 fbc0 	bl	8002014 <HAL_GetTick>
 8001894:	4605      	mov	r5, r0
			  HAL_GPIO_TogglePin(LED_FLT_GPIO_Port, LED_FLT_Pin);
 8001896:	2110      	movs	r1, #16
 8001898:	4876      	ldr	r0, [pc, #472]	; (8001a74 <main+0x2a0>)
 800189a:	f001 f806 	bl	80028aa <HAL_GPIO_TogglePin>
 800189e:	e7eb      	b.n	8001878 <main+0xa4>
		  lastMillis = HAL_GetTick();
 80018a0:	f000 fbb8 	bl	8002014 <HAL_GetTick>
 80018a4:	4b74      	ldr	r3, [pc, #464]	; (8001a78 <main+0x2a4>)
 80018a6:	6018      	str	r0, [r3, #0]
		  if(!stopBlink) HAL_GPIO_TogglePin(LED_FLT_GPIO_Port, LED_FLT_Pin);
 80018a8:	4b74      	ldr	r3, [pc, #464]	; (8001a7c <main+0x2a8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	bb33      	cbnz	r3, 80018fc <main+0x128>
 80018ae:	2110      	movs	r1, #16
 80018b0:	4870      	ldr	r0, [pc, #448]	; (8001a74 <main+0x2a0>)
 80018b2:	f000 fffa 	bl	80028aa <HAL_GPIO_TogglePin>
 80018b6:	e021      	b.n	80018fc <main+0x128>
	  blackbox_ProcessData(); // If new dataPending / send to DMA takes 55uS otherwise <1uS
 80018b8:	f7ff f97a 	bl	8000bb0 <blackbox_ProcessData>
	  cpuLoad_End(&cpuLoadBlackbox);
 80018bc:	4869      	ldr	r0, [pc, #420]	; (8001a64 <main+0x290>)
 80018be:	f7ff fcc7 	bl	8001250 <cpuLoad_End>
	  cpuLoad_Start(&cpuLoadDelay);
 80018c2:	4c67      	ldr	r4, [pc, #412]	; (8001a60 <main+0x28c>)
 80018c4:	4620      	mov	r0, r4
 80018c6:	f7ff fcbd 	bl	8001244 <cpuLoad_Start>
	  cpuLoad_End(&cpuLoadDelay);
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff fcc0 	bl	8001250 <cpuLoad_End>
	  cpuLoad_Start(&cpuLoadCLI);
 80018d0:	4866      	ldr	r0, [pc, #408]	; (8001a6c <main+0x298>)
 80018d2:	f7ff fcb7 	bl	8001244 <cpuLoad_Start>
	  if(vcp_getRxCount()){printCLI();}
 80018d6:	f7fe fec7 	bl	8000668 <vcp_getRxCount>
 80018da:	b108      	cbz	r0, 80018e0 <main+0x10c>
 80018dc:	f7ff fa24 	bl	8000d28 <printCLI>
	  cpuLoad_End(&cpuLoadCLI);
 80018e0:	4862      	ldr	r0, [pc, #392]	; (8001a6c <main+0x298>)
 80018e2:	f7ff fcb5 	bl	8001250 <cpuLoad_End>
	  streamData();
 80018e6:	f7ff fc71 	bl	80011cc <streamData>
	  cpuLoad_Process();
 80018ea:	f7ff fcdf 	bl	80012ac <cpuLoad_Process>
	  if(HAL_GetTick() - lastMillis >= 200){
 80018ee:	f000 fb91 	bl	8002014 <HAL_GetTick>
 80018f2:	4b61      	ldr	r3, [pc, #388]	; (8001a78 <main+0x2a4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	1ac0      	subs	r0, r0, r3
 80018f8:	28c7      	cmp	r0, #199	; 0xc7
 80018fa:	d8d1      	bhi.n	80018a0 <main+0xcc>
	  cpuLoad_Start(&cpuLoadBlackbox);
 80018fc:	4859      	ldr	r0, [pc, #356]	; (8001a64 <main+0x290>)
 80018fe:	f7ff fca1 	bl	8001244 <cpuLoad_Start>
	  if(streamSDIO)
 8001902:	4b5f      	ldr	r3, [pc, #380]	; (8001a80 <main+0x2ac>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0d6      	beq.n	80018b8 <main+0xe4>
		  if(simNewDataFlag)
 800190a:	4b5e      	ldr	r3, [pc, #376]	; (8001a84 <main+0x2b0>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0d2      	beq.n	80018b8 <main+0xe4>
			  simNewDataFlag = 0;
 8001912:	2400      	movs	r4, #0
 8001914:	4b5b      	ldr	r3, [pc, #364]	; (8001a84 <main+0x2b0>)
 8001916:	701c      	strb	r4, [r3, #0]
HAL_GPIO_WritePin(PIN_TEST1_GPIO_Port, PIN_TEST1_Pin, GPIO_PIN_SET);
 8001918:	4d56      	ldr	r5, [pc, #344]	; (8001a74 <main+0x2a0>)
 800191a:	2201      	movs	r2, #1
 800191c:	4611      	mov	r1, r2
 800191e:	4628      	mov	r0, r5
 8001920:	f000 ffbd 	bl	800289e <HAL_GPIO_WritePin>
			  uint8_t sdBuff[512] = {'\0'};
 8001924:	9400      	str	r4, [sp, #0]
 8001926:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800192a:	4621      	mov	r1, r4
 800192c:	a801      	add	r0, sp, #4
 800192e:	f009 fe69 	bl	800b604 <memset>
			  uint32_t microsNow = getMircos();
 8001932:	f000 faf1 	bl	8001f18 <getMircos>
 8001936:	4603      	mov	r3, r0
			  blackboxFrame[frameIndex++] = 'S';
 8001938:	4853      	ldr	r0, [pc, #332]	; (8001a88 <main+0x2b4>)
 800193a:	2253      	movs	r2, #83	; 0x53
 800193c:	7002      	strb	r2, [r0, #0]
			  blackboxFrame[frameIndex++] = 'O';
 800193e:	224f      	movs	r2, #79	; 0x4f
 8001940:	7042      	strb	r2, [r0, #1]
			  blackboxFrame[frameIndex++] = 'F';
 8001942:	2246      	movs	r2, #70	; 0x46
 8001944:	7082      	strb	r2, [r0, #2]
			  blackboxFrame[frameIndex++] = (microsNow >> 24) & 0xFF;
 8001946:	0e1a      	lsrs	r2, r3, #24
 8001948:	70c2      	strb	r2, [r0, #3]
			  blackboxFrame[frameIndex++] = (microsNow >> 16) & 0xFF;
 800194a:	0c1a      	lsrs	r2, r3, #16
 800194c:	7102      	strb	r2, [r0, #4]
			  blackboxFrame[frameIndex++] = (microsNow >> 8) & 0xFF;
 800194e:	0a1a      	lsrs	r2, r3, #8
 8001950:	7142      	strb	r2, [r0, #5]
			  blackboxFrame[frameIndex++] = microsNow & 0xFF;
 8001952:	7183      	strb	r3, [r0, #6]
			  blackboxFrame[frameIndex++] = (((int16_t)(gyroPitchRaw*10.0f)) >> 8) & 0xFF;
 8001954:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <main+0x2b8>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800195e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001966:	ee17 3a90 	vmov	r3, s15
 800196a:	f343 2207 	sbfx	r2, r3, #8, #8
 800196e:	71c2      	strb	r2, [r0, #7]
			  blackboxFrame[frameIndex++] = ((int16_t)(gyroPitchRaw*10.0f)) & 0xFF;
 8001970:	7203      	strb	r3, [r0, #8]
			  blackboxFrame[frameIndex++] = (((int16_t)(gyroPitchFilt*10.0f)) >> 8) & 0xFF;
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <main+0x2bc>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001980:	ee17 3a90 	vmov	r3, s15
 8001984:	f343 2207 	sbfx	r2, r3, #8, #8
 8001988:	7242      	strb	r2, [r0, #9]
			  blackboxFrame[frameIndex++] = ((int16_t)(gyroPitchFilt*10.0f)) & 0xFF;
 800198a:	7283      	strb	r3, [r0, #10]
			  blackboxFrame[frameIndex++] = (((int16_t)(gyroRollRaw*10.0f)) >> 8) & 0xFF;
 800198c:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <main+0x2c0>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199a:	ee17 3a90 	vmov	r3, s15
 800199e:	f343 2207 	sbfx	r2, r3, #8, #8
 80019a2:	72c2      	strb	r2, [r0, #11]
			  blackboxFrame[frameIndex++] = ((int16_t)(gyroRollRaw*10.0f)) & 0xFF;
 80019a4:	7303      	strb	r3, [r0, #12]
			  blackboxFrame[frameIndex++] = (((int16_t)(gyroRollFilt*10.0f)) >> 8) & 0xFF;
 80019a6:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <main+0x2c4>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b4:	ee17 3a90 	vmov	r3, s15
 80019b8:	f343 2207 	sbfx	r2, r3, #8, #8
 80019bc:	7342      	strb	r2, [r0, #13]
			  blackboxFrame[frameIndex++] = ((int16_t)(gyroRollFilt*10.0f)) & 0xFF;
 80019be:	7383      	strb	r3, [r0, #14]
			  blackboxFrame[frameIndex++] = (((int16_t)(gyroYawRaw*10.0f)) >> 8) & 0xFF;
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <main+0x2c8>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ce:	ee17 3a90 	vmov	r3, s15
 80019d2:	f343 2207 	sbfx	r2, r3, #8, #8
 80019d6:	73c2      	strb	r2, [r0, #15]
			  blackboxFrame[frameIndex++] = ((int16_t)(gyroYawRaw*10.0f)) & 0xFF;
 80019d8:	7403      	strb	r3, [r0, #16]
			  blackboxFrame[frameIndex++] = (((int16_t)(gyroYawFilt*10.0f)) >> 8) & 0xFF;
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <main+0x2cc>)
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e8:	ee17 3a90 	vmov	r3, s15
 80019ec:	f343 2207 	sbfx	r2, r3, #8, #8
 80019f0:	7442      	strb	r2, [r0, #17]
			  blackboxFrame[frameIndex++] = ((int16_t)(gyroYawFilt*10.0f)) & 0xFF;
 80019f2:	7483      	strb	r3, [r0, #18]
			  blackboxFrame[frameIndex++] = (((int16_t)(pitchP*1000.0f)) >> 8) & 0xFF;
 80019f4:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <main+0x2d0>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001aa8 <main+0x2d4>
 80019fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a06:	ee17 3a90 	vmov	r3, s15
 8001a0a:	f343 2207 	sbfx	r2, r3, #8, #8
 8001a0e:	74c2      	strb	r2, [r0, #19]
			  blackboxFrame[frameIndex++] = ((int16_t)(pitchP*1000.0f)) & 0xFF;
 8001a10:	7503      	strb	r3, [r0, #20]
			  blackboxFrame[frameIndex++] = (((int16_t)(pitchI*1000.0f)) >> 8) & 0xFF;
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <main+0x2d8>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a20:	ee17 3a90 	vmov	r3, s15
 8001a24:	f343 2207 	sbfx	r2, r3, #8, #8
 8001a28:	7542      	strb	r2, [r0, #21]
			  blackboxFrame[frameIndex++] = ((int16_t)(pitchI*1000.0f)) & 0xFF;
 8001a2a:	7583      	strb	r3, [r0, #22]
			  blackboxFrame[frameIndex++] = (((int16_t)(pitchD*1000.0f)) >> 8) & 0xFF;
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <main+0x2dc>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3a:	ee17 3a90 	vmov	r3, s15
 8001a3e:	f343 2207 	sbfx	r2, r3, #8, #8
 8001a42:	75c2      	strb	r2, [r0, #23]
			  blackboxFrame[frameIndex++] = ((int16_t)(pitchD*1000.0f)) & 0xFF;
 8001a44:	7603      	strb	r3, [r0, #24]
			  blackbox_BufferData(blackboxFrame, (frameIndex));
 8001a46:	2119      	movs	r1, #25
 8001a48:	f7fe fea0 	bl	800078c <blackbox_BufferData>
HAL_GPIO_WritePin(PIN_TEST1_GPIO_Port, PIN_TEST1_Pin, GPIO_PIN_RESET);
 8001a4c:	4622      	mov	r2, r4
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4628      	mov	r0, r5
 8001a52:	f000 ff24 	bl	800289e <HAL_GPIO_WritePin>
 8001a56:	e72f      	b.n	80018b8 <main+0xe4>
 8001a58:	200048f8 	.word	0x200048f8
 8001a5c:	20004820 	.word	0x20004820
 8001a60:	200049c8 	.word	0x200049c8
 8001a64:	20004980 	.word	0x20004980
 8001a68:	200049ec 	.word	0x200049ec
 8001a6c:	200049a4 	.word	0x200049a4
 8001a70:	0800c2ac 	.word	0x0800c2ac
 8001a74:	40020400 	.word	0x40020400
 8001a78:	20004a14 	.word	0x20004a14
 8001a7c:	20004a1c 	.word	0x20004a1c
 8001a80:	20004a20 	.word	0x20004a20
 8001a84:	20004a18 	.word	0x20004a18
 8001a88:	20004940 	.word	0x20004940
 8001a8c:	20000110 	.word	0x20000110
 8001a90:	2000010c 	.word	0x2000010c
 8001a94:	20000118 	.word	0x20000118
 8001a98:	20000114 	.word	0x20000114
 8001a9c:	20000120 	.word	0x20000120
 8001aa0:	2000011c 	.word	0x2000011c
 8001aa4:	20000130 	.word	0x20000130
 8001aa8:	447a0000 	.word	0x447a0000
 8001aac:	2000012c 	.word	0x2000012c
 8001ab0:	20000128 	.word	0x20000128

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	9100      	str	r1, [sp, #0]
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_MspInit+0x34>)
 8001abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ac6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001aca:	9200      	str	r2, [sp, #0]
 8001acc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	9101      	str	r1, [sp, #4]
 8001ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	b002      	add	sp, #8
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800

08001aec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001aec:	b500      	push	{lr}
 8001aee:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	2300      	movs	r3, #0
 8001af2:	9303      	str	r3, [sp, #12]
 8001af4:	9304      	str	r3, [sp, #16]
 8001af6:	9305      	str	r3, [sp, #20]
 8001af8:	9306      	str	r3, [sp, #24]
 8001afa:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN2)
 8001afc:	6802      	ldr	r2, [r0, #0]
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_CAN_MspInit+0x7c>)
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d002      	beq.n	8001b0a <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001b04:	b009      	add	sp, #36	; 0x24
 8001b06:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	f503 33e8 	add.w	r3, r3, #118784	; 0x1d000
 8001b12:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b14:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001b18:	6419      	str	r1, [r3, #64]	; 0x40
 8001b1a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b1c:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8001b20:	9100      	str	r1, [sp, #0]
 8001b22:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b24:	9201      	str	r2, [sp, #4]
 8001b26:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b28:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001b2c:	6419      	str	r1, [r3, #64]	; 0x40
 8001b2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b30:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
 8001b34:	9101      	str	r1, [sp, #4]
 8001b36:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b38:	9202      	str	r2, [sp, #8]
 8001b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b3c:	f042 0202 	orr.w	r2, r2, #2
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b4c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001b5a:	2309      	movs	r3, #9
 8001b5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5e:	a903      	add	r1, sp, #12
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <HAL_CAN_MspInit+0x80>)
 8001b62:	f000 fda5 	bl	80026b0 <HAL_GPIO_Init>
}
 8001b66:	e7cd      	b.n	8001b04 <HAL_CAN_MspInit+0x18>
 8001b68:	40006800 	.word	0x40006800
 8001b6c:	40020400 	.word	0x40020400

08001b70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b74:	b0a1      	sub	sp, #132	; 0x84
 8001b76:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	2100      	movs	r1, #0
 8001b7a:	911b      	str	r1, [sp, #108]	; 0x6c
 8001b7c:	911c      	str	r1, [sp, #112]	; 0x70
 8001b7e:	911d      	str	r1, [sp, #116]	; 0x74
 8001b80:	911e      	str	r1, [sp, #120]	; 0x78
 8001b82:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b84:	225c      	movs	r2, #92	; 0x5c
 8001b86:	a804      	add	r0, sp, #16
 8001b88:	f009 fd3c 	bl	800b604 <memset>
  if(hsd->Instance==SDIO)
 8001b8c:	6822      	ldr	r2, [r4, #0]
 8001b8e:	4b5f      	ldr	r3, [pc, #380]	; (8001d0c <HAL_SD_MspInit+0x19c>)
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d002      	beq.n	8001b9a <HAL_SD_MspInit+0x2a>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001b94:	b021      	add	sp, #132	; 0x84
 8001b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001b9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b9e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba0:	a804      	add	r0, sp, #16
 8001ba2:	f001 fde7 	bl	8003774 <HAL_RCCEx_PeriphCLKConfig>
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	f040 80a6 	bne.w	8001cf8 <HAL_SD_MspInit+0x188>
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001bac:	2500      	movs	r5, #0
 8001bae:	9501      	str	r5, [sp, #4]
 8001bb0:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <HAL_SD_MspInit+0x1a0>)
 8001bb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
 8001bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bbc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bc0:	9201      	str	r2, [sp, #4]
 8001bc2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc4:	9502      	str	r5, [sp, #8]
 8001bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc8:	f042 0204 	orr.w	r2, r2, #4
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
 8001bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd0:	f002 0204 	and.w	r2, r2, #4
 8001bd4:	9202      	str	r2, [sp, #8]
 8001bd6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd8:	9503      	str	r5, [sp, #12]
 8001bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bdc:	f042 0208 	orr.w	r2, r2, #8
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	9303      	str	r3, [sp, #12]
 8001bea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001bec:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001bf0:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	f04f 0802 	mov.w	r8, #2
 8001bf6:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfa:	f04f 0b01 	mov.w	fp, #1
 8001bfe:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2603      	movs	r6, #3
 8001c04:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c06:	270c      	movs	r7, #12
 8001c08:	971f      	str	r7, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0a:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8001d28 <HAL_SD_MspInit+0x1b8>
 8001c0e:	a91b      	add	r1, sp, #108	; 0x6c
 8001c10:	4648      	mov	r0, r9
 8001c12:	f000 fd4d 	bl	80026b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c16:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 8001c1a:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c26:	971f      	str	r7, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c28:	a91b      	add	r1, sp, #108	; 0x6c
 8001c2a:	4648      	mov	r0, r9
 8001c2c:	f000 fd40 	bl	80026b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c30:	f04f 0904 	mov.w	r9, #4
 8001c34:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3c:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c42:	971f      	str	r7, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c44:	a91b      	add	r1, sp, #108	; 0x6c
 8001c46:	4833      	ldr	r0, [pc, #204]	; (8001d14 <HAL_SD_MspInit+0x1a4>)
 8001c48:	f000 fd32 	bl	80026b0 <HAL_GPIO_Init>
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8001c4c:	4832      	ldr	r0, [pc, #200]	; (8001d18 <HAL_SD_MspInit+0x1a8>)
 8001c4e:	4b33      	ldr	r3, [pc, #204]	; (8001d1c <HAL_SD_MspInit+0x1ac>)
 8001c50:	6003      	str	r3, [r0, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001c52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c56:	6043      	str	r3, [r0, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c58:	2340      	movs	r3, #64	; 0x40
 8001c5a:	6083      	str	r3, [r0, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5c:	60c5      	str	r5, [r0, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c62:	6103      	str	r3, [r0, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c64:	f8c0 a014 	str.w	sl, [r0, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c6c:	6183      	str	r3, [r0, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	61c3      	str	r3, [r0, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c72:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001c76:	6203      	str	r3, [r0, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c78:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c7c:	6286      	str	r6, [r0, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001c7e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001c82:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c88:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001c8a:	f000 fb6f 	bl	800236c <HAL_DMA_Init>
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d135      	bne.n	8001cfe <HAL_SD_MspInit+0x18e>
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <HAL_SD_MspInit+0x1a8>)
 8001c94:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001c96:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8001c98:	4821      	ldr	r0, [pc, #132]	; (8001d20 <HAL_SD_MspInit+0x1b0>)
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <HAL_SD_MspInit+0x1b4>)
 8001c9c:	6003      	str	r3, [r0, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001c9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ca2:	6043      	str	r3, [r0, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	6083      	str	r3, [r0, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca8:	60c3      	str	r3, [r0, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cae:	6103      	str	r3, [r0, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb4:	6143      	str	r3, [r0, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cba:	6183      	str	r3, [r0, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	61c3      	str	r3, [r0, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cc0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001cc4:	6203      	str	r3, [r0, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001cce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001cd2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001cd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cd8:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001cda:	f000 fb47 	bl	800236c <HAL_DMA_Init>
 8001cde:	b988      	cbnz	r0, 8001d04 <HAL_SD_MspInit+0x194>
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_SD_MspInit+0x1b0>)
 8001ce2:	6423      	str	r3, [r4, #64]	; 0x40
 8001ce4:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4611      	mov	r1, r2
 8001cea:	2031      	movs	r0, #49	; 0x31
 8001cec:	f000 fa64 	bl	80021b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001cf0:	2031      	movs	r0, #49	; 0x31
 8001cf2:	f000 fa99 	bl	8002228 <HAL_NVIC_EnableIRQ>
}
 8001cf6:	e74d      	b.n	8001b94 <HAL_SD_MspInit+0x24>
      Error_Handler();
 8001cf8:	f7ff fc1e 	bl	8001538 <Error_Handler>
 8001cfc:	e756      	b.n	8001bac <HAL_SD_MspInit+0x3c>
      Error_Handler();
 8001cfe:	f7ff fc1b 	bl	8001538 <Error_Handler>
 8001d02:	e7c6      	b.n	8001c92 <HAL_SD_MspInit+0x122>
      Error_Handler();
 8001d04:	f7ff fc18 	bl	8001538 <Error_Handler>
 8001d08:	e7ea      	b.n	8001ce0 <HAL_SD_MspInit+0x170>
 8001d0a:	bf00      	nop
 8001d0c:	40012c00 	.word	0x40012c00
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020c00 	.word	0x40020c00
 8001d18:	200046e4 	.word	0x200046e4
 8001d1c:	40026458 	.word	0x40026458
 8001d20:	20004684 	.word	0x20004684
 8001d24:	400264a0 	.word	0x400264a0
 8001d28:	40020800 	.word	0x40020800

08001d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d2c:	b500      	push	{lr}
 8001d2e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	2300      	movs	r3, #0
 8001d32:	9303      	str	r3, [sp, #12]
 8001d34:	9304      	str	r3, [sp, #16]
 8001d36:	9305      	str	r3, [sp, #20]
 8001d38:	9306      	str	r3, [sp, #24]
 8001d3a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001d3c:	6802      	ldr	r2, [r0, #0]
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_SPI_MspInit+0x68>)
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d002      	beq.n	8001d4a <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d44:	b009      	add	sp, #36	; 0x24
 8001d46:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	9101      	str	r1, [sp, #4]
 8001d4e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d58:	645a      	str	r2, [r3, #68]	; 0x44
 8001d5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d60:	9201      	str	r2, [sp, #4]
 8001d62:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d64:	9102      	str	r1, [sp, #8]
 8001d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	9302      	str	r3, [sp, #8]
 8001d76:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d78:	23e0      	movs	r3, #224	; 0xe0
 8001d7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d84:	2305      	movs	r3, #5
 8001d86:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	a903      	add	r1, sp, #12
 8001d8a:	4803      	ldr	r0, [pc, #12]	; (8001d98 <HAL_SPI_MspInit+0x6c>)
 8001d8c:	f000 fc90 	bl	80026b0 <HAL_GPIO_Init>
}
 8001d90:	e7d8      	b.n	8001d44 <HAL_SPI_MspInit+0x18>
 8001d92:	bf00      	nop
 8001d94:	40013000 	.word	0x40013000
 8001d98:	40020000 	.word	0x40020000

08001d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d9c:	b500      	push	{lr}
 8001d9e:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 8001da0:	6803      	ldr	r3, [r0, #0]
 8001da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da6:	d01c      	beq.n	8001de2 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001da8:	4a22      	ldr	r2, [pc, #136]	; (8001e34 <HAL_TIM_Base_MspInit+0x98>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d028      	beq.n	8001e00 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8001dae:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <HAL_TIM_Base_MspInit+0x9c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d032      	beq.n	8001e1a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8001db4:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <HAL_TIM_Base_MspInit+0xa0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d11f      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001dba:	2200      	movs	r2, #0
 8001dbc:	9203      	str	r2, [sp, #12]
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_TIM_Base_MspInit+0xa4>)
 8001dc0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001dc2:	f041 0120 	orr.w	r1, r1, #32
 8001dc6:	6419      	str	r1, [r3, #64]	; 0x40
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	9303      	str	r3, [sp, #12]
 8001dd0:	9b03      	ldr	r3, [sp, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	2037      	movs	r0, #55	; 0x37
 8001dd6:	f000 f9ef 	bl	80021b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001dda:	2037      	movs	r0, #55	; 0x37
 8001ddc:	f000 fa24 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001de0:	e00b      	b.n	8001dfa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_TIM_Base_MspInit+0xa4>)
 8001de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	9b00      	ldr	r3, [sp, #0]
}
 8001dfa:	b005      	add	sp, #20
 8001dfc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_TIM_Base_MspInit+0xa4>)
 8001e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e08:	f042 0202 	orr.w	r2, r2, #2
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	9b01      	ldr	r3, [sp, #4]
 8001e18:	e7ef      	b.n	8001dfa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_TIM_Base_MspInit+0xa4>)
 8001e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e22:	f042 0210 	orr.w	r2, r2, #16
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	9b02      	ldr	r3, [sp, #8]
 8001e32:	e7e2      	b.n	8001dfa <HAL_TIM_Base_MspInit+0x5e>
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40001000 	.word	0x40001000
 8001e3c:	40001400 	.word	0x40001400
 8001e40:	40023800 	.word	0x40023800

08001e44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <NMI_Handler>

08001e46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler>

08001e48 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <MemManage_Handler>

08001e4a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler>

08001e4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler>

08001e4e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e50:	4770      	bx	lr

08001e52 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e56:	f000 f8d1 	bl	8001ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5a:	bd08      	pop	{r3, pc}

08001e5c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001e5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001e5e:	4802      	ldr	r0, [pc, #8]	; (8001e68 <SDIO_IRQHandler+0xc>)
 8001e60:	f002 ff58 	bl	8004d14 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001e64:	bd08      	pop	{r3, pc}
 8001e66:	bf00      	nop
 8001e68:	20004744 	.word	0x20004744

08001e6c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e6e:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM7_IRQHandler+0xc>)
 8001e70:	f003 f948 	bl	8005104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e74:	bd08      	pop	{r3, pc}
 8001e76:	bf00      	nop
 8001e78:	200048f8 	.word	0x200048f8

08001e7c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001e7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001e7e:	4802      	ldr	r0, [pc, #8]	; (8001e88 <DMA2_Stream3_IRQHandler+0xc>)
 8001e80:	f000 fb22 	bl	80024c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001e84:	bd08      	pop	{r3, pc}
 8001e86:	bf00      	nop
 8001e88:	200046e4 	.word	0x200046e4

08001e8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e8e:	4802      	ldr	r0, [pc, #8]	; (8001e98 <OTG_FS_IRQHandler+0xc>)
 8001e90:	f001 f878 	bl	8002f84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e94:	bd08      	pop	{r3, pc}
 8001e96:	bf00      	nop
 8001e98:	200063a8 	.word	0x200063a8

08001e9c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001e9e:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <DMA2_Stream6_IRQHandler+0xc>)
 8001ea0:	f000 fb12 	bl	80024c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001ea4:	bd08      	pop	{r3, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20004684 	.word	0x20004684

08001eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eac:	b510      	push	{r4, lr}
 8001eae:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <_sbrk+0x38>)
 8001eb2:	490d      	ldr	r1, [pc, #52]	; (8001ee8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <_sbrk+0x40>)
 8001eb6:	6800      	ldr	r0, [r0, #0]
 8001eb8:	b140      	cbz	r0, 8001ecc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eba:	480c      	ldr	r0, [pc, #48]	; (8001eec <_sbrk+0x40>)
 8001ebc:	6800      	ldr	r0, [r0, #0]
 8001ebe:	4403      	add	r3, r0
 8001ec0:	1a52      	subs	r2, r2, r1
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d806      	bhi.n	8001ed4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <_sbrk+0x40>)
 8001ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001eca:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <_sbrk+0x40>)
 8001ece:	4c08      	ldr	r4, [pc, #32]	; (8001ef0 <_sbrk+0x44>)
 8001ed0:	6004      	str	r4, [r0, #0]
 8001ed2:	e7f2      	b.n	8001eba <_sbrk+0xe>
    errno = ENOMEM;
 8001ed4:	f009 fb9e 	bl	800b614 <__errno>
 8001ed8:	230c      	movs	r3, #12
 8001eda:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	e7f3      	b.n	8001eca <_sbrk+0x1e>
 8001ee2:	bf00      	nop
 8001ee4:	20020000 	.word	0x20020000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	20004a24 	.word	0x20004a24
 8001ef0:	20006c20 	.word	0x20006c20

08001ef4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef4:	4a03      	ldr	r2, [pc, #12]	; (8001f04 <SystemInit+0x10>)
 8001ef6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001efa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001efe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <microsInit>:

TIM_HandleTypeDef 	*microsTimer;


void microsInit(TIM_HandleTypeDef *_microsTimer)
{
 8001f08:	b508      	push	{r3, lr}
	microsTimer = _microsTimer;
 8001f0a:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <microsInit+0xc>)
 8001f0c:	6018      	str	r0, [r3, #0]
	HAL_TIM_Base_Start(microsTimer);
 8001f0e:	f003 f873 	bl	8004ff8 <HAL_TIM_Base_Start>
}
 8001f12:	bd08      	pop	{r3, pc}
 8001f14:	20004a28 	.word	0x20004a28

08001f18 <getMircos>:

uint32_t getMircos()
{
	return microsTimer->Instance->CNT;
 8001f18:	4b02      	ldr	r3, [pc, #8]	; (8001f24 <getMircos+0xc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a58      	ldr	r0, [r3, #36]	; 0x24

}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20004a28 	.word	0x20004a28

08001f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f2e:	490e      	ldr	r1, [pc, #56]	; (8001f68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f30:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f44:	4c0b      	ldr	r4, [pc, #44]	; (8001f74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f52:	f7ff ffcf 	bl	8001ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f56:	f009 fb63 	bl	800b620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f5a:	f7ff fc3b 	bl	80017d4 <main>
  bx  lr    
 8001f5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f68:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8001f6c:	0800c800 	.word	0x0800c800
  ldr r2, =_sbss
 8001f70:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8001f74:	20006c1c 	.word	0x20006c1c

08001f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f78:	e7fe      	b.n	8001f78 <ADC_IRQHandler>
	...

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b510      	push	{r4, lr}
 8001f7e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_InitTick+0x40>)
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f8c:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <HAL_InitTick+0x44>)
 8001f8e:	6810      	ldr	r0, [r2, #0]
 8001f90:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f94:	f000 f956 	bl	8002244 <HAL_SYSTICK_Config>
 8001f98:	b968      	cbnz	r0, 8001fb6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	2c0f      	cmp	r4, #15
 8001f9c:	d901      	bls.n	8001fa2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	e00a      	b.n	8001fb8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8001faa:	f000 f905 	bl	80021b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_InitTick+0x48>)
 8001fb0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001fb6:	2001      	movs	r0, #1
}
 8001fb8:	bd10      	pop	{r4, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000138 	.word	0x20000138
 8001fc0:	20000134 	.word	0x20000134
 8001fc4:	2000013c 	.word	0x2000013c

08001fc8 <HAL_Init>:
{
 8001fc8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_Init+0x30>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fda:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f000 f8d5 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fea:	200f      	movs	r0, #15
 8001fec:	f7ff ffc6 	bl	8001f7c <HAL_InitTick>
  HAL_MspInit();
 8001ff0:	f7ff fd60 	bl	8001ab4 <HAL_MspInit>
}
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	bd08      	pop	{r3, pc}
 8001ff8:	40023c00 	.word	0x40023c00

08001ffc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ffc:	4a03      	ldr	r2, [pc, #12]	; (800200c <HAL_IncTick+0x10>)
 8001ffe:	6811      	ldr	r1, [r2, #0]
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_IncTick+0x14>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	440b      	add	r3, r1
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20004a2c 	.word	0x20004a2c
 8002010:	20000138 	.word	0x20000138

08002014 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002014:	4b01      	ldr	r3, [pc, #4]	; (800201c <HAL_GetTick+0x8>)
 8002016:	6818      	ldr	r0, [r3, #0]
}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20004a2c 	.word	0x20004a2c

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b538      	push	{r3, r4, r5, lr}
 8002022:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff fff6 	bl	8002014 <HAL_GetTick>
 8002028:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800202e:	d002      	beq.n	8002036 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <HAL_Delay+0x24>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002036:	f7ff ffed 	bl	8002014 <HAL_GetTick>
 800203a:	1b40      	subs	r0, r0, r5
 800203c:	42a0      	cmp	r0, r4
 800203e:	d3fa      	bcc.n	8002036 <HAL_Delay+0x16>
  {
  }
}
 8002040:	bd38      	pop	{r3, r4, r5, pc}
 8002042:	bf00      	nop
 8002044:	20000138 	.word	0x20000138

08002048 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002048:	2800      	cmp	r0, #0
 800204a:	f000 80a1 	beq.w	8002190 <HAL_CAN_Init+0x148>
{
 800204e:	b538      	push	{r3, r4, r5, lr}
 8002050:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002052:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002056:	b1d3      	cbz	r3, 800208e <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002058:	6822      	ldr	r2, [r4, #0]
 800205a:	6813      	ldr	r3, [r2, #0]
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002062:	f7ff ffd7 	bl	8002014 <HAL_GetTick>
 8002066:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	f012 0f01 	tst.w	r2, #1
 8002070:	d110      	bne.n	8002094 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002072:	f7ff ffcf 	bl	8002014 <HAL_GetTick>
 8002076:	1b40      	subs	r0, r0, r5
 8002078:	280a      	cmp	r0, #10
 800207a:	d9f5      	bls.n	8002068 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800207c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800207e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002082:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002084:	2305      	movs	r3, #5
 8002086:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800208a:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800208c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800208e:	f7ff fd2d 	bl	8001aec <HAL_CAN_MspInit>
 8002092:	e7e1      	b.n	8002058 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	f022 0202 	bic.w	r2, r2, #2
 800209a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800209c:	f7ff ffba 	bl	8002014 <HAL_GetTick>
 80020a0:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	f012 0f02 	tst.w	r2, #2
 80020aa:	d00d      	beq.n	80020c8 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020ac:	f7ff ffb2 	bl	8002014 <HAL_GetTick>
 80020b0:	1b40      	subs	r0, r0, r5
 80020b2:	280a      	cmp	r0, #10
 80020b4:	d9f5      	bls.n	80020a2 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020bc:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80020be:	2305      	movs	r3, #5
 80020c0:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 80020c4:	2001      	movs	r0, #1
 80020c6:	e7e1      	b.n	800208c <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020c8:	7e22      	ldrb	r2, [r4, #24]
 80020ca:	2a01      	cmp	r2, #1
 80020cc:	d03d      	beq.n	800214a <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020d4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80020d6:	7e63      	ldrb	r3, [r4, #25]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d03b      	beq.n	8002154 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020dc:	6822      	ldr	r2, [r4, #0]
 80020de:	6813      	ldr	r3, [r2, #0]
 80020e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020e4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020e6:	7ea3      	ldrb	r3, [r4, #26]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d039      	beq.n	8002160 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020ec:	6822      	ldr	r2, [r4, #0]
 80020ee:	6813      	ldr	r3, [r2, #0]
 80020f0:	f023 0320 	bic.w	r3, r3, #32
 80020f4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020f6:	7ee3      	ldrb	r3, [r4, #27]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d037      	beq.n	800216c <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020fc:	6822      	ldr	r2, [r4, #0]
 80020fe:	6813      	ldr	r3, [r2, #0]
 8002100:	f043 0310 	orr.w	r3, r3, #16
 8002104:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002106:	7f23      	ldrb	r3, [r4, #28]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d035      	beq.n	8002178 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800210c:	6822      	ldr	r2, [r4, #0]
 800210e:	6813      	ldr	r3, [r2, #0]
 8002110:	f023 0308 	bic.w	r3, r3, #8
 8002114:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002116:	7f63      	ldrb	r3, [r4, #29]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d033      	beq.n	8002184 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800211c:	6822      	ldr	r2, [r4, #0]
 800211e:	6813      	ldr	r3, [r2, #0]
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002126:	68a3      	ldr	r3, [r4, #8]
 8002128:	68e2      	ldr	r2, [r4, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	6922      	ldr	r2, [r4, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	6962      	ldr	r2, [r4, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	6862      	ldr	r2, [r4, #4]
 8002136:	3a01      	subs	r2, #1
 8002138:	6821      	ldr	r1, [r4, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800213e:	2000      	movs	r0, #0
 8002140:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002142:	2301      	movs	r3, #1
 8002144:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8002148:	e7a0      	b.n	800208c <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e7c0      	b.n	80020d6 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002154:	6822      	ldr	r2, [r4, #0]
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e7c2      	b.n	80020e6 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002160:	6822      	ldr	r2, [r4, #0]
 8002162:	6813      	ldr	r3, [r2, #0]
 8002164:	f043 0320 	orr.w	r3, r3, #32
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e7c4      	b.n	80020f6 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800216c:	6822      	ldr	r2, [r4, #0]
 800216e:	6813      	ldr	r3, [r2, #0]
 8002170:	f023 0310 	bic.w	r3, r3, #16
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e7c6      	b.n	8002106 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002178:	6822      	ldr	r2, [r4, #0]
 800217a:	6813      	ldr	r3, [r2, #0]
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e7c8      	b.n	8002116 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002184:	6822      	ldr	r2, [r4, #0]
 8002186:	6813      	ldr	r3, [r2, #0]
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e7ca      	b.n	8002126 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8002190:	2001      	movs	r0, #1
}
 8002192:	4770      	bx	lr

08002194 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002196:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002198:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a0:	0200      	lsls	r0, r0, #8
 80021a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80021a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80021b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_NVIC_SetPriority+0x68>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c2:	f1c3 0c07 	rsb	ip, r3, #7
 80021c6:	f1bc 0f04 	cmp.w	ip, #4
 80021ca:	bf28      	it	cs
 80021cc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d0:	f103 0e04 	add.w	lr, r3, #4
 80021d4:	f1be 0f06 	cmp.w	lr, #6
 80021d8:	d918      	bls.n	800220c <HAL_NVIC_SetPriority+0x54>
 80021da:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	f04f 3eff 	mov.w	lr, #4294967295
 80021e0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80021e4:	ea21 010c 	bic.w	r1, r1, ip
 80021e8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ea:	fa0e fe03 	lsl.w	lr, lr, r3
 80021ee:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f2:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80021f4:	2800      	cmp	r0, #0
 80021f6:	db0b      	blt.n	8002210 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002200:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002204:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002208:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220c:	2300      	movs	r3, #0
 800220e:	e7e5      	b.n	80021dc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002210:	f000 000f 	and.w	r0, r0, #15
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	4b02      	ldr	r3, [pc, #8]	; (8002224 <HAL_NVIC_SetPriority+0x6c>)
 800221a:	541a      	strb	r2, [r3, r0]
 800221c:	e7f4      	b.n	8002208 <HAL_NVIC_SetPriority+0x50>
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00
 8002224:	e000ed14 	.word	0xe000ed14

08002228 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002228:	2800      	cmp	r0, #0
 800222a:	db07      	blt.n	800223c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222c:	f000 021f 	and.w	r2, r0, #31
 8002230:	0940      	lsrs	r0, r0, #5
 8002232:	2301      	movs	r3, #1
 8002234:	4093      	lsls	r3, r2
 8002236:	4a02      	ldr	r2, [pc, #8]	; (8002240 <HAL_NVIC_EnableIRQ+0x18>)
 8002238:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000e100 	.word	0xe000e100

08002244 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002244:	3801      	subs	r0, #1
 8002246:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800224a:	d20b      	bcs.n	8002264 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002250:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <HAL_SYSTICK_Config+0x24>)
 8002254:	21f0      	movs	r1, #240	; 0xf0
 8002256:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225a:	2000      	movs	r0, #0
 800225c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	2207      	movs	r2, #7
 8002260:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002262:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002264:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800226c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800226e:	6805      	ldr	r5, [r0, #0]
 8002270:	682c      	ldr	r4, [r5, #0]
 8002272:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002276:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002278:	6804      	ldr	r4, [r0, #0]
 800227a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800227c:	6883      	ldr	r3, [r0, #8]
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	d005      	beq.n	800228e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002282:	6803      	ldr	r3, [r0, #0]
 8002284:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002286:	6803      	ldr	r3, [r0, #0]
 8002288:	60da      	str	r2, [r3, #12]
  }
}
 800228a:	bc30      	pop	{r4, r5}
 800228c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800228e:	6803      	ldr	r3, [r0, #0]
 8002290:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002292:	6803      	ldr	r3, [r0, #0]
 8002294:	60d9      	str	r1, [r3, #12]
 8002296:	e7f8      	b.n	800228a <DMA_SetConfig+0x1e>

08002298 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002298:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800229a:	6803      	ldr	r3, [r0, #0]
 800229c:	b2d9      	uxtb	r1, r3
 800229e:	3910      	subs	r1, #16
 80022a0:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <DMA_CalcBaseAndBitshift+0x3c>)
 80022a2:	fba2 4201 	umull	r4, r2, r2, r1
 80022a6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022a8:	4c0b      	ldr	r4, [pc, #44]	; (80022d8 <DMA_CalcBaseAndBitshift+0x40>)
 80022aa:	5ca2      	ldrb	r2, [r4, r2]
 80022ac:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022ae:	295f      	cmp	r1, #95	; 0x5f
 80022b0:	d909      	bls.n	80022c6 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	3304      	adds	r3, #4
 80022bc:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80022be:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80022c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022c4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ca:	f023 0303 	bic.w	r3, r3, #3
 80022ce:	6583      	str	r3, [r0, #88]	; 0x58
 80022d0:	e7f5      	b.n	80022be <DMA_CalcBaseAndBitshift+0x26>
 80022d2:	bf00      	nop
 80022d4:	aaaaaaab 	.word	0xaaaaaaab
 80022d8:	0800c2f8 	.word	0x0800c2f8

080022dc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022de:	6982      	ldr	r2, [r0, #24]
 80022e0:	b992      	cbnz	r2, 8002308 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d00a      	beq.n	80022fc <DMA_CheckFifoParam+0x20>
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d002      	beq.n	80022f0 <DMA_CheckFifoParam+0x14>
 80022ea:	b10b      	cbz	r3, 80022f0 <DMA_CheckFifoParam+0x14>
 80022ec:	2000      	movs	r0, #0
 80022ee:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80022f2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80022f6:	d128      	bne.n	800234a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	2000      	movs	r0, #0
 80022fa:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80022fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002302:	d024      	beq.n	800234e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8002304:	2000      	movs	r0, #0
 8002306:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002308:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800230c:	d009      	beq.n	8002322 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800230e:	2b02      	cmp	r3, #2
 8002310:	d925      	bls.n	800235e <DMA_CheckFifoParam+0x82>
 8002312:	2b03      	cmp	r3, #3
 8002314:	d125      	bne.n	8002362 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002316:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002318:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800231c:	d123      	bne.n	8002366 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800231e:	2000      	movs	r0, #0
 8002320:	4770      	bx	lr
    switch (tmp)
 8002322:	2b03      	cmp	r3, #3
 8002324:	d803      	bhi.n	800232e <DMA_CheckFifoParam+0x52>
 8002326:	e8df f003 	tbb	[pc, r3]
 800232a:	0414      	.short	0x0414
 800232c:	0a14      	.short	0x0a14
 800232e:	2000      	movs	r0, #0
 8002330:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002332:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002334:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002338:	d10d      	bne.n	8002356 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800233a:	2000      	movs	r0, #0
 800233c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800233e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002344:	d009      	beq.n	800235a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8002346:	2000      	movs	r0, #0
 8002348:	4770      	bx	lr
        status = HAL_ERROR;
 800234a:	2001      	movs	r0, #1
 800234c:	4770      	bx	lr
        status = HAL_ERROR;
 800234e:	2001      	movs	r0, #1
 8002350:	4770      	bx	lr
      status = HAL_ERROR;
 8002352:	2001      	movs	r0, #1
 8002354:	4770      	bx	lr
        status = HAL_ERROR;
 8002356:	2001      	movs	r0, #1
 8002358:	4770      	bx	lr
        status = HAL_ERROR;
 800235a:	2001      	movs	r0, #1
 800235c:	4770      	bx	lr
      status = HAL_ERROR;
 800235e:	2001      	movs	r0, #1
 8002360:	4770      	bx	lr
    switch (tmp)
 8002362:	2000      	movs	r0, #0
 8002364:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8002366:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002368:	4770      	bx	lr
	...

0800236c <HAL_DMA_Init>:
{
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff fe50 	bl	8002014 <HAL_GetTick>
  if(hdma == NULL)
 8002374:	2c00      	cmp	r4, #0
 8002376:	d05b      	beq.n	8002430 <HAL_DMA_Init+0xc4>
 8002378:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800237a:	2302      	movs	r3, #2
 800237c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002380:	2300      	movs	r3, #0
 8002382:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002386:	6822      	ldr	r2, [r4, #0]
 8002388:	6813      	ldr	r3, [r2, #0]
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	f012 0f01 	tst.w	r2, #1
 8002398:	d00a      	beq.n	80023b0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800239a:	f7ff fe3b 	bl	8002014 <HAL_GetTick>
 800239e:	1b43      	subs	r3, r0, r5
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d9f5      	bls.n	8002390 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023a4:	2320      	movs	r3, #32
 80023a6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023a8:	2003      	movs	r0, #3
 80023aa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80023b0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023b2:	4920      	ldr	r1, [pc, #128]	; (8002434 <HAL_DMA_Init+0xc8>)
 80023b4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b6:	6862      	ldr	r2, [r4, #4]
 80023b8:	68a0      	ldr	r0, [r4, #8]
 80023ba:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023bc:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023be:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c0:	6920      	ldr	r0, [r4, #16]
 80023c2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c8:	69a0      	ldr	r0, [r4, #24]
 80023ca:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80023cc:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d0:	6a20      	ldr	r0, [r4, #32]
 80023d2:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d4:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80023d8:	2904      	cmp	r1, #4
 80023da:	d01e      	beq.n	800241a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80023dc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80023de:	6826      	ldr	r6, [r4, #0]
 80023e0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023e2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80023e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023e8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d107      	bne.n	80023fe <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80023ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023f0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023f4:	b11b      	cbz	r3, 80023fe <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023f6:	4620      	mov	r0, r4
 80023f8:	f7ff ff70 	bl	80022dc <DMA_CheckFifoParam>
 80023fc:	b990      	cbnz	r0, 8002424 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80023fe:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002400:	4620      	mov	r0, r4
 8002402:	f7ff ff49 	bl	8002298 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002406:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002408:	233f      	movs	r3, #63	; 0x3f
 800240a:	4093      	lsls	r3, r2
 800240c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240e:	2000      	movs	r0, #0
 8002410:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002412:	2301      	movs	r3, #1
 8002414:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002418:	e7c9      	b.n	80023ae <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800241a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800241c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800241e:	4301      	orrs	r1, r0
 8002420:	430a      	orrs	r2, r1
 8002422:	e7db      	b.n	80023dc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002424:	2340      	movs	r3, #64	; 0x40
 8002426:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002428:	2001      	movs	r0, #1
 800242a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800242e:	e7be      	b.n	80023ae <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002430:	2001      	movs	r0, #1
 8002432:	e7bc      	b.n	80023ae <HAL_DMA_Init+0x42>
 8002434:	f010803f 	.word	0xf010803f

08002438 <HAL_DMA_Start_IT>:
{
 8002438:	b538      	push	{r3, r4, r5, lr}
 800243a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800243e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002442:	2801      	cmp	r0, #1
 8002444:	d02b      	beq.n	800249e <HAL_DMA_Start_IT+0x66>
 8002446:	2001      	movs	r0, #1
 8002448:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800244c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8002450:	b2c0      	uxtb	r0, r0
 8002452:	2801      	cmp	r0, #1
 8002454:	d004      	beq.n	8002460 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8002456:	2300      	movs	r3, #0
 8002458:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 800245c:	2002      	movs	r0, #2
}
 800245e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002460:	2002      	movs	r0, #2
 8002462:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002466:	2000      	movs	r0, #0
 8002468:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800246a:	4620      	mov	r0, r4
 800246c:	f7ff fefe 	bl	800226c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002470:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002472:	233f      	movs	r3, #63	; 0x3f
 8002474:	4093      	lsls	r3, r2
 8002476:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002478:	6822      	ldr	r2, [r4, #0]
 800247a:	6813      	ldr	r3, [r2, #0]
 800247c:	f043 0316 	orr.w	r3, r3, #22
 8002480:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002484:	b123      	cbz	r3, 8002490 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002486:	6822      	ldr	r2, [r4, #0]
 8002488:	6813      	ldr	r3, [r2, #0]
 800248a:	f043 0308 	orr.w	r3, r3, #8
 800248e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002490:	6822      	ldr	r2, [r4, #0]
 8002492:	6813      	ldr	r3, [r2, #0]
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	2000      	movs	r0, #0
 800249c:	e7df      	b.n	800245e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 800249e:	2002      	movs	r0, #2
 80024a0:	e7dd      	b.n	800245e <HAL_DMA_Start_IT+0x26>

080024a2 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d003      	beq.n	80024b4 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
 80024b2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80024b4:	2305      	movs	r3, #5
 80024b6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80024ba:	6802      	ldr	r2, [r0, #0]
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80024c4:	2000      	movs	r0, #0
}
 80024c6:	4770      	bx	lr

080024c8 <HAL_DMA_IRQHandler>:
{
 80024c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ca:	b083      	sub	sp, #12
 80024cc:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024d2:	4b72      	ldr	r3, [pc, #456]	; (800269c <HAL_DMA_IRQHandler+0x1d4>)
 80024d4:	681d      	ldr	r5, [r3, #0]
 80024d6:	4b72      	ldr	r3, [pc, #456]	; (80026a0 <HAL_DMA_IRQHandler+0x1d8>)
 80024d8:	fba3 3505 	umull	r3, r5, r3, r5
 80024dc:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024de:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80024e0:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80024e4:	2308      	movs	r3, #8
 80024e6:	4093      	lsls	r3, r2
 80024e8:	4233      	tst	r3, r6
 80024ea:	d010      	beq.n	800250e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ec:	6803      	ldr	r3, [r0, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	f012 0f04 	tst.w	r2, #4
 80024f4:	d00b      	beq.n	800250e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	f022 0204 	bic.w	r2, r2, #4
 80024fc:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024fe:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002500:	2308      	movs	r3, #8
 8002502:	4093      	lsls	r3, r2
 8002504:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002506:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800250e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002510:	2301      	movs	r3, #1
 8002512:	4093      	lsls	r3, r2
 8002514:	4233      	tst	r3, r6
 8002516:	d009      	beq.n	800252c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002518:	6822      	ldr	r2, [r4, #0]
 800251a:	6952      	ldr	r2, [r2, #20]
 800251c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002520:	d004      	beq.n	800252c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002522:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002524:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800252c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800252e:	2304      	movs	r3, #4
 8002530:	4093      	lsls	r3, r2
 8002532:	4233      	tst	r3, r6
 8002534:	d009      	beq.n	800254a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002536:	6822      	ldr	r2, [r4, #0]
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	f012 0f02 	tst.w	r2, #2
 800253e:	d004      	beq.n	800254a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002540:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002542:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800254a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800254c:	2310      	movs	r3, #16
 800254e:	4093      	lsls	r3, r2
 8002550:	4233      	tst	r3, r6
 8002552:	d024      	beq.n	800259e <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002554:	6822      	ldr	r2, [r4, #0]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	f012 0f08 	tst.w	r2, #8
 800255c:	d01f      	beq.n	800259e <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800255e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002568:	d00d      	beq.n	8002586 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002570:	d104      	bne.n	800257c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002572:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002574:	b19b      	cbz	r3, 800259e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002576:	4620      	mov	r0, r4
 8002578:	4798      	blx	r3
 800257a:	e010      	b.n	800259e <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800257c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800257e:	b173      	cbz	r3, 800259e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002580:	4620      	mov	r0, r4
 8002582:	4798      	blx	r3
 8002584:	e00b      	b.n	800259e <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	f412 7f80 	tst.w	r2, #256	; 0x100
 800258c:	d103      	bne.n	8002596 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	f022 0208 	bic.w	r2, r2, #8
 8002594:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002598:	b10b      	cbz	r3, 800259e <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800259a:	4620      	mov	r0, r4
 800259c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800259e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80025a0:	2320      	movs	r3, #32
 80025a2:	4093      	lsls	r3, r2
 80025a4:	4233      	tst	r3, r6
 80025a6:	d055      	beq.n	8002654 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025a8:	6822      	ldr	r2, [r4, #0]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	f012 0f10 	tst.w	r2, #16
 80025b0:	d050      	beq.n	8002654 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025b2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025b4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d00e      	beq.n	80025dc <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80025c6:	d033      	beq.n	8002630 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80025ce:	d12a      	bne.n	8002626 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80025d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d03e      	beq.n	8002654 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80025d6:	4620      	mov	r0, r4
 80025d8:	4798      	blx	r3
 80025da:	e03b      	b.n	8002654 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025dc:	6822      	ldr	r2, [r4, #0]
 80025de:	6813      	ldr	r3, [r2, #0]
 80025e0:	f023 0316 	bic.w	r3, r3, #22
 80025e4:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025e6:	6822      	ldr	r2, [r4, #0]
 80025e8:	6953      	ldr	r3, [r2, #20]
 80025ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ee:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025f2:	b1a3      	cbz	r3, 800261e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f4:	6822      	ldr	r2, [r4, #0]
 80025f6:	6813      	ldr	r3, [r2, #0]
 80025f8:	f023 0308 	bic.w	r3, r3, #8
 80025fc:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002600:	233f      	movs	r3, #63	; 0x3f
 8002602:	4093      	lsls	r3, r2
 8002604:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002606:	2301      	movs	r3, #1
 8002608:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800260c:	2300      	movs	r3, #0
 800260e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002612:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002614:	2b00      	cmp	r3, #0
 8002616:	d03f      	beq.n	8002698 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002618:	4620      	mov	r0, r4
 800261a:	4798      	blx	r3
        return;
 800261c:	e03c      	b.n	8002698 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800261e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e7      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x12c>
 8002624:	e7eb      	b.n	80025fe <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002626:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002628:	b1a3      	cbz	r3, 8002654 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800262a:	4620      	mov	r0, r4
 800262c:	4798      	blx	r3
 800262e:	e011      	b.n	8002654 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002636:	d109      	bne.n	800264c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	f022 0210 	bic.w	r2, r2, #16
 800263e:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002640:	2301      	movs	r3, #1
 8002642:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002646:	2300      	movs	r3, #0
 8002648:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800264c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800264e:	b10b      	cbz	r3, 8002654 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002650:	4620      	mov	r0, r4
 8002652:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002654:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002656:	b1fb      	cbz	r3, 8002698 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002658:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800265a:	f013 0f01 	tst.w	r3, #1
 800265e:	d017      	beq.n	8002690 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002660:	2305      	movs	r3, #5
 8002662:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002666:	6822      	ldr	r2, [r4, #0]
 8002668:	6813      	ldr	r3, [r2, #0]
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002670:	9b01      	ldr	r3, [sp, #4]
 8002672:	3301      	adds	r3, #1
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	42ab      	cmp	r3, r5
 8002678:	d804      	bhi.n	8002684 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f013 0f01 	tst.w	r3, #1
 8002682:	d1f5      	bne.n	8002670 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8002684:	2301      	movs	r3, #1
 8002686:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800268a:	2300      	movs	r3, #0
 800268c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002690:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002692:	b10b      	cbz	r3, 8002698 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002694:	4620      	mov	r0, r4
 8002696:	4798      	blx	r3
}
 8002698:	b003      	add	sp, #12
 800269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800269c:	20000134 	.word	0x20000134
 80026a0:	1b4e81b5 	.word	0x1b4e81b5

080026a4 <HAL_DMA_GetState>:
  return hdma->State;
 80026a4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80026a8:	4770      	bx	lr

080026aa <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80026aa:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b0f      	cmp	r3, #15
 80026b4:	f200 80e3 	bhi.w	800287e <HAL_GPIO_Init+0x1ce>
{
 80026b8:	b570      	push	{r4, r5, r6, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	e065      	b.n	800278a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026be:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026c0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80026c4:	2403      	movs	r4, #3
 80026c6:	fa04 f40e 	lsl.w	r4, r4, lr
 80026ca:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ce:	68cc      	ldr	r4, [r1, #12]
 80026d0:	fa04 f40e 	lsl.w	r4, r4, lr
 80026d4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80026d6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026da:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026de:	684a      	ldr	r2, [r1, #4]
 80026e0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80026e4:	409a      	lsls	r2, r3
 80026e6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80026e8:	6042      	str	r2, [r0, #4]
 80026ea:	e05c      	b.n	80027a6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ec:	08dc      	lsrs	r4, r3, #3
 80026ee:	3408      	adds	r4, #8
 80026f0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026f4:	f003 0507 	and.w	r5, r3, #7
 80026f8:	00ad      	lsls	r5, r5, #2
 80026fa:	f04f 0e0f 	mov.w	lr, #15
 80026fe:	fa0e fe05 	lsl.w	lr, lr, r5
 8002702:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002706:	690a      	ldr	r2, [r1, #16]
 8002708:	40aa      	lsls	r2, r5
 800270a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800270e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002712:	e05c      	b.n	80027ce <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002714:	2206      	movs	r2, #6
 8002716:	e000      	b.n	800271a <HAL_GPIO_Init+0x6a>
 8002718:	2200      	movs	r2, #0
 800271a:	fa02 f20e 	lsl.w	r2, r2, lr
 800271e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002720:	3402      	adds	r4, #2
 8002722:	4d57      	ldr	r5, [pc, #348]	; (8002880 <HAL_GPIO_Init+0x1d0>)
 8002724:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002728:	4a56      	ldr	r2, [pc, #344]	; (8002884 <HAL_GPIO_Init+0x1d4>)
 800272a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800272c:	ea6f 020c 	mvn.w	r2, ip
 8002730:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002734:	684e      	ldr	r6, [r1, #4]
 8002736:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 800273a:	d001      	beq.n	8002740 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800273c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002740:	4c50      	ldr	r4, [pc, #320]	; (8002884 <HAL_GPIO_Init+0x1d4>)
 8002742:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002744:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002746:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800274a:	684e      	ldr	r6, [r1, #4]
 800274c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002750:	d001      	beq.n	8002756 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8002752:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8002756:	4c4b      	ldr	r4, [pc, #300]	; (8002884 <HAL_GPIO_Init+0x1d4>)
 8002758:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800275a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800275c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002760:	684e      	ldr	r6, [r1, #4]
 8002762:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8002766:	d001      	beq.n	800276c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8002768:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800276c:	4c45      	ldr	r4, [pc, #276]	; (8002884 <HAL_GPIO_Init+0x1d4>)
 800276e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002770:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002772:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002774:	684d      	ldr	r5, [r1, #4]
 8002776:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 800277a:	d001      	beq.n	8002780 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800277c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8002780:	4c40      	ldr	r4, [pc, #256]	; (8002884 <HAL_GPIO_Init+0x1d4>)
 8002782:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002784:	3301      	adds	r3, #1
 8002786:	2b0f      	cmp	r3, #15
 8002788:	d877      	bhi.n	800287a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 800278a:	2201      	movs	r2, #1
 800278c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278e:	680c      	ldr	r4, [r1, #0]
 8002790:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002794:	ea32 0404 	bics.w	r4, r2, r4
 8002798:	d1f4      	bne.n	8002784 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279a:	684c      	ldr	r4, [r1, #4]
 800279c:	f004 0403 	and.w	r4, r4, #3
 80027a0:	3c01      	subs	r4, #1
 80027a2:	2c01      	cmp	r4, #1
 80027a4:	d98b      	bls.n	80026be <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a6:	684a      	ldr	r2, [r1, #4]
 80027a8:	f002 0203 	and.w	r2, r2, #3
 80027ac:	2a03      	cmp	r2, #3
 80027ae:	d009      	beq.n	80027c4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80027b0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027b2:	005d      	lsls	r5, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	40aa      	lsls	r2, r5
 80027b8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027bc:	688a      	ldr	r2, [r1, #8]
 80027be:	40aa      	lsls	r2, r5
 80027c0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80027c2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c4:	684a      	ldr	r2, [r1, #4]
 80027c6:	f002 0203 	and.w	r2, r2, #3
 80027ca:	2a02      	cmp	r2, #2
 80027cc:	d08e      	beq.n	80026ec <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80027ce:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027d0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f20e 	lsl.w	r2, r2, lr
 80027da:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027de:	684a      	ldr	r2, [r1, #4]
 80027e0:	f002 0203 	and.w	r2, r2, #3
 80027e4:	fa02 f20e 	lsl.w	r2, r2, lr
 80027e8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80027ea:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027ec:	684a      	ldr	r2, [r1, #4]
 80027ee:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80027f2:	d0c7      	beq.n	8002784 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f4:	2200      	movs	r2, #0
 80027f6:	9201      	str	r2, [sp, #4]
 80027f8:	4a23      	ldr	r2, [pc, #140]	; (8002888 <HAL_GPIO_Init+0x1d8>)
 80027fa:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80027fc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002800:	6454      	str	r4, [r2, #68]	; 0x44
 8002802:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002804:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002808:	9201      	str	r2, [sp, #4]
 800280a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800280c:	089c      	lsrs	r4, r3, #2
 800280e:	1ca5      	adds	r5, r4, #2
 8002810:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <HAL_GPIO_Init+0x1d0>)
 8002812:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002816:	f003 0e03 	and.w	lr, r3, #3
 800281a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f20e 	lsl.w	r2, r2, lr
 8002824:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <HAL_GPIO_Init+0x1dc>)
 800282a:	4290      	cmp	r0, r2
 800282c:	f43f af74 	beq.w	8002718 <HAL_GPIO_Init+0x68>
 8002830:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002834:	4290      	cmp	r0, r2
 8002836:	d016      	beq.n	8002866 <HAL_GPIO_Init+0x1b6>
 8002838:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800283c:	4290      	cmp	r0, r2
 800283e:	d014      	beq.n	800286a <HAL_GPIO_Init+0x1ba>
 8002840:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002844:	4290      	cmp	r0, r2
 8002846:	d012      	beq.n	800286e <HAL_GPIO_Init+0x1be>
 8002848:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800284c:	4290      	cmp	r0, r2
 800284e:	d010      	beq.n	8002872 <HAL_GPIO_Init+0x1c2>
 8002850:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002854:	4290      	cmp	r0, r2
 8002856:	d00e      	beq.n	8002876 <HAL_GPIO_Init+0x1c6>
 8002858:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800285c:	4290      	cmp	r0, r2
 800285e:	f43f af59 	beq.w	8002714 <HAL_GPIO_Init+0x64>
 8002862:	2207      	movs	r2, #7
 8002864:	e759      	b.n	800271a <HAL_GPIO_Init+0x6a>
 8002866:	2201      	movs	r2, #1
 8002868:	e757      	b.n	800271a <HAL_GPIO_Init+0x6a>
 800286a:	2202      	movs	r2, #2
 800286c:	e755      	b.n	800271a <HAL_GPIO_Init+0x6a>
 800286e:	2203      	movs	r2, #3
 8002870:	e753      	b.n	800271a <HAL_GPIO_Init+0x6a>
 8002872:	2204      	movs	r2, #4
 8002874:	e751      	b.n	800271a <HAL_GPIO_Init+0x6a>
 8002876:	2205      	movs	r2, #5
 8002878:	e74f      	b.n	800271a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800287a:	b002      	add	sp, #8
 800287c:	bd70      	pop	{r4, r5, r6, pc}
 800287e:	4770      	bx	lr
 8002880:	40013800 	.word	0x40013800
 8002884:	40013c00 	.word	0x40013c00
 8002888:	40023800 	.word	0x40023800
 800288c:	40020000 	.word	0x40020000

08002890 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002890:	6903      	ldr	r3, [r0, #16]
 8002892:	4219      	tst	r1, r3
 8002894:	d001      	beq.n	800289a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002896:	2001      	movs	r0, #1
 8002898:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800289a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800289c:	4770      	bx	lr

0800289e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800289e:	b10a      	cbz	r2, 80028a4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a0:	6181      	str	r1, [r0, #24]
 80028a2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028a4:	0409      	lsls	r1, r1, #16
 80028a6:	6181      	str	r1, [r0, #24]
  }
}
 80028a8:	4770      	bx	lr

080028aa <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028aa:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028ac:	ea01 0203 	and.w	r2, r1, r3
 80028b0:	ea21 0103 	bic.w	r1, r1, r3
 80028b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80028b8:	6181      	str	r1, [r0, #24]
}
 80028ba:	4770      	bx	lr

080028bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028c0:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c2:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80028c6:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80028ca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80028ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d854      	bhi.n	8002980 <PCD_WriteEmptyTxFifo+0xc4>
 80028d6:	4607      	mov	r7, r0
 80028d8:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 80028da:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 80028dc:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 80028e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80028e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d300      	bcc.n	80028ec <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 80028ea:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 80028ec:	f102 0903 	add.w	r9, r2, #3
 80028f0:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028f4:	e015      	b.n	8002922 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80028f6:	f106 0903 	add.w	r9, r6, #3
 80028fa:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028fe:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8002902:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8002906:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8002908:	7c3b      	ldrb	r3, [r7, #16]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	b2b3      	uxth	r3, r6
 800290e:	b2e2      	uxtb	r2, r4
 8002910:	4640      	mov	r0, r8
 8002912:	f003 fd5e 	bl	80063d2 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8002916:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002918:	4433      	add	r3, r6
 800291a:	64eb      	str	r3, [r5, #76]	; 0x4c
    ep->xfer_count += len;
 800291c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800291e:	4433      	add	r3, r6
 8002920:	65eb      	str	r3, [r5, #92]	; 0x5c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002922:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8002926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800292e:	454b      	cmp	r3, r9
 8002930:	d312      	bcc.n	8002958 <PCD_WriteEmptyTxFifo+0x9c>
 8002932:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002936:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800293a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800293e:	429a      	cmp	r2, r3
 8002940:	d20a      	bcs.n	8002958 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002942:	b14b      	cbz	r3, 8002958 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8002944:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8002946:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800294a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800294e:	6c96      	ldr	r6, [r2, #72]	; 0x48
 8002950:	429e      	cmp	r6, r3
 8002952:	d3d0      	bcc.n	80028f6 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8002954:	461e      	mov	r6, r3
 8002956:	e7ce      	b.n	80028f6 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002958:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800295c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8002960:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002964:	429a      	cmp	r2, r3
 8002966:	d80f      	bhi.n	8002988 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002968:	f004 040f 	and.w	r4, r4, #15
 800296c:	2201      	movs	r2, #1
 800296e:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002970:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 8002974:	ea23 0302 	bic.w	r3, r3, r2
 8002978:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 800297c:	2000      	movs	r0, #0
 800297e:	e000      	b.n	8002982 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8002980:	2001      	movs	r0, #1
}
 8002982:	b003      	add	sp, #12
 8002984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8002988:	2000      	movs	r0, #0
 800298a:	e7fa      	b.n	8002982 <PCD_WriteEmptyTxFifo+0xc6>

0800298c <HAL_PCD_Init>:
{
 800298c:	b570      	push	{r4, r5, r6, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8002990:	2800      	cmp	r0, #0
 8002992:	f000 8097 	beq.w	8002ac4 <HAL_PCD_Init+0x138>
 8002996:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8002998:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800299a:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 800299e:	b33b      	cbz	r3, 80029f0 <HAL_PCD_Init+0x64>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80029a0:	2303      	movs	r3, #3
 80029a2:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80029ac:	d101      	bne.n	80029b2 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 80029b2:	6828      	ldr	r0, [r5, #0]
 80029b4:	f003 fa2e 	bl	8005e14 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029b8:	462c      	mov	r4, r5
 80029ba:	f854 6b10 	ldr.w	r6, [r4], #16
 80029be:	46ec      	mov	ip, sp
 80029c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80029c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80029cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029d0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80029d4:	1d2b      	adds	r3, r5, #4
 80029d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d8:	4630      	mov	r0, r6
 80029da:	f003 f95d 	bl	8005c98 <USB_CoreInit>
 80029de:	4604      	mov	r4, r0
 80029e0:	b158      	cbz	r0, 80029fa <HAL_PCD_Init+0x6e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029e2:	2302      	movs	r3, #2
 80029e4:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 80029e8:	2401      	movs	r4, #1
}
 80029ea:	4620      	mov	r0, r4
 80029ec:	b00a      	add	sp, #40	; 0x28
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80029f0:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 80029f4:	f008 fc4a 	bl	800b28c <HAL_PCD_MspInit>
 80029f8:	e7d2      	b.n	80029a0 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029fa:	2100      	movs	r1, #0
 80029fc:	6828      	ldr	r0, [r5, #0]
 80029fe:	f003 fef6 	bl	80067ee <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a02:	4623      	mov	r3, r4
 8002a04:	e016      	b.n	8002a34 <HAL_PCD_Init+0xa8>
    hpcd->IN_ep[i].is_in = 1U;
 8002a06:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002a0a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002a0e:	2101      	movs	r1, #1
 8002a10:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8002a14:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a18:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a22:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a24:	64d1      	str	r1, [r2, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a26:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002a2a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002a2e:	6551      	str	r1, [r2, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a30:	3301      	adds	r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	6869      	ldr	r1, [r5, #4]
 8002a36:	428b      	cmp	r3, r1
 8002a38:	d3e5      	bcc.n	8002a06 <HAL_PCD_Init+0x7a>
 8002a3a:	e016      	b.n	8002a6a <HAL_PCD_Init+0xde>
    hpcd->OUT_ep[i].is_in = 0U;
 8002a3c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002a40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8002a4a:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a4e:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a52:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a56:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a5a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002a5e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002a62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a66:	3401      	adds	r4, #1
 8002a68:	b2e4      	uxtb	r4, r4
 8002a6a:	42a1      	cmp	r1, r4
 8002a6c:	d8e6      	bhi.n	8002a3c <HAL_PCD_Init+0xb0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a6e:	462c      	mov	r4, r5
 8002a70:	f854 6b10 	ldr.w	r6, [r4], #16
 8002a74:	46ec      	mov	ip, sp
 8002a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002a82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a86:	e88c 0003 	stmia.w	ip, {r0, r1}
 8002a8a:	1d2b      	adds	r3, r5, #4
 8002a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8e:	4630      	mov	r0, r6
 8002a90:	f003 fa1c 	bl	8005ecc <USB_DevInit>
 8002a94:	4604      	mov	r4, r0
 8002a96:	b960      	cbnz	r0, 8002ab2 <HAL_PCD_Init+0x126>
  hpcd->USB_Address = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8002aa4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d008      	beq.n	8002abc <HAL_PCD_Init+0x130>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002aaa:	6828      	ldr	r0, [r5, #0]
 8002aac:	f003 fe5e 	bl	800676c <USB_DevDisconnect>
  return HAL_OK;
 8002ab0:	e79b      	b.n	80029ea <HAL_PCD_Init+0x5e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ab8:	2401      	movs	r4, #1
 8002aba:	e796      	b.n	80029ea <HAL_PCD_Init+0x5e>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002abc:	4628      	mov	r0, r5
 8002abe:	f000 fd8f 	bl	80035e0 <HAL_PCDEx_ActivateLPM>
 8002ac2:	e7f2      	b.n	8002aaa <HAL_PCD_Init+0x11e>
    return HAL_ERROR;
 8002ac4:	2401      	movs	r4, #1
 8002ac6:	e790      	b.n	80029ea <HAL_PCD_Init+0x5e>

08002ac8 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ac8:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8002aca:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d019      	beq.n	8002b06 <HAL_PCD_Start+0x3e>
{
 8002ad2:	b510      	push	{r4, lr}
 8002ad4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002adc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d009      	beq.n	8002af6 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 8002ae2:	6820      	ldr	r0, [r4, #0]
 8002ae4:	f003 f990 	bl	8005e08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ae8:	6820      	ldr	r0, [r4, #0]
 8002aea:	f003 fe31 	bl	8006750 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8002af4:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002af6:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d0f2      	beq.n	8002ae2 <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002afc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b02:	6393      	str	r3, [r2, #56]	; 0x38
 8002b04:	e7ed      	b.n	8002ae2 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8002b06:	2002      	movs	r0, #2
}
 8002b08:	4770      	bx	lr
	...

08002b0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	4604      	mov	r4, r0
 8002b10:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b12:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b14:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b16:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1e:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002b20:	6921      	ldr	r1, [r4, #16]
 8002b22:	2901      	cmp	r1, #1
 8002b24:	d011      	beq.n	8002b4a <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b26:	4938      	ldr	r1, [pc, #224]	; (8002c08 <PCD_EP_OutXfrComplete_int+0xfc>)
 8002b28:	428e      	cmp	r6, r1
 8002b2a:	d056      	beq.n	8002bda <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b2c:	b93d      	cbnz	r5, 8002b3e <PCD_EP_OutXfrComplete_int+0x32>
 8002b2e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8002b32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002b36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d05e      	beq.n	8002bfc <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b3e:	b2e9      	uxtb	r1, r5
 8002b40:	4620      	mov	r0, r4
 8002b42:	f008 fbff 	bl	800b344 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8002b46:	2000      	movs	r0, #0
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b4a:	f012 0f08 	tst.w	r2, #8
 8002b4e:	d009      	beq.n	8002b64 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b50:	492e      	ldr	r1, [pc, #184]	; (8002c0c <PCD_EP_OutXfrComplete_int+0x100>)
 8002b52:	428e      	cmp	r6, r1
 8002b54:	d9f7      	bls.n	8002b46 <PCD_EP_OutXfrComplete_int+0x3a>
 8002b56:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002b5a:	d0f4      	beq.n	8002b46 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	e7f0      	b.n	8002b46 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b64:	f012 0f20 	tst.w	r2, #32
 8002b68:	d002      	beq.n	8002b70 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	e7ea      	b.n	8002b46 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b70:	f012 0f28 	tst.w	r2, #40	; 0x28
 8002b74:	d1e7      	bne.n	8002b46 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b76:	4925      	ldr	r1, [pc, #148]	; (8002c0c <PCD_EP_OutXfrComplete_int+0x100>)
 8002b78:	428e      	cmp	r6, r1
 8002b7a:	d906      	bls.n	8002b8a <PCD_EP_OutXfrComplete_int+0x7e>
 8002b7c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002b80:	d003      	beq.n	8002b8a <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	e7dd      	b.n	8002b46 <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b8a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8002b8e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002b92:	f8d2 1298 	ldr.w	r1, [r2, #664]	; 0x298
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9c:	1acb      	subs	r3, r1, r3
 8002b9e:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
        if (epnum == 0U)
 8002ba2:	b97d      	cbnz	r5, 8002bc4 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8002ba4:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8002ba8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002bac:	f8d2 2294 	ldr.w	r2, [r2, #660]	; 0x294
 8002bb0:	b16a      	cbz	r2, 8002bce <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8002bb2:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8002bb6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002bba:	f8d2 128c 	ldr.w	r1, [r2, #652]	; 0x28c
 8002bbe:	4419      	add	r1, r3
 8002bc0:	f8c2 128c 	str.w	r1, [r2, #652]	; 0x28c
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bc4:	b2e9      	uxtb	r1, r5
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f008 fbbc 	bl	800b344 <HAL_PCD_DataOutStageCallback>
 8002bcc:	e7bb      	b.n	8002b46 <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bce:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	f003 fe4c 	bl	8006870 <USB_EP0_OutStart>
 8002bd8:	e7f4      	b.n	8002bc4 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002bda:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002bde:	d003      	beq.n	8002be8 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002be0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	e7ae      	b.n	8002b46 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002be8:	f012 0f20 	tst.w	r2, #32
 8002bec:	d001      	beq.n	8002bf2 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bee:	2220      	movs	r2, #32
 8002bf0:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bf2:	b2e9      	uxtb	r1, r5
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f008 fba5 	bl	800b344 <HAL_PCD_DataOutStageCallback>
 8002bfa:	e7a4      	b.n	8002b46 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002bfc:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8002c00:	2100      	movs	r1, #0
 8002c02:	f003 fe35 	bl	8006870 <USB_EP0_OutStart>
 8002c06:	e79a      	b.n	8002b3e <PCD_EP_OutXfrComplete_int+0x32>
 8002c08:	4f54310a 	.word	0x4f54310a
 8002c0c:	4f54300a 	.word	0x4f54300a

08002c10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c10:	b538      	push	{r3, r4, r5, lr}
 8002c12:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c14:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c16:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8002c1c:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c20:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <PCD_EP_OutSetupPacket_int+0x4c>)
 8002c22:	4295      	cmp	r5, r2
 8002c24:	d907      	bls.n	8002c36 <PCD_EP_OutSetupPacket_int+0x26>
 8002c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8002c2e:	d002      	beq.n	8002c36 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c34:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c36:	4620      	mov	r0, r4
 8002c38:	f008 fb7c 	bl	800b334 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <PCD_EP_OutSetupPacket_int+0x4c>)
 8002c3e:	429d      	cmp	r5, r3
 8002c40:	d902      	bls.n	8002c48 <PCD_EP_OutSetupPacket_int+0x38>
 8002c42:	6923      	ldr	r3, [r4, #16]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d001      	beq.n	8002c4c <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8002c48:	2000      	movs	r0, #0
 8002c4a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c4c:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8002c50:	2101      	movs	r1, #1
 8002c52:	6820      	ldr	r0, [r4, #0]
 8002c54:	f003 fe0c 	bl	8006870 <USB_EP0_OutStart>
 8002c58:	e7f6      	b.n	8002c48 <PCD_EP_OutSetupPacket_int+0x38>
 8002c5a:	bf00      	nop
 8002c5c:	4f54300a 	.word	0x4f54300a

08002c60 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002c60:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d00d      	beq.n	8002c84 <HAL_PCD_SetAddress+0x24>
{
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c72:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c76:	6800      	ldr	r0, [r0, #0]
 8002c78:	f003 fd5a 	bl	8006730 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8002c82:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002c84:	2002      	movs	r0, #2
}
 8002c86:	4770      	bx	lr

08002c88 <HAL_PCD_EP_Open>:
{
 8002c88:	b538      	push	{r3, r4, r5, lr}
 8002c8a:	4605      	mov	r5, r0
 8002c8c:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002c8e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c92:	d129      	bne.n	8002ce8 <HAL_PCD_EP_Open+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c94:	f001 0e0f 	and.w	lr, r1, #15
 8002c98:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8002c9c:	00a4      	lsls	r4, r4, #2
 8002c9e:	f504 741e 	add.w	r4, r4, #632	; 0x278
 8002ca2:	4404      	add	r4, r0
 8002ca4:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8002ca6:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8002caa:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f88e 027d 	strb.w	r0, [lr, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb4:	f00c 0c0f 	and.w	ip, ip, #15
 8002cb8:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8002cbc:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
 8002cbe:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8002cc0:	784a      	ldrb	r2, [r1, #1]
 8002cc2:	b10a      	cbz	r2, 8002cc8 <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 8002cc4:	f8a1 c008 	strh.w	ip, [r1, #8]
  if (ep_type == EP_TYPE_BULK)
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d01d      	beq.n	8002d08 <HAL_PCD_EP_Open+0x80>
  __HAL_LOCK(hpcd);
 8002ccc:	f895 34bc 	ldrb.w	r3, [r5, #1212]	; 0x4bc
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d01c      	beq.n	8002d0e <HAL_PCD_EP_Open+0x86>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f885 34bc 	strb.w	r3, [r5, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cda:	6828      	ldr	r0, [r5, #0]
 8002cdc:	f003 f9cb 	bl	8006076 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f885 04bc 	strb.w	r0, [r5, #1212]	; 0x4bc
}
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce8:	f001 000f 	and.w	r0, r1, #15
 8002cec:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8002cf0:	0089      	lsls	r1, r1, #2
 8002cf2:	3138      	adds	r1, #56	; 0x38
 8002cf4:	4429      	add	r1, r5
 8002cf6:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002cf8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002cfc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002d00:	2401      	movs	r4, #1
 8002d02:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 8002d06:	e7d5      	b.n	8002cb4 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	714b      	strb	r3, [r1, #5]
 8002d0c:	e7de      	b.n	8002ccc <HAL_PCD_EP_Open+0x44>
  __HAL_LOCK(hpcd);
 8002d0e:	2002      	movs	r0, #2
 8002d10:	e7e9      	b.n	8002ce6 <HAL_PCD_EP_Open+0x5e>

08002d12 <HAL_PCD_EP_Close>:
{
 8002d12:	b510      	push	{r4, lr}
 8002d14:	4604      	mov	r4, r0
 8002d16:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002d18:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d1c:	d120      	bne.n	8002d60 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d1e:	f001 000f 	and.w	r0, r1, #15
 8002d22:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d2c:	4423      	add	r3, r4
 8002d2e:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8002d30:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002d34:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d3e:	f002 020f 	and.w	r2, r2, #15
 8002d42:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002d44:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d019      	beq.n	8002d80 <HAL_PCD_EP_Close+0x6e>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d52:	6820      	ldr	r0, [r4, #0]
 8002d54:	f003 f9dc 	bl	8006110 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8002d5e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d60:	f001 000f 	and.w	r0, r1, #15
 8002d64:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	3338      	adds	r3, #56	; 0x38
 8002d6c:	4423      	add	r3, r4
 8002d6e:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8002d70:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002d74:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002d7e:	e7de      	b.n	8002d3e <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8002d80:	2002      	movs	r0, #2
 8002d82:	e7ec      	b.n	8002d5e <HAL_PCD_EP_Close+0x4c>

08002d84 <HAL_PCD_EP_Receive>:
{
 8002d84:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d86:	f001 040f 	and.w	r4, r1, #15
 8002d8a:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8002d8e:	0089      	lsls	r1, r1, #2
 8002d90:	f501 711e 	add.w	r1, r1, #632	; 0x278
 8002d94:	4401      	add	r1, r0
 8002d96:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8002d98:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 8002d9c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002da0:	f8cc 228c 	str.w	r2, [ip, #652]	; 0x28c
  ep->xfer_len = len;
 8002da4:	f8cc 3294 	str.w	r3, [ip, #660]	; 0x294
  ep->xfer_count = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8cc 329c 	str.w	r3, [ip, #668]	; 0x29c
  ep->is_in = 0U;
 8002dae:	f88c 327d 	strb.w	r3, [ip, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db2:	f88c 427c 	strb.w	r4, [ip, #636]	; 0x27c
  if (hpcd->Init.dma_enable == 1U)
 8002db6:	6903      	ldr	r3, [r0, #16]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d006      	beq.n	8002dca <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dbc:	b964      	cbnz	r4, 8002dd8 <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	6800      	ldr	r0, [r0, #0]
 8002dc2:	f003 fa15 	bl	80061f0 <USB_EP0StartXfer>
}
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002dca:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 8002dce:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002dd2:	f8cc 2290 	str.w	r2, [ip, #656]	; 0x290
 8002dd6:	e7f1      	b.n	8002dbc <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	6800      	ldr	r0, [r0, #0]
 8002ddc:	f003 fb10 	bl	8006400 <USB_EPStartXfer>
 8002de0:	e7f1      	b.n	8002dc6 <HAL_PCD_EP_Receive+0x42>

08002de2 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002de2:	f001 010f 	and.w	r1, r1, #15
 8002de6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002dea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8002dee:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
 8002df2:	4770      	bx	lr

08002df4 <HAL_PCD_EP_Transmit>:
{
 8002df4:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002df6:	f001 040f 	and.w	r4, r1, #15
 8002dfa:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8002dfe:	0089      	lsls	r1, r1, #2
 8002e00:	3138      	adds	r1, #56	; 0x38
 8002e02:	4401      	add	r1, r0
 8002e04:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8002e06:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 8002e0a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002e0e:	f8cc 204c 	str.w	r2, [ip, #76]	; 0x4c
  ep->xfer_len = len;
 8002e12:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->xfer_count = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  ep->is_in = 1U;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e22:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8002e26:	6903      	ldr	r3, [r0, #16]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d006      	beq.n	8002e3a <HAL_PCD_EP_Transmit+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e2c:	b964      	cbnz	r4, 8002e48 <HAL_PCD_EP_Transmit+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	6800      	ldr	r0, [r0, #0]
 8002e32:	f003 f9dd 	bl	80061f0 <USB_EP0StartXfer>
}
 8002e36:	2000      	movs	r0, #0
 8002e38:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002e3a:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 8002e3e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002e42:	f8cc 2050 	str.w	r2, [ip, #80]	; 0x50
 8002e46:	e7f1      	b.n	8002e2c <HAL_PCD_EP_Transmit+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	6800      	ldr	r0, [r0, #0]
 8002e4c:	f003 fad8 	bl	8006400 <USB_EPStartXfer>
 8002e50:	e7f1      	b.n	8002e36 <HAL_PCD_EP_Transmit+0x42>

08002e52 <HAL_PCD_EP_SetStall>:
{
 8002e52:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e54:	f001 050f 	and.w	r5, r1, #15
 8002e58:	6842      	ldr	r2, [r0, #4]
 8002e5a:	4295      	cmp	r5, r2
 8002e5c:	d839      	bhi.n	8002ed2 <HAL_PCD_EP_SetStall+0x80>
 8002e5e:	4604      	mov	r4, r0
 8002e60:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8002e62:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002e66:	d11f      	bne.n	8002ea8 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8002e68:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002e6c:	0089      	lsls	r1, r1, #2
 8002e6e:	f501 711e 	add.w	r1, r1, #632	; 0x278
 8002e72:	4401      	add	r1, r0
 8002e74:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8002e76:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002e7a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  ep->is_stall = 1U;
 8002e84:	2301      	movs	r3, #1
 8002e86:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e88:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002e8a:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d021      	beq.n	8002ed6 <HAL_PCD_EP_SetStall+0x84>
 8002e92:	2301      	movs	r3, #1
 8002e94:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e98:	6820      	ldr	r0, [r4, #0]
 8002e9a:	f003 fbee 	bl	800667a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e9e:	b18d      	cbz	r5, 8002ec4 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8002ea6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea8:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8002eac:	0089      	lsls	r1, r1, #2
 8002eae:	3138      	adds	r1, #56	; 0x38
 8002eb0:	4401      	add	r1, r0
 8002eb2:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002eb4:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8002eb8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ec2:	e7df      	b.n	8002e84 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ec4:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8002ec8:	7c21      	ldrb	r1, [r4, #16]
 8002eca:	6820      	ldr	r0, [r4, #0]
 8002ecc:	f003 fcd0 	bl	8006870 <USB_EP0_OutStart>
 8002ed0:	e7e6      	b.n	8002ea0 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	e7e7      	b.n	8002ea6 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8002ed6:	2002      	movs	r0, #2
 8002ed8:	e7e5      	b.n	8002ea6 <HAL_PCD_EP_SetStall+0x54>

08002eda <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002eda:	f001 030f 	and.w	r3, r1, #15
 8002ede:	6842      	ldr	r2, [r0, #4]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d831      	bhi.n	8002f48 <HAL_PCD_EP_ClrStall+0x6e>
{
 8002ee4:	b510      	push	{r4, lr}
 8002ee6:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8002ee8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002eec:	d11e      	bne.n	8002f2c <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eee:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002ef2:	0089      	lsls	r1, r1, #2
 8002ef4:	f501 711e 	add.w	r1, r1, #632	; 0x278
 8002ef8:	4401      	add	r1, r0
 8002efa:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8002efc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002f00:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f04:	2000      	movs	r0, #0
 8002f06:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->is_stall = 0U;
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f0e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002f10:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d019      	beq.n	8002f4c <HAL_PCD_EP_ClrStall+0x72>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f1e:	6820      	ldr	r0, [r4, #0]
 8002f20:	f003 fbd8 	bl	80066d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8002f2a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002f30:	0089      	lsls	r1, r1, #2
 8002f32:	3138      	adds	r1, #56	; 0x38
 8002f34:	4401      	add	r1, r0
 8002f36:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002f38:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002f3c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f40:	2001      	movs	r0, #1
 8002f42:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8002f46:	e7e0      	b.n	8002f0a <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8002f48:	2001      	movs	r0, #1
}
 8002f4a:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8002f4c:	2002      	movs	r0, #2
 8002f4e:	e7ec      	b.n	8002f2a <HAL_PCD_EP_ClrStall+0x50>

08002f50 <HAL_PCD_EP_Abort>:
{
 8002f50:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8002f52:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002f56:	d10c      	bne.n	8002f72 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f58:	f001 010f 	and.w	r1, r1, #15
 8002f5c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002f60:	0089      	lsls	r1, r1, #2
 8002f62:	f501 711e 	add.w	r1, r1, #632	; 0x278
 8002f66:	4401      	add	r1, r0
 8002f68:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f6a:	6800      	ldr	r0, [r0, #0]
 8002f6c:	f003 f9d2 	bl	8006314 <USB_EPStopXfer>
}
 8002f70:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f72:	f001 010f 	and.w	r1, r1, #15
 8002f76:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002f7a:	0089      	lsls	r1, r1, #2
 8002f7c:	3138      	adds	r1, #56	; 0x38
 8002f7e:	4401      	add	r1, r0
 8002f80:	3104      	adds	r1, #4
 8002f82:	e7f2      	b.n	8002f6a <HAL_PCD_EP_Abort+0x1a>

08002f84 <HAL_PCD_IRQHandler>:
{
 8002f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f8c:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f003 fc29 	bl	80067e6 <USB_GetMode>
 8002f94:	b110      	cbz	r0, 8002f9c <HAL_PCD_IRQHandler+0x18>
}
 8002f96:	b003      	add	sp, #12
 8002f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f9c:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f9e:	6820      	ldr	r0, [r4, #0]
 8002fa0:	f003 fbf2 	bl	8006788 <USB_ReadInterrupts>
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d0f6      	beq.n	8002f96 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002fa8:	f505 6700 	add.w	r7, r5, #2048	; 0x800
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002fb2:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002fb6:	6820      	ldr	r0, [r4, #0]
 8002fb8:	f003 fbe6 	bl	8006788 <USB_ReadInterrupts>
 8002fbc:	f010 0f02 	tst.w	r0, #2
 8002fc0:	d004      	beq.n	8002fcc <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	6953      	ldr	r3, [r2, #20]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fcc:	6820      	ldr	r0, [r4, #0]
 8002fce:	f003 fbdb 	bl	8006788 <USB_ReadInterrupts>
 8002fd2:	f010 0f10 	tst.w	r0, #16
 8002fd6:	d014      	beq.n	8003002 <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fd8:	6822      	ldr	r2, [r4, #0]
 8002fda:	6993      	ldr	r3, [r2, #24]
 8002fdc:	f023 0310 	bic.w	r3, r3, #16
 8002fe0:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8002fe2:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002fe6:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fea:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d069      	beq.n	80030c6 <HAL_PCD_IRQHandler+0x142>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ff2:	2b06      	cmp	r3, #6
 8002ff4:	f000 808d 	beq.w	8003112 <HAL_PCD_IRQHandler+0x18e>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ff8:	6822      	ldr	r2, [r4, #0]
 8002ffa:	6993      	ldr	r3, [r2, #24]
 8002ffc:	f043 0310 	orr.w	r3, r3, #16
 8003000:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003002:	6820      	ldr	r0, [r4, #0]
 8003004:	f003 fbc0 	bl	8006788 <USB_ReadInterrupts>
 8003008:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800300c:	f040 8093 	bne.w	8003136 <HAL_PCD_IRQHandler+0x1b2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003010:	6820      	ldr	r0, [r4, #0]
 8003012:	f003 fbb9 	bl	8006788 <USB_ReadInterrupts>
 8003016:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800301a:	f040 80fc 	bne.w	8003216 <HAL_PCD_IRQHandler+0x292>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800301e:	6820      	ldr	r0, [r4, #0]
 8003020:	f003 fbb2 	bl	8006788 <USB_ReadInterrupts>
 8003024:	2800      	cmp	r0, #0
 8003026:	f2c0 817f 	blt.w	8003328 <HAL_PCD_IRQHandler+0x3a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800302a:	6820      	ldr	r0, [r4, #0]
 800302c:	f003 fbac 	bl	8006788 <USB_ReadInterrupts>
 8003030:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8003034:	d009      	beq.n	800304a <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f013 0f01 	tst.w	r3, #1
 800303c:	f040 818c 	bne.w	8003358 <HAL_PCD_IRQHandler+0x3d4>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003040:	6822      	ldr	r2, [r4, #0]
 8003042:	6953      	ldr	r3, [r2, #20]
 8003044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003048:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800304a:	6820      	ldr	r0, [r4, #0]
 800304c:	f003 fb9c 	bl	8006788 <USB_ReadInterrupts>
 8003050:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8003054:	d015      	beq.n	8003082 <HAL_PCD_IRQHandler+0xfe>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003056:	6822      	ldr	r2, [r4, #0]
 8003058:	6953      	ldr	r3, [r2, #20]
 800305a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800305e:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8003060:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 817b 	bne.w	8003360 <HAL_PCD_IRQHandler+0x3dc>
        hpcd->LPM_State = LPM_L1;
 800306a:	2101      	movs	r1, #1
 800306c:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003074:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8003078:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800307c:	4620      	mov	r0, r4
 800307e:	f008 fa1d 	bl	800b4bc <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003082:	6820      	ldr	r0, [r4, #0]
 8003084:	f003 fb80 	bl	8006788 <USB_ReadInterrupts>
 8003088:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800308c:	f040 816c 	bne.w	8003368 <HAL_PCD_IRQHandler+0x3e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003090:	6820      	ldr	r0, [r4, #0]
 8003092:	f003 fb79 	bl	8006788 <USB_ReadInterrupts>
 8003096:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800309a:	f040 81b9 	bne.w	8003410 <HAL_PCD_IRQHandler+0x48c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800309e:	6820      	ldr	r0, [r4, #0]
 80030a0:	f003 fb72 	bl	8006788 <USB_ReadInterrupts>
 80030a4:	f010 0f08 	tst.w	r0, #8
 80030a8:	f040 81ca 	bne.w	8003440 <HAL_PCD_IRQHandler+0x4bc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80030ac:	6820      	ldr	r0, [r4, #0]
 80030ae:	f003 fb6b 	bl	8006788 <USB_ReadInterrupts>
 80030b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80030b6:	f000 81dd 	beq.w	8003474 <HAL_PCD_IRQHandler+0x4f0>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80030ba:	69ab      	ldr	r3, [r5, #24]
 80030bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c0:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030c2:	2601      	movs	r6, #1
 80030c4:	e1c6      	b.n	8003454 <HAL_PCD_IRQHandler+0x4d0>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80030ca:	ea18 0f03 	tst.w	r8, r3
 80030ce:	d093      	beq.n	8002ff8 <HAL_PCD_IRQHandler+0x74>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030d0:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	eb09 0ac9 	add.w	sl, r9, r9, lsl #3
 80030de:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 80030e2:	f3c8 120a 	ubfx	r2, r8, #4, #11
 80030e6:	f8da 128c 	ldr.w	r1, [sl, #652]	; 0x28c
 80030ea:	4628      	mov	r0, r5
 80030ec:	f003 faa2 	bl	8006634 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030f0:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 80030f4:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
 80030f8:	445b      	add	r3, fp
 80030fa:	f8ca 328c 	str.w	r3, [sl, #652]	; 0x28c
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030fe:	9b01      	ldr	r3, [sp, #4]
 8003100:	444b      	add	r3, r9
 8003102:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003106:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800310a:	445b      	add	r3, fp
 800310c:	f8ca 329c 	str.w	r3, [sl, #668]	; 0x29c
 8003110:	e772      	b.n	8002ff8 <HAL_PCD_IRQHandler+0x74>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003112:	2208      	movs	r2, #8
 8003114:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 8003118:	4628      	mov	r0, r5
 800311a:	f003 fa8b 	bl	8006634 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800311e:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8003122:	eb09 02c9 	add.w	r2, r9, r9, lsl #3
 8003126:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800312a:	f8d2 329c 	ldr.w	r3, [r2, #668]	; 0x29c
 800312e:	4443      	add	r3, r8
 8003130:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 8003134:	e760      	b.n	8002ff8 <HAL_PCD_IRQHandler+0x74>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003136:	6820      	ldr	r0, [r4, #0]
 8003138:	f003 fb2a 	bl	8006790 <USB_ReadDevAllOutEpInterrupt>
 800313c:	4680      	mov	r8, r0
      epnum = 0U;
 800313e:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8003140:	e035      	b.n	80031ae <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003142:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003146:	2201      	movs	r2, #1
 8003148:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800314c:	4649      	mov	r1, r9
 800314e:	4620      	mov	r0, r4
 8003150:	f7ff fcdc 	bl	8002b0c <PCD_EP_OutXfrComplete_int>
 8003154:	e03c      	b.n	80031d0 <HAL_PCD_IRQHandler+0x24c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003156:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800315a:	2208      	movs	r2, #8
 800315c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003160:	4649      	mov	r1, r9
 8003162:	4620      	mov	r0, r4
 8003164:	f7ff fd54 	bl	8002c10 <PCD_EP_OutSetupPacket_int>
 8003168:	e035      	b.n	80031d6 <HAL_PCD_IRQHandler+0x252>
            if (ep->is_iso_incomplete == 1U)
 800316a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800316e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003172:	f893 327f 	ldrb.w	r3, [r3, #639]	; 0x27f
 8003176:	2b01      	cmp	r3, #1
 8003178:	d041      	beq.n	80031fe <HAL_PCD_IRQHandler+0x27a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800317a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800317e:	2202      	movs	r2, #2
 8003180:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003184:	f01a 0f20 	tst.w	sl, #32
 8003188:	d004      	beq.n	8003194 <HAL_PCD_IRQHandler+0x210>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800318a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800318e:	2220      	movs	r2, #32
 8003190:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003194:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8003198:	d005      	beq.n	80031a6 <HAL_PCD_IRQHandler+0x222>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800319a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800319e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031a2:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
        epnum++;
 80031a6:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80031aa:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80031ae:	f1b8 0f00 	cmp.w	r8, #0
 80031b2:	f43f af2d 	beq.w	8003010 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 80031b6:	f018 0f01 	tst.w	r8, #1
 80031ba:	d0f4      	beq.n	80031a6 <HAL_PCD_IRQHandler+0x222>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031bc:	fa5f fb89 	uxtb.w	fp, r9
 80031c0:	4659      	mov	r1, fp
 80031c2:	6820      	ldr	r0, [r4, #0]
 80031c4:	f003 faf4 	bl	80067b0 <USB_ReadDevOutEPInterrupt>
 80031c8:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031ca:	f010 0f01 	tst.w	r0, #1
 80031ce:	d1b8      	bne.n	8003142 <HAL_PCD_IRQHandler+0x1be>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031d0:	f01a 0f08 	tst.w	sl, #8
 80031d4:	d1bf      	bne.n	8003156 <HAL_PCD_IRQHandler+0x1d2>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031d6:	f01a 0f10 	tst.w	sl, #16
 80031da:	d004      	beq.n	80031e6 <HAL_PCD_IRQHandler+0x262>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031dc:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80031e0:	2210      	movs	r2, #16
 80031e2:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031e6:	f01a 0f02 	tst.w	sl, #2
 80031ea:	d0cb      	beq.n	8003184 <HAL_PCD_IRQHandler+0x200>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031ec:	696b      	ldr	r3, [r5, #20]
 80031ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80031f2:	d0ba      	beq.n	800316a <HAL_PCD_IRQHandler+0x1e6>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	e7b5      	b.n	800316a <HAL_PCD_IRQHandler+0x1e6>
              ep->is_iso_incomplete = 0U;
 80031fe:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003202:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003206:	2200      	movs	r2, #0
 8003208:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800320c:	4659      	mov	r1, fp
 800320e:	4620      	mov	r0, r4
 8003210:	f008 f8ea 	bl	800b3e8 <HAL_PCD_ISOOUTIncompleteCallback>
 8003214:	e7b1      	b.n	800317a <HAL_PCD_IRQHandler+0x1f6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003216:	6820      	ldr	r0, [r4, #0]
 8003218:	f003 fac2 	bl	80067a0 <USB_ReadDevAllInEpInterrupt>
 800321c:	4680      	mov	r8, r0
      epnum = 0U;
 800321e:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8003220:	e025      	b.n	800326e <HAL_PCD_IRQHandler+0x2ea>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003222:	4659      	mov	r1, fp
 8003224:	4620      	mov	r0, r4
 8003226:	f008 f899 	bl	800b35c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800322a:	f01a 0f08 	tst.w	sl, #8
 800322e:	d004      	beq.n	800323a <HAL_PCD_IRQHandler+0x2b6>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003230:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003234:	2208      	movs	r2, #8
 8003236:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800323a:	f01a 0f10 	tst.w	sl, #16
 800323e:	d004      	beq.n	800324a <HAL_PCD_IRQHandler+0x2c6>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003240:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003244:	2210      	movs	r2, #16
 8003246:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800324a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800324e:	d004      	beq.n	800325a <HAL_PCD_IRQHandler+0x2d6>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003250:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003254:	2240      	movs	r2, #64	; 0x40
 8003256:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800325a:	f01a 0f02 	tst.w	sl, #2
 800325e:	d140      	bne.n	80032e2 <HAL_PCD_IRQHandler+0x35e>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003260:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8003264:	d15b      	bne.n	800331e <HAL_PCD_IRQHandler+0x39a>
        epnum++;
 8003266:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800326a:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800326e:	f1b8 0f00 	cmp.w	r8, #0
 8003272:	f43f aed4 	beq.w	800301e <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003276:	f018 0f01 	tst.w	r8, #1
 800327a:	d0f4      	beq.n	8003266 <HAL_PCD_IRQHandler+0x2e2>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800327c:	fa5f fb89 	uxtb.w	fp, r9
 8003280:	4659      	mov	r1, fp
 8003282:	6820      	ldr	r0, [r4, #0]
 8003284:	f003 fa9d 	bl	80067c2 <USB_ReadDevInEPInterrupt>
 8003288:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800328a:	f010 0f01 	tst.w	r0, #1
 800328e:	d0cc      	beq.n	800322a <HAL_PCD_IRQHandler+0x2a6>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003290:	f009 020f 	and.w	r2, r9, #15
 8003294:	2101      	movs	r1, #1
 8003296:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	ea23 0302 	bic.w	r3, r3, r2
 80032a0:	637b      	str	r3, [r7, #52]	; 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032a2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80032a6:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 80032aa:	6923      	ldr	r3, [r4, #16]
 80032ac:	428b      	cmp	r3, r1
 80032ae:	d1b8      	bne.n	8003222 <HAL_PCD_IRQHandler+0x29e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80032b0:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80032b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80032b8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80032ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032bc:	440a      	add	r2, r1
 80032be:	64da      	str	r2, [r3, #76]	; 0x4c
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032c0:	f1b9 0f00 	cmp.w	r9, #0
 80032c4:	d1ad      	bne.n	8003222 <HAL_PCD_IRQHandler+0x29e>
 80032c6:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80032ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1a6      	bne.n	8003222 <HAL_PCD_IRQHandler+0x29e>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032d4:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80032d8:	2101      	movs	r1, #1
 80032da:	6820      	ldr	r0, [r4, #0]
 80032dc:	f003 fac8 	bl	8006870 <USB_EP0_OutStart>
 80032e0:	e79f      	b.n	8003222 <HAL_PCD_IRQHandler+0x29e>
            (void)USB_FlushTxFifo(USBx, epnum);
 80032e2:	4649      	mov	r1, r9
 80032e4:	4628      	mov	r0, r5
 80032e6:	f002 fd9b 	bl	8005e20 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 80032ea:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80032ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80032f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d005      	beq.n	8003306 <HAL_PCD_IRQHandler+0x382>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032fa:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80032fe:	2202      	movs	r2, #2
 8003300:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8003304:	e7ac      	b.n	8003260 <HAL_PCD_IRQHandler+0x2dc>
              ep->is_iso_incomplete = 0U;
 8003306:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800330a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003314:	4659      	mov	r1, fp
 8003316:	4620      	mov	r0, r4
 8003318:	f008 f86c 	bl	800b3f4 <HAL_PCD_ISOINIncompleteCallback>
 800331c:	e7ed      	b.n	80032fa <HAL_PCD_IRQHandler+0x376>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800331e:	4649      	mov	r1, r9
 8003320:	4620      	mov	r0, r4
 8003322:	f7ff facb 	bl	80028bc <PCD_WriteEmptyTxFifo>
 8003326:	e79e      	b.n	8003266 <HAL_PCD_IRQHandler+0x2e2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8003330:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8003334:	2b01      	cmp	r3, #1
 8003336:	d008      	beq.n	800334a <HAL_PCD_IRQHandler+0x3c6>
        HAL_PCD_ResumeCallback(hpcd);
 8003338:	4620      	mov	r0, r4
 800333a:	f008 f84f 	bl	800b3dc <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800333e:	6822      	ldr	r2, [r4, #0]
 8003340:	6953      	ldr	r3, [r2, #20]
 8003342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003346:	6153      	str	r3, [r2, #20]
 8003348:	e66f      	b.n	800302a <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 800334a:	2100      	movs	r1, #0
 800334c:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003350:	4620      	mov	r0, r4
 8003352:	f008 f8b3 	bl	800b4bc <HAL_PCDEx_LPM_Callback>
 8003356:	e7f2      	b.n	800333e <HAL_PCD_IRQHandler+0x3ba>
        HAL_PCD_SuspendCallback(hpcd);
 8003358:	4620      	mov	r0, r4
 800335a:	f008 f827 	bl	800b3ac <HAL_PCD_SuspendCallback>
 800335e:	e66f      	b.n	8003040 <HAL_PCD_IRQHandler+0xbc>
        HAL_PCD_SuspendCallback(hpcd);
 8003360:	4620      	mov	r0, r4
 8003362:	f008 f823 	bl	800b3ac <HAL_PCD_SuspendCallback>
 8003366:	e68c      	b.n	8003082 <HAL_PCD_IRQHandler+0xfe>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003370:	2110      	movs	r1, #16
 8003372:	6820      	ldr	r0, [r4, #0]
 8003374:	f002 fd54 	bl	8005e20 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003378:	e01a      	b.n	80033b0 <HAL_PCD_IRQHandler+0x42c>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800337a:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800337e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8003382:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003386:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800338a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800338e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003392:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003396:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800339a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800339e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033a2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80033a6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80033aa:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ae:	3601      	adds	r6, #1
 80033b0:	6863      	ldr	r3, [r4, #4]
 80033b2:	42b3      	cmp	r3, r6
 80033b4:	d8e1      	bhi.n	800337a <HAL_PCD_IRQHandler+0x3f6>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033bc:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033c0:	b1db      	cbz	r3, 80033fa <HAL_PCD_IRQHandler+0x476>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033c6:	f043 030b 	orr.w	r3, r3, #11
 80033ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d0:	f043 030b 	orr.w	r3, r3, #11
 80033d4:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033d6:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80033da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033de:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033e2:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80033e6:	7c21      	ldrb	r1, [r4, #16]
 80033e8:	6820      	ldr	r0, [r4, #0]
 80033ea:	f003 fa41 	bl	8006870 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033ee:	6822      	ldr	r2, [r4, #0]
 80033f0:	6953      	ldr	r3, [r2, #20]
 80033f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f6:	6153      	str	r3, [r2, #20]
 80033f8:	e64a      	b.n	8003090 <HAL_PCD_IRQHandler+0x10c>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003400:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003404:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f043 030b 	orr.w	r3, r3, #11
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	e7e2      	b.n	80033d6 <HAL_PCD_IRQHandler+0x452>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003410:	6820      	ldr	r0, [r4, #0]
 8003412:	f003 fa1d 	bl	8006850 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003416:	6820      	ldr	r0, [r4, #0]
 8003418:	f002 fe1c 	bl	8006054 <USB_GetDevSpeed>
 800341c:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800341e:	6826      	ldr	r6, [r4, #0]
 8003420:	f000 f9a2 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 8003424:	4601      	mov	r1, r0
 8003426:	7b22      	ldrb	r2, [r4, #12]
 8003428:	4630      	mov	r0, r6
 800342a:	f002 fc7b 	bl	8005d24 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800342e:	4620      	mov	r0, r4
 8003430:	f007 ffa5 	bl	800b37e <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003434:	6822      	ldr	r2, [r4, #0]
 8003436:	6953      	ldr	r3, [r2, #20]
 8003438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800343c:	6153      	str	r3, [r2, #20]
 800343e:	e62e      	b.n	800309e <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_SOFCallback(hpcd);
 8003440:	4620      	mov	r0, r4
 8003442:	f007 ff96 	bl	800b372 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003446:	6822      	ldr	r2, [r4, #0]
 8003448:	6953      	ldr	r3, [r2, #20]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	6153      	str	r3, [r2, #20]
 8003450:	e62c      	b.n	80030ac <HAL_PCD_IRQHandler+0x128>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003452:	3601      	adds	r6, #1
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	42b3      	cmp	r3, r6
 8003458:	d90c      	bls.n	8003474 <HAL_PCD_IRQHandler+0x4f0>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800345a:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800345e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003462:	f893 327f 	ldrb.w	r3, [r3, #639]	; 0x27f
 8003466:	2b01      	cmp	r3, #1
 8003468:	d1f3      	bne.n	8003452 <HAL_PCD_IRQHandler+0x4ce>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800346a:	b2f1      	uxtb	r1, r6
 800346c:	4620      	mov	r0, r4
 800346e:	f7ff fd6f 	bl	8002f50 <HAL_PCD_EP_Abort>
 8003472:	e7ee      	b.n	8003452 <HAL_PCD_IRQHandler+0x4ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003474:	6820      	ldr	r0, [r4, #0]
 8003476:	f003 f987 	bl	8006788 <USB_ReadInterrupts>
 800347a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800347e:	d127      	bne.n	80034d0 <HAL_PCD_IRQHandler+0x54c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003480:	6820      	ldr	r0, [r4, #0]
 8003482:	f003 f981 	bl	8006788 <USB_ReadInterrupts>
 8003486:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800348a:	d05b      	beq.n	8003544 <HAL_PCD_IRQHandler+0x5c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800348c:	2301      	movs	r3, #1
 800348e:	e028      	b.n	80034e2 <HAL_PCD_IRQHandler+0x55e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003490:	3601      	adds	r6, #1
 8003492:	6863      	ldr	r3, [r4, #4]
 8003494:	42b3      	cmp	r3, r6
 8003496:	d91d      	bls.n	80034d4 <HAL_PCD_IRQHandler+0x550>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003498:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800349c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034a0:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80034a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80034a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d1ef      	bne.n	8003490 <HAL_PCD_IRQHandler+0x50c>
 80034b0:	2a00      	cmp	r2, #0
 80034b2:	daed      	bge.n	8003490 <HAL_PCD_IRQHandler+0x50c>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034b4:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80034b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034c2:	f066 017f 	orn	r1, r6, #127	; 0x7f
 80034c6:	b2c9      	uxtb	r1, r1
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff fd41 	bl	8002f50 <HAL_PCD_EP_Abort>
 80034ce:	e7df      	b.n	8003490 <HAL_PCD_IRQHandler+0x50c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034d0:	2601      	movs	r6, #1
 80034d2:	e7de      	b.n	8003492 <HAL_PCD_IRQHandler+0x50e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034d4:	6822      	ldr	r2, [r4, #0]
 80034d6:	6953      	ldr	r3, [r2, #20]
 80034d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034dc:	6153      	str	r3, [r2, #20]
 80034de:	e7cf      	b.n	8003480 <HAL_PCD_IRQHandler+0x4fc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e0:	3301      	adds	r3, #1
 80034e2:	6862      	ldr	r2, [r4, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d928      	bls.n	800353a <HAL_PCD_IRQHandler+0x5b6>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034e8:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80034ec:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034f0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80034f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80034f8:	f892 2280 	ldrb.w	r2, [r2, #640]	; 0x280
 80034fc:	2a01      	cmp	r2, #1
 80034fe:	d1ef      	bne.n	80034e0 <HAL_PCD_IRQHandler+0x55c>
 8003500:	2900      	cmp	r1, #0
 8003502:	daed      	bge.n	80034e0 <HAL_PCD_IRQHandler+0x55c>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003504:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
 8003508:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800350c:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003510:	4291      	cmp	r1, r2
 8003512:	d1e5      	bne.n	80034e0 <HAL_PCD_IRQHandler+0x55c>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003514:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8003518:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800351c:	2101      	movs	r1, #1
 800351e:	f882 127f 	strb.w	r1, [r2, #639]	; 0x27f
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003522:	69aa      	ldr	r2, [r5, #24]
 8003524:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003528:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800352a:	696a      	ldr	r2, [r5, #20]
 800352c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003530:	d1d6      	bne.n	80034e0 <HAL_PCD_IRQHandler+0x55c>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003538:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800353a:	6822      	ldr	r2, [r4, #0]
 800353c:	6953      	ldr	r3, [r2, #20]
 800353e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003542:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003544:	6820      	ldr	r0, [r4, #0]
 8003546:	f003 f91f 	bl	8006788 <USB_ReadInterrupts>
 800354a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800354e:	d110      	bne.n	8003572 <HAL_PCD_IRQHandler+0x5ee>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003550:	6820      	ldr	r0, [r4, #0]
 8003552:	f003 f919 	bl	8006788 <USB_ReadInterrupts>
 8003556:	f010 0f04 	tst.w	r0, #4
 800355a:	f43f ad1c 	beq.w	8002f96 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003562:	f015 0f04 	tst.w	r5, #4
 8003566:	d10d      	bne.n	8003584 <HAL_PCD_IRQHandler+0x600>
      hpcd->Instance->GOTGINT |= RegVal;
 8003568:	6822      	ldr	r2, [r4, #0]
 800356a:	6853      	ldr	r3, [r2, #4]
 800356c:	432b      	orrs	r3, r5
 800356e:	6053      	str	r3, [r2, #4]
 8003570:	e511      	b.n	8002f96 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8003572:	4620      	mov	r0, r4
 8003574:	f007 ff44 	bl	800b400 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003578:	6822      	ldr	r2, [r4, #0]
 800357a:	6953      	ldr	r3, [r2, #20]
 800357c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003580:	6153      	str	r3, [r2, #20]
 8003582:	e7e5      	b.n	8003550 <HAL_PCD_IRQHandler+0x5cc>
        HAL_PCD_DisconnectCallback(hpcd);
 8003584:	4620      	mov	r0, r4
 8003586:	f007 ff41 	bl	800b40c <HAL_PCD_DisconnectCallback>
 800358a:	e7ed      	b.n	8003568 <HAL_PCD_IRQHandler+0x5e4>

0800358c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800358c:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800358e:	6804      	ldr	r4, [r0, #0]
 8003590:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003592:	b931      	cbnz	r1, 80035a2 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003594:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003598:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800359a:	2000      	movs	r0, #0
 800359c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80035a6:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	e008      	b.n	80035c0 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035ae:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80035b2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80035b6:	6849      	ldr	r1, [r1, #4]
 80035b8:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80035bc:	3301      	adds	r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f10c 31ff 	add.w	r1, ip, #4294967295
 80035c4:	428b      	cmp	r3, r1
 80035c6:	d3f2      	bcc.n	80035ae <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035c8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80035cc:	f10c 013f 	add.w	r1, ip, #63	; 0x3f
 80035d0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80035d4:	6060      	str	r0, [r4, #4]
 80035d6:	e7e0      	b.n	800359a <HAL_PCDEx_SetTxFiFo+0xe>

080035d8 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80035d8:	6803      	ldr	r3, [r0, #0]
 80035da:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 80035dc:	2000      	movs	r0, #0
 80035de:	4770      	bx	lr

080035e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035e0:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e2:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 80035e4:	2101      	movs	r1, #1
 80035e6:	f8c0 1500 	str.w	r1, [r0, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80035ea:	2000      	movs	r0, #0
 80035ec:	f883 04f4 	strb.w	r0, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035f0:	6993      	ldr	r3, [r2, #24]
 80035f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035f6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035f8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80035fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fe:	f043 0303 	orr.w	r3, r3, #3
 8003602:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003604:	4770      	bx	lr
	...

08003608 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003608:	2800      	cmp	r0, #0
 800360a:	f000 809b 	beq.w	8003744 <HAL_RCC_ClockConfig+0x13c>
{
 800360e:	b570      	push	{r4, r5, r6, lr}
 8003610:	460d      	mov	r5, r1
 8003612:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003614:	4b4f      	ldr	r3, [pc, #316]	; (8003754 <HAL_RCC_ClockConfig+0x14c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	428b      	cmp	r3, r1
 800361e:	d208      	bcs.n	8003632 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003620:	b2cb      	uxtb	r3, r1
 8003622:	4a4c      	ldr	r2, [pc, #304]	; (8003754 <HAL_RCC_ClockConfig+0x14c>)
 8003624:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	6813      	ldr	r3, [r2, #0]
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	428b      	cmp	r3, r1
 800362e:	f040 808b 	bne.w	8003748 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	f013 0f02 	tst.w	r3, #2
 8003638:	d017      	beq.n	800366a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363a:	f013 0f04 	tst.w	r3, #4
 800363e:	d004      	beq.n	800364a <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003640:	4a45      	ldr	r2, [pc, #276]	; (8003758 <HAL_RCC_ClockConfig+0x150>)
 8003642:	6893      	ldr	r3, [r2, #8]
 8003644:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003648:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	f013 0f08 	tst.w	r3, #8
 8003650:	d004      	beq.n	800365c <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003652:	4a41      	ldr	r2, [pc, #260]	; (8003758 <HAL_RCC_ClockConfig+0x150>)
 8003654:	6893      	ldr	r3, [r2, #8]
 8003656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800365a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800365c:	4a3e      	ldr	r2, [pc, #248]	; (8003758 <HAL_RCC_ClockConfig+0x150>)
 800365e:	6893      	ldr	r3, [r2, #8]
 8003660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003664:	68a1      	ldr	r1, [r4, #8]
 8003666:	430b      	orrs	r3, r1
 8003668:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	f013 0f01 	tst.w	r3, #1
 8003670:	d032      	beq.n	80036d8 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003672:	6863      	ldr	r3, [r4, #4]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d021      	beq.n	80036bc <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003678:	1e9a      	subs	r2, r3, #2
 800367a:	2a01      	cmp	r2, #1
 800367c:	d925      	bls.n	80036ca <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	4a36      	ldr	r2, [pc, #216]	; (8003758 <HAL_RCC_ClockConfig+0x150>)
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	f012 0f02 	tst.w	r2, #2
 8003686:	d061      	beq.n	800374c <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003688:	4933      	ldr	r1, [pc, #204]	; (8003758 <HAL_RCC_ClockConfig+0x150>)
 800368a:	688a      	ldr	r2, [r1, #8]
 800368c:	f022 0203 	bic.w	r2, r2, #3
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003694:	f7fe fcbe 	bl	8002014 <HAL_GetTick>
 8003698:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b2f      	ldr	r3, [pc, #188]	; (8003758 <HAL_RCC_ClockConfig+0x150>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80036a8:	d016      	beq.n	80036d8 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036aa:	f7fe fcb3 	bl	8002014 <HAL_GetTick>
 80036ae:	1b80      	subs	r0, r0, r6
 80036b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80036b4:	4298      	cmp	r0, r3
 80036b6:	d9f0      	bls.n	800369a <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 80036b8:	2003      	movs	r0, #3
 80036ba:	e042      	b.n	8003742 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036bc:	4a26      	ldr	r2, [pc, #152]	; (8003758 <HAL_RCC_ClockConfig+0x150>)
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80036c4:	d1e0      	bne.n	8003688 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80036c6:	2001      	movs	r0, #1
 80036c8:	e03b      	b.n	8003742 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4a23      	ldr	r2, [pc, #140]	; (8003758 <HAL_RCC_ClockConfig+0x150>)
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80036d2:	d1d9      	bne.n	8003688 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80036d4:	2001      	movs	r0, #1
 80036d6:	e034      	b.n	8003742 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d8:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <HAL_RCC_ClockConfig+0x14c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	42ab      	cmp	r3, r5
 80036e2:	d907      	bls.n	80036f4 <HAL_RCC_ClockConfig+0xec>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e4:	b2ea      	uxtb	r2, r5
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_RCC_ClockConfig+0x14c>)
 80036e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	42ab      	cmp	r3, r5
 80036f2:	d12d      	bne.n	8003750 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	f013 0f04 	tst.w	r3, #4
 80036fa:	d006      	beq.n	800370a <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4a16      	ldr	r2, [pc, #88]	; (8003758 <HAL_RCC_ClockConfig+0x150>)
 80036fe:	6893      	ldr	r3, [r2, #8]
 8003700:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003704:	68e1      	ldr	r1, [r4, #12]
 8003706:	430b      	orrs	r3, r1
 8003708:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	f013 0f08 	tst.w	r3, #8
 8003710:	d007      	beq.n	8003722 <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003712:	4a11      	ldr	r2, [pc, #68]	; (8003758 <HAL_RCC_ClockConfig+0x150>)
 8003714:	6893      	ldr	r3, [r2, #8]
 8003716:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800371a:	6921      	ldr	r1, [r4, #16]
 800371c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003720:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003722:	f000 fa61 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003726:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <HAL_RCC_ClockConfig+0x150>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800372e:	4a0b      	ldr	r2, [pc, #44]	; (800375c <HAL_RCC_ClockConfig+0x154>)
 8003730:	5cd3      	ldrb	r3, [r2, r3]
 8003732:	40d8      	lsrs	r0, r3
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_ClockConfig+0x158>)
 8003736:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_RCC_ClockConfig+0x15c>)
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	f7fe fc1e 	bl	8001f7c <HAL_InitTick>

  return HAL_OK;
 8003740:	2000      	movs	r0, #0
}
 8003742:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003744:	2001      	movs	r0, #1
}
 8003746:	4770      	bx	lr
      return HAL_ERROR;
 8003748:	2001      	movs	r0, #1
 800374a:	e7fa      	b.n	8003742 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800374c:	2001      	movs	r0, #1
 800374e:	e7f8      	b.n	8003742 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003750:	2001      	movs	r0, #1
 8003752:	e7f6      	b.n	8003742 <HAL_RCC_ClockConfig+0x13a>
 8003754:	40023c00 	.word	0x40023c00
 8003758:	40023800 	.word	0x40023800
 800375c:	0800c2e8 	.word	0x0800c2e8
 8003760:	20000134 	.word	0x20000134
 8003764:	2000013c 	.word	0x2000013c

08003768 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003768:	4b01      	ldr	r3, [pc, #4]	; (8003770 <HAL_RCC_GetHCLKFreq+0x8>)
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000134 	.word	0x20000134

08003774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003776:	b083      	sub	sp, #12
 8003778:	4604      	mov	r4, r0

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800377a:	6806      	ldr	r6, [r0, #0]
 800377c:	f016 0601 	ands.w	r6, r6, #1
 8003780:	d00d      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003782:	4a96      	ldr	r2, [pc, #600]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003784:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003788:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800378c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800378e:	430b      	orrs	r3, r1
 8003790:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003794:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 809b 	beq.w	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  uint32_t plli2sused = 0U;
 800379c:	2600      	movs	r6, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	f013 0f02 	tst.w	r3, #2
 80037a4:	d00b      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80037a6:	4a8d      	ldr	r2, [pc, #564]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037a8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80037ac:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80037b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80037b2:	430b      	orrs	r3, r1
 80037b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80037b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80037ba:	b903      	cbnz	r3, 80037be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1U;
 80037bc:	2601      	movs	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80037be:	6825      	ldr	r5, [r4, #0]
 80037c0:	f015 0504 	ands.w	r5, r5, #4
 80037c4:	d00f      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037c6:	4a85      	ldr	r2, [pc, #532]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037c8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80037cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80037d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80037d2:	430b      	orrs	r3, r1
 80037d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80037d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037de:	d07a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d07a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x166>
  uint32_t pllsaiused = 0U;
 80037e4:	2500      	movs	r5, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	f013 0f08 	tst.w	r3, #8
 80037ec:	d00e      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037ee:	4a7b      	ldr	r2, [pc, #492]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037f0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80037f4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80037f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037fa:	430b      	orrs	r3, r1
 80037fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003800:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003806:	d06a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003808:	b903      	cbnz	r3, 800380c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      pllsaiused = 1U;
 800380a:	2501      	movs	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	f013 0f20 	tst.w	r3, #32
 8003812:	d166      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	f013 0f10 	tst.w	r3, #16
 800381a:	d004      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800381c:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8003820:	4b6f      	ldr	r3, [pc, #444]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003822:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	f013 0f80 	tst.w	r3, #128	; 0x80
 800382c:	d008      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800382e:	4a6b      	ldr	r2, [pc, #428]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003830:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003834:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003838:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800383a:	430b      	orrs	r3, r1
 800383c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003846:	d008      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003848:	4a64      	ldr	r2, [pc, #400]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800384a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800384e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003852:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003854:	430b      	orrs	r3, r1
 8003856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003860:	d00d      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003862:	4a5e      	ldr	r2, [pc, #376]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003864:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003868:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800386c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800386e:	430b      	orrs	r3, r1
 8003870:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003874:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800387a:	f000 809b 	beq.w	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003884:	d008      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003886:	4a55      	ldr	r2, [pc, #340]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003888:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003890:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003892:	430b      	orrs	r3, r1
 8003894:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800389e:	d00c      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80038a0:	4a4e      	ldr	r2, [pc, #312]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038a2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80038a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80038aa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80038ac:	430b      	orrs	r3, r1
 80038ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80038b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80038b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b8:	d07e      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80038ba:	2e00      	cmp	r6, #0
 80038bc:	d17c      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c4:	d078      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80038c6:	2d01      	cmp	r5, #1
 80038c8:	f000 8125 	beq.w	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80038cc:	2000      	movs	r0, #0
}
 80038ce:	b003      	add	sp, #12
 80038d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1U;
 80038d2:	2601      	movs	r6, #1
 80038d4:	e763      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1U;
 80038d6:	2601      	movs	r6, #1
 80038d8:	e782      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      pllsaiused = 1U;
 80038da:	2501      	movs	r5, #1
 80038dc:	e783      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      plli2sused = 1U;
 80038de:	2601      	movs	r6, #1
 80038e0:	e792      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x94>
    __HAL_RCC_PWR_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	4b3d      	ldr	r3, [pc, #244]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80038fa:	4a3a      	ldr	r2, [pc, #232]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003902:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003904:	f7fe fb86 	bl	8002014 <HAL_GetTick>
 8003908:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800390a:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003912:	d106      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003914:	f7fe fb7e 	bl	8002014 <HAL_GetTick>
 8003918:	1bc0      	subs	r0, r0, r7
 800391a:	2802      	cmp	r0, #2
 800391c:	d9f5      	bls.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x196>
        return HAL_TIMEOUT;
 800391e:	2003      	movs	r0, #3
 8003920:	e7d5      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003922:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003926:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800392a:	d014      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800392c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800392e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003932:	429a      	cmp	r2, r3
 8003934:	d00f      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003936:	4b29      	ldr	r3, [pc, #164]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003938:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800393a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800393e:	492a      	ldr	r1, [pc, #168]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003940:	2001      	movs	r0, #1
 8003942:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003946:	2000      	movs	r0, #0
 8003948:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 800394c:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	f013 0f01 	tst.w	r3, #1
 8003954:	d112      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003958:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800395c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003960:	d01d      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003962:	4a1e      	ldr	r2, [pc, #120]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003964:	6893      	ldr	r3, [r2, #8]
 8003966:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800396a:	6093      	str	r3, [r2, #8]
 800396c:	491b      	ldr	r1, [pc, #108]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800396e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003970:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003972:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003976:	4313      	orrs	r3, r2
 8003978:	670b      	str	r3, [r1, #112]	; 0x70
 800397a:	e74b      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        tickstart = HAL_GetTick();
 800397c:	f7fe fb4a 	bl	8002014 <HAL_GetTick>
 8003980:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	f013 0f02 	tst.w	r3, #2
 800398a:	d1e4      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800398c:	f7fe fb42 	bl	8002014 <HAL_GetTick>
 8003990:	1bc0      	subs	r0, r0, r7
 8003992:	f241 3388 	movw	r3, #5000	; 0x1388
 8003996:	4298      	cmp	r0, r3
 8003998:	d9f3      	bls.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x20e>
            return HAL_TIMEOUT;
 800399a:	2003      	movs	r0, #3
 800399c:	e797      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800399e:	490f      	ldr	r1, [pc, #60]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039a0:	688a      	ldr	r2, [r1, #8]
 80039a2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80039a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
 80039b2:	e7db      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      pllsaiused = 1U;
 80039b4:	2501      	movs	r5, #1
 80039b6:	e762      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_PLLI2S_DISABLE();
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80039be:	f7fe fb29 	bl	8002014 <HAL_GetTick>
 80039c2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80039cc:	d00e      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039ce:	f7fe fb21 	bl	8002014 <HAL_GetTick>
 80039d2:	1b80      	subs	r0, r0, r6
 80039d4:	2802      	cmp	r0, #2
 80039d6:	d9f5      	bls.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x250>
        return HAL_TIMEOUT;
 80039d8:	2003      	movs	r0, #3
 80039da:	e778      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80039dc:	40023800 	.word	0x40023800
 80039e0:	42471000 	.word	0x42471000
 80039e4:	40007000 	.word	0x40007000
 80039e8:	42470000 	.word	0x42470000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	f013 0f01 	tst.w	r3, #1
 80039f2:	d001      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80039f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80039f6:	b122      	cbz	r2, 8003a02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80039f8:	f013 0f02 	tst.w	r3, #2
 80039fc:	d015      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80039fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a00:	b99b      	cbnz	r3, 8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a02:	4a77      	ldr	r2, [pc, #476]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a04:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a08:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a0c:	6863      	ldr	r3, [r4, #4]
 8003a0e:	68a6      	ldr	r6, [r4, #8]
 8003a10:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8003a14:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8003a18:	4303      	orrs	r3, r0
 8003a1a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	6961      	ldr	r1, [r4, #20]
 8003a22:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003a26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	f013 0f04 	tst.w	r3, #4
 8003a30:	d003      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8003a32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003a34:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003a38:	d006      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003a3a:	f013 0f08 	tst.w	r3, #8
 8003a3e:	d020      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a46:	d11c      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a48:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a4a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a4e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003a52:	6863      	ldr	r3, [r4, #4]
 8003a54:	68a6      	ldr	r6, [r4, #8]
 8003a56:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8003a5a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8003a5e:	4303      	orrs	r3, r0
 8003a60:	6920      	ldr	r0, [r4, #16]
 8003a62:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003a66:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a70:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003a74:	f023 031f 	bic.w	r3, r3, #31
 8003a78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a7a:	3901      	subs	r1, #1
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003a88:	d003      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8003a8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a90:	d028      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x370>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003a98:	d011      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a9a:	6863      	ldr	r3, [r4, #4]
 8003a9c:	68a2      	ldr	r2, [r4, #8]
 8003a9e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003aa2:	68e2      	ldr	r2, [r4, #12]
 8003aa4:	0852      	lsrs	r2, r2, #1
 8003aa6:	3a01      	subs	r2, #1
 8003aa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003aac:	6922      	ldr	r2, [r4, #16]
 8003aae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003ab2:	6962      	ldr	r2, [r4, #20]
 8003ab4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003ab8:	4a49      	ldr	r2, [pc, #292]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003aba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003abe:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8003ac4:	f7fe faa6 	bl	8002014 <HAL_GetTick>
 8003ac8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aca:	4b45      	ldr	r3, [pc, #276]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003ad2:	f47f aef8 	bne.w	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ad6:	f7fe fa9d 	bl	8002014 <HAL_GetTick>
 8003ada:	1b80      	subs	r0, r0, r6
 8003adc:	2802      	cmp	r0, #2
 8003ade:	d9f4      	bls.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x356>
        return HAL_TIMEOUT;
 8003ae0:	2003      	movs	r0, #3
 8003ae2:	e6f4      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ae4:	483e      	ldr	r0, [pc, #248]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003ae6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8003aea:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8003aee:	3201      	adds	r2, #1
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003af0:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	68a1      	ldr	r1, [r4, #8]
 8003af8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003afc:	68e1      	ldr	r1, [r4, #12]
 8003afe:	0849      	lsrs	r1, r1, #1
 8003b00:	3901      	subs	r1, #1
 8003b02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003b06:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003b0a:	f006 42e0 	and.w	r2, r6, #1879048192	; 0x70000000
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8003b14:	e7bd      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_PLLSAI_DISABLE();
 8003b16:	4b33      	ldr	r3, [pc, #204]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8003b1c:	f7fe fa7a 	bl	8002014 <HAL_GetTick>
 8003b20:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b22:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003b2a:	d006      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b2c:	f7fe fa72 	bl	8002014 <HAL_GetTick>
 8003b30:	1b40      	subs	r0, r0, r5
 8003b32:	2802      	cmp	r0, #2
 8003b34:	d9f5      	bls.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        return HAL_TIMEOUT;
 8003b36:	2003      	movs	r0, #3
 8003b38:	e6c9      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	f013 0f04 	tst.w	r3, #4
 8003b40:	d001      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003b42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003b44:	b122      	cbz	r2, 8003b50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8003b46:	f013 0f08 	tst.w	r3, #8
 8003b4a:	d01a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b4e:	b9c3      	cbnz	r3, 8003b82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003b50:	4a23      	ldr	r2, [pc, #140]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003b52:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003b56:	69a3      	ldr	r3, [r4, #24]
 8003b58:	69e0      	ldr	r0, [r4, #28]
 8003b5a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003b5e:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8003b62:	430b      	orrs	r3, r1
 8003b64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b66:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003b6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b6e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003b72:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003b76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b78:	3901      	subs	r1, #1
 8003b7a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003b7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b88:	d003      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8003b8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b90:	d011      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    __HAL_RCC_PLLSAI_ENABLE();
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8003b98:	f7fe fa3c 	bl	8002014 <HAL_GetTick>
 8003b9c:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003ba6:	d118      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x466>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ba8:	f7fe fa34 	bl	8002014 <HAL_GetTick>
 8003bac:	1b00      	subs	r0, r0, r4
 8003bae:	2802      	cmp	r0, #2
 8003bb0:	d9f5      	bls.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x42a>
        return HAL_TIMEOUT;
 8003bb2:	2003      	movs	r0, #3
 8003bb4:	e68b      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bb6:	480a      	ldr	r0, [pc, #40]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003bb8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003bbc:	69a3      	ldr	r3, [r4, #24]
 8003bbe:	69e2      	ldr	r2, [r4, #28]
 8003bc0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003bc4:	6a22      	ldr	r2, [r4, #32]
 8003bc6:	0852      	lsrs	r2, r2, #1
 8003bc8:	3a01      	subs	r2, #1
 8003bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bce:	f001 6270 	and.w	r2, r1, #251658240	; 0xf000000
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8003bd8:	e7db      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  return HAL_OK;
 8003bda:	2000      	movs	r0, #0
 8003bdc:	e677      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	42470000 	.word	0x42470000

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bea:	4b60      	ldr	r3, [pc, #384]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d007      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x1e>
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d05f      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0xd2>
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCC_GetSysClockFreq+0x1a>
 8003bfe:	485c      	ldr	r0, [pc, #368]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x188>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003c00:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8003c02:	485c      	ldr	r0, [pc, #368]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003c04:	e7fc      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c06:	4b59      	ldr	r3, [pc, #356]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003c14:	d02c      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x88>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c16:	4b55      	ldr	r3, [pc, #340]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c18:	6858      	ldr	r0, [r3, #4]
 8003c1a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003c1e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003c22:	ebbc 0c00 	subs.w	ip, ip, r0
 8003c26:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003c2a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003c2e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003c32:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003c36:	ebb1 010c 	subs.w	r1, r1, ip
 8003c3a:	eb63 030e 	sbc.w	r3, r3, lr
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c44:	00c9      	lsls	r1, r1, #3
 8003c46:	eb11 0c00 	adds.w	ip, r1, r0
 8003c4a:	f143 0300 	adc.w	r3, r3, #0
 8003c4e:	0259      	lsls	r1, r3, #9
 8003c50:	2300      	movs	r3, #0
 8003c52:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8003c56:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8003c5a:	f7fc fb31 	bl	80002c0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c5e:	4b43      	ldr	r3, [pc, #268]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003c66:	3301      	adds	r3, #1
 8003c68:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003c6a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003c6e:	e7c7      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c70:	4b3e      	ldr	r3, [pc, #248]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c72:	6858      	ldr	r0, [r3, #4]
 8003c74:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003c78:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003c7c:	ebbc 0c00 	subs.w	ip, ip, r0
 8003c80:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003c84:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003c88:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003c8c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003c90:	ebb1 010c 	subs.w	r1, r1, ip
 8003c94:	eb63 030e 	sbc.w	r3, r3, lr
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c9e:	00c9      	lsls	r1, r1, #3
 8003ca0:	eb11 0c00 	adds.w	ip, r1, r0
 8003ca4:	f143 0300 	adc.w	r3, r3, #0
 8003ca8:	0299      	lsls	r1, r3, #10
 8003caa:	2300      	movs	r3, #0
 8003cac:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003cb0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003cb4:	f7fc fb04 	bl	80002c0 <__aeabi_uldivmod>
 8003cb8:	e7d1      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x76>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cba:	4b2c      	ldr	r3, [pc, #176]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003cc8:	d02a      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x138>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cca:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003ccc:	6858      	ldr	r0, [r3, #4]
 8003cce:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003cd2:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003cd6:	ebbc 0c00 	subs.w	ip, ip, r0
 8003cda:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003cde:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003ce2:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003ce6:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003cea:	ebb1 010c 	subs.w	r1, r1, ip
 8003cee:	eb63 030e 	sbc.w	r3, r3, lr
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf8:	00c9      	lsls	r1, r1, #3
 8003cfa:	eb11 0c00 	adds.w	ip, r1, r0
 8003cfe:	f143 0300 	adc.w	r3, r3, #0
 8003d02:	0259      	lsls	r1, r3, #9
 8003d04:	2300      	movs	r3, #0
 8003d06:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8003d0a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8003d0e:	f7fc fad7 	bl	80002c0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d12:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8003d1a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003d1e:	e76f      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d20:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d22:	6858      	ldr	r0, [r3, #4]
 8003d24:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003d28:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003d2c:	ebbc 0c00 	subs.w	ip, ip, r0
 8003d30:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003d34:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003d38:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003d3c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003d40:	ebb1 010c 	subs.w	r1, r1, ip
 8003d44:	eb63 030e 	sbc.w	r3, r3, lr
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d4e:	00c9      	lsls	r1, r1, #3
 8003d50:	eb11 0c00 	adds.w	ip, r1, r0
 8003d54:	f143 0300 	adc.w	r3, r3, #0
 8003d58:	0299      	lsls	r1, r3, #10
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003d60:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003d64:	f7fc faac 	bl	80002c0 <__aeabi_uldivmod>
 8003d68:	e7d3      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0x12a>
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	00f42400 	.word	0x00f42400
 8003d74:	007a1200 	.word	0x007a1200

08003d78 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	f000 8201 	beq.w	8004180 <HAL_RCC_OscConfig+0x408>
{
 8003d7e:	b570      	push	{r4, r5, r6, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d84:	6803      	ldr	r3, [r0, #0]
 8003d86:	f013 0f01 	tst.w	r3, #1
 8003d8a:	d041      	beq.n	8003e10 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d8c:	4b99      	ldr	r3, [pc, #612]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 030c 	and.w	r3, r3, #12
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d032      	beq.n	8003dfe <HAL_RCC_OscConfig+0x86>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d98:	4b96      	ldr	r3, [pc, #600]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d027      	beq.n	8003df4 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da4:	4b93      	ldr	r3, [pc, #588]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dac:	2b0c      	cmp	r3, #12
 8003dae:	d059      	beq.n	8003e64 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db0:	6863      	ldr	r3, [r4, #4]
 8003db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db6:	d05b      	beq.n	8003e70 <HAL_RCC_OscConfig+0xf8>
 8003db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dbc:	d05e      	beq.n	8003e7c <HAL_RCC_OscConfig+0x104>
 8003dbe:	4b8d      	ldr	r3, [pc, #564]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd0:	6863      	ldr	r3, [r4, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d05c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd6:	f7fe f91d 	bl	8002014 <HAL_GetTick>
 8003dda:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ddc:	4b85      	ldr	r3, [pc, #532]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003de4:	d114      	bne.n	8003e10 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de6:	f7fe f915 	bl	8002014 <HAL_GetTick>
 8003dea:	1b40      	subs	r0, r0, r5
 8003dec:	2864      	cmp	r0, #100	; 0x64
 8003dee:	d9f5      	bls.n	8003ddc <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8003df0:	2003      	movs	r0, #3
 8003df2:	e1cc      	b.n	800418e <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003df4:	4b7f      	ldr	r3, [pc, #508]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003dfc:	d0d2      	beq.n	8003da4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfe:	4b7d      	ldr	r3, [pc, #500]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e06:	d003      	beq.n	8003e10 <HAL_RCC_OscConfig+0x98>
 8003e08:	6863      	ldr	r3, [r4, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 81ba 	beq.w	8004184 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	f013 0f02 	tst.w	r3, #2
 8003e16:	d060      	beq.n	8003eda <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e18:	4b76      	ldr	r3, [pc, #472]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f013 0f0c 	tst.w	r3, #12
 8003e20:	d04a      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x140>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e22:	4b74      	ldr	r3, [pc, #464]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d03f      	beq.n	8003eae <HAL_RCC_OscConfig+0x136>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2e:	4b71      	ldr	r3, [pc, #452]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d069      	beq.n	8003f0e <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e3a:	68e3      	ldr	r3, [r4, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d075      	beq.n	8003f2c <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e40:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_RCC_OscConfig+0x280>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fe f8e5 	bl	8002014 <HAL_GetTick>
 8003e4a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4c:	4b69      	ldr	r3, [pc, #420]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f013 0f02 	tst.w	r3, #2
 8003e54:	d161      	bne.n	8003f1a <HAL_RCC_OscConfig+0x1a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e56:	f7fe f8dd 	bl	8002014 <HAL_GetTick>
 8003e5a:	1b40      	subs	r0, r0, r5
 8003e5c:	2802      	cmp	r0, #2
 8003e5e:	d9f5      	bls.n	8003e4c <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8003e60:	2003      	movs	r0, #3
 8003e62:	e194      	b.n	800418e <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e64:	4b63      	ldr	r3, [pc, #396]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003e6c:	d0a0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x38>
 8003e6e:	e7c6      	b.n	8003dfe <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e70:	4a60      	ldr	r2, [pc, #384]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e7a9      	b.n	8003dd0 <HAL_RCC_OscConfig+0x58>
 8003e7c:	4b5d      	ldr	r3, [pc, #372]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e79f      	b.n	8003dd0 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8003e90:	f7fe f8c0 	bl	8002014 <HAL_GetTick>
 8003e94:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e9e:	d0b7      	beq.n	8003e10 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fe f8b8 	bl	8002014 <HAL_GetTick>
 8003ea4:	1b40      	subs	r0, r0, r5
 8003ea6:	2864      	cmp	r0, #100	; 0x64
 8003ea8:	d9f5      	bls.n	8003e96 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8003eaa:	2003      	movs	r0, #3
 8003eac:	e16f      	b.n	800418e <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eae:	4b51      	ldr	r3, [pc, #324]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003eb6:	d1ba      	bne.n	8003e2e <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb8:	4b4e      	ldr	r3, [pc, #312]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f013 0f02 	tst.w	r3, #2
 8003ec0:	d003      	beq.n	8003eca <HAL_RCC_OscConfig+0x152>
 8003ec2:	68e3      	ldr	r3, [r4, #12]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	f040 815f 	bne.w	8004188 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eca:	4a4a      	ldr	r2, [pc, #296]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003ecc:	6813      	ldr	r3, [r2, #0]
 8003ece:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ed2:	6921      	ldr	r1, [r4, #16]
 8003ed4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ed8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	f013 0f08 	tst.w	r3, #8
 8003ee0:	d049      	beq.n	8003f76 <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ee2:	6963      	ldr	r3, [r4, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d033      	beq.n	8003f50 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee8:	4b43      	ldr	r3, [pc, #268]	; (8003ff8 <HAL_RCC_OscConfig+0x280>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef0:	f7fe f890 	bl	8002014 <HAL_GetTick>
 8003ef4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef6:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efa:	f013 0f02 	tst.w	r3, #2
 8003efe:	d13a      	bne.n	8003f76 <HAL_RCC_OscConfig+0x1fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f00:	f7fe f888 	bl	8002014 <HAL_GetTick>
 8003f04:	1b40      	subs	r0, r0, r5
 8003f06:	2802      	cmp	r0, #2
 8003f08:	d9f5      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8003f0a:	2003      	movs	r0, #3
 8003f0c:	e13f      	b.n	800418e <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0e:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003f16:	d190      	bne.n	8003e3a <HAL_RCC_OscConfig+0xc2>
 8003f18:	e7ce      	b.n	8003eb8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1a:	4a36      	ldr	r2, [pc, #216]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003f1c:	6813      	ldr	r3, [r2, #0]
 8003f1e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003f22:	6921      	ldr	r1, [r4, #16]
 8003f24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e7d6      	b.n	8003eda <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003f2c:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <HAL_RCC_OscConfig+0x280>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f32:	f7fe f86f 	bl	8002014 <HAL_GetTick>
 8003f36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f38:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f013 0f02 	tst.w	r3, #2
 8003f40:	d0cb      	beq.n	8003eda <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f42:	f7fe f867 	bl	8002014 <HAL_GetTick>
 8003f46:	1b40      	subs	r0, r0, r5
 8003f48:	2802      	cmp	r0, #2
 8003f4a:	d9f5      	bls.n	8003f38 <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 8003f4c:	2003      	movs	r0, #3
 8003f4e:	e11e      	b.n	800418e <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f50:	4b29      	ldr	r3, [pc, #164]	; (8003ff8 <HAL_RCC_OscConfig+0x280>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fe f85c 	bl	8002014 <HAL_GetTick>
 8003f5c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f5e:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f62:	f013 0f02 	tst.w	r3, #2
 8003f66:	d006      	beq.n	8003f76 <HAL_RCC_OscConfig+0x1fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f68:	f7fe f854 	bl	8002014 <HAL_GetTick>
 8003f6c:	1b40      	subs	r0, r0, r5
 8003f6e:	2802      	cmp	r0, #2
 8003f70:	d9f5      	bls.n	8003f5e <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 8003f72:	2003      	movs	r0, #3
 8003f74:	e10b      	b.n	800418e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	f013 0f04 	tst.w	r3, #4
 8003f7c:	d076      	beq.n	800406c <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003f86:	d133      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003fa0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa2:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <HAL_RCC_OscConfig+0x284>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003faa:	d029      	beq.n	8004000 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fac:	68a3      	ldr	r3, [r4, #8]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d03a      	beq.n	8004028 <HAL_RCC_OscConfig+0x2b0>
 8003fb2:	2b05      	cmp	r3, #5
 8003fb4:	d03e      	beq.n	8004034 <HAL_RCC_OscConfig+0x2bc>
 8003fb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003fb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	671a      	str	r2, [r3, #112]	; 0x70
 8003fc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fc2:	f022 0204 	bic.w	r2, r2, #4
 8003fc6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc8:	68a3      	ldr	r3, [r4, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d03c      	beq.n	8004048 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fce:	f7fe f821 	bl	8002014 <HAL_GetTick>
 8003fd2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	f013 0f02 	tst.w	r3, #2
 8003fdc:	d145      	bne.n	800406a <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fe f819 	bl	8002014 <HAL_GetTick>
 8003fe2:	1b80      	subs	r0, r0, r6
 8003fe4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003fe8:	4298      	cmp	r0, r3
 8003fea:	d9f3      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8003fec:	2003      	movs	r0, #3
 8003fee:	e0ce      	b.n	800418e <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8003ff0:	2500      	movs	r5, #0
 8003ff2:	e7d6      	b.n	8003fa2 <HAL_RCC_OscConfig+0x22a>
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	42470000 	.word	0x42470000
 8003ffc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004000:	4a6b      	ldr	r2, [pc, #428]	; (80041b0 <HAL_RCC_OscConfig+0x438>)
 8004002:	6813      	ldr	r3, [r2, #0]
 8004004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004008:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800400a:	f7fe f803 	bl	8002014 <HAL_GetTick>
 800400e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004010:	4b67      	ldr	r3, [pc, #412]	; (80041b0 <HAL_RCC_OscConfig+0x438>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004018:	d1c8      	bne.n	8003fac <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401a:	f7fd fffb 	bl	8002014 <HAL_GetTick>
 800401e:	1b80      	subs	r0, r0, r6
 8004020:	2802      	cmp	r0, #2
 8004022:	d9f5      	bls.n	8004010 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8004024:	2003      	movs	r0, #3
 8004026:	e0b2      	b.n	800418e <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004028:	4a62      	ldr	r2, [pc, #392]	; (80041b4 <HAL_RCC_OscConfig+0x43c>)
 800402a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
 8004032:	e7c9      	b.n	8003fc8 <HAL_RCC_OscConfig+0x250>
 8004034:	4b5f      	ldr	r3, [pc, #380]	; (80041b4 <HAL_RCC_OscConfig+0x43c>)
 8004036:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004038:	f042 0204 	orr.w	r2, r2, #4
 800403c:	671a      	str	r2, [r3, #112]	; 0x70
 800403e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004040:	f042 0201 	orr.w	r2, r2, #1
 8004044:	671a      	str	r2, [r3, #112]	; 0x70
 8004046:	e7bf      	b.n	8003fc8 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fd ffe4 	bl	8002014 <HAL_GetTick>
 800404c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404e:	4b59      	ldr	r3, [pc, #356]	; (80041b4 <HAL_RCC_OscConfig+0x43c>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	f013 0f02 	tst.w	r3, #2
 8004056:	d008      	beq.n	800406a <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004058:	f7fd ffdc 	bl	8002014 <HAL_GetTick>
 800405c:	1b80      	subs	r0, r0, r6
 800405e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004062:	4298      	cmp	r0, r3
 8004064:	d9f3      	bls.n	800404e <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8004066:	2003      	movs	r0, #3
 8004068:	e091      	b.n	800418e <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800406a:	b9ed      	cbnz	r5, 80040a8 <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800406c:	69a3      	ldr	r3, [r4, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 808c 	beq.w	800418c <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004074:	4a4f      	ldr	r2, [pc, #316]	; (80041b4 <HAL_RCC_OscConfig+0x43c>)
 8004076:	6892      	ldr	r2, [r2, #8]
 8004078:	f002 020c 	and.w	r2, r2, #12
 800407c:	2a08      	cmp	r2, #8
 800407e:	d054      	beq.n	800412a <HAL_RCC_OscConfig+0x3b2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004080:	2b02      	cmp	r3, #2
 8004082:	d017      	beq.n	80040b4 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004084:	4b4c      	ldr	r3, [pc, #304]	; (80041b8 <HAL_RCC_OscConfig+0x440>)
 8004086:	2200      	movs	r2, #0
 8004088:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fd ffc3 	bl	8002014 <HAL_GetTick>
 800408e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004090:	4b48      	ldr	r3, [pc, #288]	; (80041b4 <HAL_RCC_OscConfig+0x43c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004098:	d045      	beq.n	8004126 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409a:	f7fd ffbb 	bl	8002014 <HAL_GetTick>
 800409e:	1b00      	subs	r0, r0, r4
 80040a0:	2802      	cmp	r0, #2
 80040a2:	d9f5      	bls.n	8004090 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80040a4:	2003      	movs	r0, #3
 80040a6:	e072      	b.n	800418e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a8:	4a42      	ldr	r2, [pc, #264]	; (80041b4 <HAL_RCC_OscConfig+0x43c>)
 80040aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80040ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6413      	str	r3, [r2, #64]	; 0x40
 80040b2:	e7db      	b.n	800406c <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80040b4:	4b40      	ldr	r3, [pc, #256]	; (80041b8 <HAL_RCC_OscConfig+0x440>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80040ba:	f7fd ffab 	bl	8002014 <HAL_GetTick>
 80040be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c0:	4b3c      	ldr	r3, [pc, #240]	; (80041b4 <HAL_RCC_OscConfig+0x43c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80040c8:	d006      	beq.n	80040d8 <HAL_RCC_OscConfig+0x360>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fd ffa3 	bl	8002014 <HAL_GetTick>
 80040ce:	1b40      	subs	r0, r0, r5
 80040d0:	2802      	cmp	r0, #2
 80040d2:	d9f5      	bls.n	80040c0 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 80040d4:	2003      	movs	r0, #3
 80040d6:	e05a      	b.n	800418e <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040d8:	69e3      	ldr	r3, [r4, #28]
 80040da:	6a22      	ldr	r2, [r4, #32]
 80040dc:	4313      	orrs	r3, r2
 80040de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80040e0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80040e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80040e6:	0852      	lsrs	r2, r2, #1
 80040e8:	3a01      	subs	r2, #1
 80040ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80040f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040f6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80040fa:	4a2e      	ldr	r2, [pc, #184]	; (80041b4 <HAL_RCC_OscConfig+0x43c>)
 80040fc:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80040fe:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <HAL_RCC_OscConfig+0x440>)
 8004100:	2201      	movs	r2, #1
 8004102:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004104:	f7fd ff86 	bl	8002014 <HAL_GetTick>
 8004108:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410a:	4b2a      	ldr	r3, [pc, #168]	; (80041b4 <HAL_RCC_OscConfig+0x43c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004112:	d106      	bne.n	8004122 <HAL_RCC_OscConfig+0x3aa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004114:	f7fd ff7e 	bl	8002014 <HAL_GetTick>
 8004118:	1b00      	subs	r0, r0, r4
 800411a:	2802      	cmp	r0, #2
 800411c:	d9f5      	bls.n	800410a <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 800411e:	2003      	movs	r0, #3
 8004120:	e035      	b.n	800418e <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004122:	2000      	movs	r0, #0
 8004124:	e033      	b.n	800418e <HAL_RCC_OscConfig+0x416>
 8004126:	2000      	movs	r0, #0
 8004128:	e031      	b.n	800418e <HAL_RCC_OscConfig+0x416>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800412a:	2b01      	cmp	r3, #1
 800412c:	d031      	beq.n	8004192 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 800412e:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <HAL_RCC_OscConfig+0x43c>)
 8004130:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8004136:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004138:	4291      	cmp	r1, r2
 800413a:	d12c      	bne.n	8004196 <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800413c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004140:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	428a      	cmp	r2, r1
 8004144:	d129      	bne.n	800419a <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004146:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004148:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800414c:	401a      	ands	r2, r3
 800414e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004152:	d124      	bne.n	800419e <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004154:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004158:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800415a:	0852      	lsrs	r2, r2, #1
 800415c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800415e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004162:	d11e      	bne.n	80041a2 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004164:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004168:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800416a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800416e:	d11a      	bne.n	80041a6 <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004170:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004174:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004176:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800417a:	d116      	bne.n	80041aa <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 800417c:	2000      	movs	r0, #0
 800417e:	e006      	b.n	800418e <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8004180:	2001      	movs	r0, #1
}
 8004182:	4770      	bx	lr
        return HAL_ERROR;
 8004184:	2001      	movs	r0, #1
 8004186:	e002      	b.n	800418e <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8004188:	2001      	movs	r0, #1
 800418a:	e000      	b.n	800418e <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 800418c:	2000      	movs	r0, #0
}
 800418e:	b002      	add	sp, #8
 8004190:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004192:	2001      	movs	r0, #1
 8004194:	e7fb      	b.n	800418e <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8004196:	2001      	movs	r0, #1
 8004198:	e7f9      	b.n	800418e <HAL_RCC_OscConfig+0x416>
 800419a:	2001      	movs	r0, #1
 800419c:	e7f7      	b.n	800418e <HAL_RCC_OscConfig+0x416>
 800419e:	2001      	movs	r0, #1
 80041a0:	e7f5      	b.n	800418e <HAL_RCC_OscConfig+0x416>
 80041a2:	2001      	movs	r0, #1
 80041a4:	e7f3      	b.n	800418e <HAL_RCC_OscConfig+0x416>
 80041a6:	2001      	movs	r0, #1
 80041a8:	e7f1      	b.n	800418e <HAL_RCC_OscConfig+0x416>
 80041aa:	2001      	movs	r0, #1
 80041ac:	e7ef      	b.n	800418e <HAL_RCC_OscConfig+0x416>
 80041ae:	bf00      	nop
 80041b0:	40007000 	.word	0x40007000
 80041b4:	40023800 	.word	0x40023800
 80041b8:	42470000 	.word	0x42470000

080041bc <SD_DMATransmitCplt>:
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041bc:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80041c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80041c8:	4770      	bx	lr
	...

080041cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80041d6:	6800      	ldr	r0, [r0, #0]
 80041d8:	f001 fa25 	bl	8005626 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80041dc:	4605      	mov	r5, r0
 80041de:	b110      	cbz	r0, 80041e6 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 80041e0:	4628      	mov	r0, r5
 80041e2:	b002      	add	sp, #8
 80041e4:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80041e6:	6820      	ldr	r0, [r4, #0]
 80041e8:	f001 fd16 	bl	8005c18 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80041ec:	b938      	cbnz	r0, 80041fe <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80041ee:	2301      	movs	r3, #1
 80041f0:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80041f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d00b      	beq.n	8004210 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80041f8:	462e      	mov	r6, r5
 80041fa:	4628      	mov	r0, r5
 80041fc:	e014      	b.n	8004228 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80041fe:	2300      	movs	r3, #0
 8004200:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004202:	6820      	ldr	r0, [r4, #0]
 8004204:	f001 fa0f 	bl	8005626 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004208:	2800      	cmp	r0, #0
 800420a:	d0f2      	beq.n	80041f2 <SD_PowerON+0x26>
      return errorstate;
 800420c:	4605      	mov	r5, r0
 800420e:	e7e7      	b.n	80041e0 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004210:	2100      	movs	r1, #0
 8004212:	6820      	ldr	r0, [r4, #0]
 8004214:	f001 fb6e 	bl	80058f4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004218:	2800      	cmp	r0, #0
 800421a:	d0ed      	beq.n	80041f8 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800421c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004220:	e7de      	b.n	80041e0 <SD_PowerON+0x14>
    count++;
 8004222:	9b01      	ldr	r3, [sp, #4]
 8004224:	3301      	adds	r3, #1
 8004226:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004228:	9a01      	ldr	r2, [sp, #4]
 800422a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800422e:	429a      	cmp	r2, r3
 8004230:	d813      	bhi.n	800425a <SD_PowerON+0x8e>
 8004232:	b996      	cbnz	r6, 800425a <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004234:	2100      	movs	r1, #0
 8004236:	6820      	ldr	r0, [r4, #0]
 8004238:	f001 fb5c 	bl	80058f4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800423c:	b9e0      	cbnz	r0, 8004278 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800423e:	4912      	ldr	r1, [pc, #72]	; (8004288 <SD_PowerON+0xbc>)
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	f001 fc35 	bl	8005ab0 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004246:	4606      	mov	r6, r0
 8004248:	b9c0      	cbnz	r0, 800427c <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800424a:	2100      	movs	r1, #0
 800424c:	6820      	ldr	r0, [r4, #0]
 800424e:	f001 f9d5 	bl	80055fc <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004252:	0fc3      	lsrs	r3, r0, #31
 8004254:	d0e5      	beq.n	8004222 <SD_PowerON+0x56>
 8004256:	461e      	mov	r6, r3
 8004258:	e7e3      	b.n	8004222 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800425a:	9a01      	ldr	r2, [sp, #4]
 800425c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004260:	429a      	cmp	r2, r3
 8004262:	d80e      	bhi.n	8004282 <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004264:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 8004268:	d002      	beq.n	8004270 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800426a:	2301      	movs	r3, #1
 800426c:	6463      	str	r3, [r4, #68]	; 0x44
 800426e:	e7b7      	b.n	80041e0 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 8004270:	2200      	movs	r2, #0
 8004272:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8004274:	461d      	mov	r5, r3
 8004276:	e7b3      	b.n	80041e0 <SD_PowerON+0x14>
      return errorstate;
 8004278:	4605      	mov	r5, r0
 800427a:	e7b1      	b.n	80041e0 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800427c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004280:	e7ae      	b.n	80041e0 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004282:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8004286:	e7ab      	b.n	80041e0 <SD_PowerON+0x14>
 8004288:	c1100000 	.word	0xc1100000

0800428c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800428e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  dataremaining = hsd->RxXferSize;
 8004290:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

  if (dataremaining > 0U)
 8004292:	b9a6      	cbnz	r6, 80042be <SD_Read_IT+0x32>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize = dataremaining;
  }
}
 8004294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      data = SDIO_ReadFIFO(hsd->Instance);
 8004296:	6838      	ldr	r0, [r7, #0]
 8004298:	f001 f98b 	bl	80055b2 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800429c:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800429e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80042a2:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80042a4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80042a8:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80042aa:	0e00      	lsrs	r0, r0, #24
 80042ac:	70e0      	strb	r0, [r4, #3]
      tmp++;
 80042ae:	3404      	adds	r4, #4
      dataremaining--;
 80042b0:	3e04      	subs	r6, #4
    for(count = 0U; count < 8U; count++)
 80042b2:	3501      	adds	r5, #1
 80042b4:	2d07      	cmp	r5, #7
 80042b6:	d9ee      	bls.n	8004296 <SD_Read_IT+0xa>
    hsd->pRxBuffPtr = tmp;
 80042b8:	62bc      	str	r4, [r7, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80042ba:	62fe      	str	r6, [r7, #44]	; 0x2c
}
 80042bc:	e7ea      	b.n	8004294 <SD_Read_IT+0x8>
 80042be:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 80042c0:	2500      	movs	r5, #0
 80042c2:	e7f7      	b.n	80042b4 <SD_Read_IT+0x28>

080042c4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b083      	sub	sp, #12
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80042c8:	6a04      	ldr	r4, [r0, #32]
  dataremaining = hsd->TxXferSize;
 80042ca:	6a46      	ldr	r6, [r0, #36]	; 0x24

  if (dataremaining > 0U)
 80042cc:	b9de      	cbnz	r6, 8004306 <SD_Write_IT+0x42>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
  }
}
 80042ce:	b003      	add	sp, #12
 80042d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = (uint32_t)(*tmp);
 80042d2:	7823      	ldrb	r3, [r4, #0]
 80042d4:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80042d6:	7862      	ldrb	r2, [r4, #1]
 80042d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80042dc:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80042de:	78a2      	ldrb	r2, [r4, #2]
 80042e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042e4:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80042e6:	78e2      	ldrb	r2, [r4, #3]
 80042e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80042ec:	9301      	str	r3, [sp, #4]
      tmp++;
 80042ee:	3404      	adds	r4, #4
      dataremaining--;
 80042f0:	3e04      	subs	r6, #4
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80042f2:	a901      	add	r1, sp, #4
 80042f4:	6838      	ldr	r0, [r7, #0]
 80042f6:	f001 f95f 	bl	80055b8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80042fa:	3501      	adds	r5, #1
 80042fc:	2d07      	cmp	r5, #7
 80042fe:	d9e8      	bls.n	80042d2 <SD_Write_IT+0xe>
    hsd->pTxBuffPtr = tmp;
 8004300:	623c      	str	r4, [r7, #32]
    hsd->TxXferSize = dataremaining;
 8004302:	627e      	str	r6, [r7, #36]	; 0x24
}
 8004304:	e7e3      	b.n	80042ce <SD_Write_IT+0xa>
 8004306:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 8004308:	2500      	movs	r5, #0
 800430a:	e7f7      	b.n	80042fc <SD_Write_IT+0x38>

0800430c <SD_FindSCR>:
{
 800430c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800430e:	b089      	sub	sp, #36	; 0x24
 8004310:	4604      	mov	r4, r0
 8004312:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8004314:	f7fd fe7e 	bl	8002014 <HAL_GetTick>
 8004318:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0U, 0U};
 800431a:	2300      	movs	r3, #0
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004320:	2108      	movs	r1, #8
 8004322:	6820      	ldr	r0, [r4, #0]
 8004324:	f001 fa3c 	bl	80057a0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004328:	4605      	mov	r5, r0
 800432a:	b110      	cbz	r0, 8004332 <SD_FindSCR+0x26>
}
 800432c:	4628      	mov	r0, r5
 800432e:	b009      	add	sp, #36	; 0x24
 8004330:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004332:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004334:	0409      	lsls	r1, r1, #16
 8004336:	6820      	ldr	r0, [r4, #0]
 8004338:	f001 fadc 	bl	80058f4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800433c:	4605      	mov	r5, r0
 800433e:	2800      	cmp	r0, #0
 8004340:	d1f4      	bne.n	800432c <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004342:	f04f 33ff 	mov.w	r3, #4294967295
 8004346:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8004348:	2308      	movs	r3, #8
 800434a:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800434c:	2330      	movs	r3, #48	; 0x30
 800434e:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004350:	2302      	movs	r3, #2
 8004352:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004354:	2300      	movs	r3, #0
 8004356:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004358:	2301      	movs	r3, #1
 800435a:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800435c:	a902      	add	r1, sp, #8
 800435e:	6820      	ldr	r0, [r4, #0]
 8004360:	f001 f94f 	bl	8005602 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004364:	6820      	ldr	r0, [r4, #0]
 8004366:	f001 faf5 	bl	8005954 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800436a:	4605      	mov	r5, r0
 800436c:	b158      	cbz	r0, 8004386 <SD_FindSCR+0x7a>
 800436e:	e7dd      	b.n	800432c <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004370:	f001 f91f 	bl	80055b2 <SDIO_ReadFIFO>
 8004374:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8004378:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800437a:	f7fd fe4b 	bl	8002014 <HAL_GetTick>
 800437e:	1b83      	subs	r3, r0, r6
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d03f      	beq.n	8004406 <SD_FindSCR+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004386:	6820      	ldr	r0, [r4, #0]
 8004388:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800438a:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 800438e:	d107      	bne.n	80043a0 <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004390:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004392:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004396:	d1eb      	bne.n	8004370 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004398:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800439a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800439e:	d1ec      	bne.n	800437a <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80043a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043a2:	f013 0f08 	tst.w	r3, #8
 80043a6:	d125      	bne.n	80043f4 <SD_FindSCR+0xe8>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80043a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043aa:	f013 0f02 	tst.w	r3, #2
 80043ae:	d124      	bne.n	80043fa <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80043b0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80043b2:	f015 0520 	ands.w	r5, r5, #32
 80043b6:	d123      	bne.n	8004400 <SD_FindSCR+0xf4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80043b8:	f240 533a 	movw	r3, #1338	; 0x53a
 80043bc:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80043be:	9a01      	ldr	r2, [sp, #4]
 80043c0:	0213      	lsls	r3, r2, #8
 80043c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80043ca:	0a11      	lsrs	r1, r2, #8
 80043cc:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80043d0:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80043d2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80043d6:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80043d8:	9a00      	ldr	r2, [sp, #0]
 80043da:	0213      	lsls	r3, r2, #8
 80043dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80043e4:	0a11      	lsrs	r1, r2, #8
 80043e6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80043ea:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80043ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80043f0:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80043f2:	e79b      	b.n	800432c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80043f4:	2508      	movs	r5, #8
 80043f6:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80043f8:	e798      	b.n	800432c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80043fa:	2502      	movs	r5, #2
 80043fc:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80043fe:	e795      	b.n	800432c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004400:	2520      	movs	r5, #32
 8004402:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8004404:	e792      	b.n	800432c <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8004406:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800440a:	e78f      	b.n	800432c <SD_FindSCR+0x20>

0800440c <SD_WideBus_Enable>:
{
 800440c:	b510      	push	{r4, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8004412:	2100      	movs	r1, #0
 8004414:	9100      	str	r1, [sp, #0]
 8004416:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004418:	6800      	ldr	r0, [r0, #0]
 800441a:	f001 f8ef 	bl	80055fc <SDIO_GetResponse>
 800441e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8004422:	d113      	bne.n	800444c <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8004424:	4669      	mov	r1, sp
 8004426:	4620      	mov	r0, r4
 8004428:	f7ff ff70 	bl	800430c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800442c:	b980      	cbnz	r0, 8004450 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800442e:	9b01      	ldr	r3, [sp, #4]
 8004430:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004434:	d00e      	beq.n	8004454 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004436:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004438:	0409      	lsls	r1, r1, #16
 800443a:	6820      	ldr	r0, [r4, #0]
 800443c:	f001 fa5a 	bl	80058f4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004440:	b930      	cbnz	r0, 8004450 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004442:	2102      	movs	r1, #2
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	f001 fa6d 	bl	8005924 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 800444a:	e001      	b.n	8004450 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800444c:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8004450:	b002      	add	sp, #8
 8004452:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004454:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004458:	e7fa      	b.n	8004450 <SD_WideBus_Enable+0x44>

0800445a <SD_WideBus_Disable>:
{
 800445a:	b510      	push	{r4, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8004460:	2100      	movs	r1, #0
 8004462:	9100      	str	r1, [sp, #0]
 8004464:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004466:	6800      	ldr	r0, [r0, #0]
 8004468:	f001 f8c8 	bl	80055fc <SDIO_GetResponse>
 800446c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8004470:	d113      	bne.n	800449a <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8004472:	4669      	mov	r1, sp
 8004474:	4620      	mov	r0, r4
 8004476:	f7ff ff49 	bl	800430c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800447a:	b980      	cbnz	r0, 800449e <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800447c:	9b01      	ldr	r3, [sp, #4]
 800447e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004482:	d00e      	beq.n	80044a2 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004484:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004486:	0409      	lsls	r1, r1, #16
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	f001 fa33 	bl	80058f4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800448e:	b930      	cbnz	r0, 800449e <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004490:	2100      	movs	r1, #0
 8004492:	6820      	ldr	r0, [r4, #0]
 8004494:	f001 fa46 	bl	8005924 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004498:	e001      	b.n	800449e <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800449a:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 800449e:	b002      	add	sp, #8
 80044a0:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80044a2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80044a6:	e7fa      	b.n	800449e <SD_WideBus_Disable+0x44>

080044a8 <SD_SendStatus>:
{
 80044a8:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 80044aa:	b181      	cbz	r1, 80044ce <SD_SendStatus+0x26>
 80044ac:	4604      	mov	r4, r0
 80044ae:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044b0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80044b2:	0409      	lsls	r1, r1, #16
 80044b4:	6800      	ldr	r0, [r0, #0]
 80044b6:	f001 fa65 	bl	8005984 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80044ba:	4605      	mov	r5, r0
 80044bc:	b108      	cbz	r0, 80044c2 <SD_SendStatus+0x1a>
}
 80044be:	4628      	mov	r0, r5
 80044c0:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044c2:	2100      	movs	r1, #0
 80044c4:	6820      	ldr	r0, [r4, #0]
 80044c6:	f001 f899 	bl	80055fc <SDIO_GetResponse>
 80044ca:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80044cc:	e7f7      	b.n	80044be <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80044ce:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 80044d2:	e7f4      	b.n	80044be <SD_SendStatus+0x16>

080044d4 <HAL_SD_ReadBlocks_DMA>:
{
 80044d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044d8:	b087      	sub	sp, #28
 80044da:	4604      	mov	r4, r0
  if(NULL == pData)
 80044dc:	b191      	cbz	r1, 8004504 <HAL_SD_ReadBlocks_DMA+0x30>
 80044de:	4616      	mov	r6, r2
 80044e0:	461f      	mov	r7, r3
 80044e2:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 80044e4:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 80044e8:	b2ed      	uxtb	r5, r5
 80044ea:	2d01      	cmp	r5, #1
 80044ec:	d17d      	bne.n	80045ea <HAL_SD_ReadBlocks_DMA+0x116>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80044f2:	19f0      	adds	r0, r6, r7
 80044f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044f6:	4298      	cmp	r0, r3
 80044f8:	d90a      	bls.n	8004510 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80044fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004500:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004502:	e073      	b.n	80045ec <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004504:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004506:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800450a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800450c:	2501      	movs	r5, #1
 800450e:	e06d      	b.n	80045ec <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->State = HAL_SD_STATE_BUSY;
 8004510:	2303      	movs	r3, #3
 8004512:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004516:	6821      	ldr	r1, [r4, #0]
 8004518:	2300      	movs	r3, #0
 800451a:	62cb      	str	r3, [r1, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800451c:	6820      	ldr	r0, [r4, #0]
 800451e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004520:	f441 7195 	orr.w	r1, r1, #298	; 0x12a
 8004524:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004526:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004528:	4833      	ldr	r0, [pc, #204]	; (80045f8 <HAL_SD_ReadBlocks_DMA+0x124>)
 800452a:	63c8      	str	r0, [r1, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800452c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800452e:	4833      	ldr	r0, [pc, #204]	; (80045fc <HAL_SD_ReadBlocks_DMA+0x128>)
 8004530:	64c8      	str	r0, [r1, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8004532:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004534:	650b      	str	r3, [r1, #80]	; 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004536:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004538:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800453a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800453c:	6801      	ldr	r1, [r0, #0]
 800453e:	680b      	ldr	r3, [r1, #0]
 8004540:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004544:	6880      	ldr	r0, [r0, #8]
 8004546:	4303      	orrs	r3, r0
 8004548:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800454a:	6821      	ldr	r1, [r4, #0]
 800454c:	ea4f 2947 	mov.w	r9, r7, lsl #9
 8004550:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8004554:	3180      	adds	r1, #128	; 0x80
 8004556:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004558:	f7fd ff6e 	bl	8002438 <HAL_DMA_Start_IT>
 800455c:	4680      	mov	r8, r0
 800455e:	bb68      	cbnz	r0, 80045bc <HAL_SD_ReadBlocks_DMA+0xe8>
      __HAL_SD_DMA_ENABLE(hsd);
 8004560:	4b27      	ldr	r3, [pc, #156]	; (8004600 <HAL_SD_ReadBlocks_DMA+0x12c>)
 8004562:	2201      	movs	r2, #1
 8004564:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004568:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800456a:	4293      	cmp	r3, r2
 800456c:	d000      	beq.n	8004570 <HAL_SD_ReadBlocks_DMA+0x9c>
        add *= 512U;
 800456e:	0276      	lsls	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004570:	f04f 33ff 	mov.w	r3, #4294967295
 8004574:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004576:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800457a:	2390      	movs	r3, #144	; 0x90
 800457c:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800457e:	2302      	movs	r3, #2
 8004580:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004582:	2300      	movs	r3, #0
 8004584:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004586:	2301      	movs	r3, #1
 8004588:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800458a:	4669      	mov	r1, sp
 800458c:	6820      	ldr	r0, [r4, #0]
 800458e:	f001 f838 	bl	8005602 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8004592:	2f01      	cmp	r7, #1
 8004594:	d922      	bls.n	80045dc <HAL_SD_ReadBlocks_DMA+0x108>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004596:	2382      	movs	r3, #130	; 0x82
 8004598:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800459a:	4631      	mov	r1, r6
 800459c:	6820      	ldr	r0, [r4, #0]
 800459e:	f001 f92f 	bl	8005800 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 80045a2:	b338      	cbz	r0, 80045f4 <HAL_SD_ReadBlocks_DMA+0x120>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	4a17      	ldr	r2, [pc, #92]	; (8004604 <HAL_SD_ReadBlocks_DMA+0x130>)
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80045aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045ac:	4303      	orrs	r3, r0
 80045ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 80045ba:	e017      	b.n	80045ec <HAL_SD_ReadBlocks_DMA+0x118>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80045bc:	6822      	ldr	r2, [r4, #0]
 80045be:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80045c0:	f423 7395 	bic.w	r3, r3, #298	; 0x12a
 80045c4:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	4a0e      	ldr	r2, [pc, #56]	; (8004604 <HAL_SD_ReadBlocks_DMA+0x130>)
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80045cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045d2:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80045da:	e007      	b.n	80045ec <HAL_SD_ReadBlocks_DMA+0x118>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80045dc:	2381      	movs	r3, #129	; 0x81
 80045de:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80045e0:	4631      	mov	r1, r6
 80045e2:	6820      	ldr	r0, [r4, #0]
 80045e4:	f001 f8f4 	bl	80057d0 <SDMMC_CmdReadSingleBlock>
 80045e8:	e7db      	b.n	80045a2 <HAL_SD_ReadBlocks_DMA+0xce>
    return HAL_BUSY;
 80045ea:	2502      	movs	r5, #2
}
 80045ec:	4628      	mov	r0, r5
 80045ee:	b007      	add	sp, #28
 80045f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 80045f4:	4645      	mov	r5, r8
 80045f6:	e7f9      	b.n	80045ec <HAL_SD_ReadBlocks_DMA+0x118>
 80045f8:	0800473b 	.word	0x0800473b
 80045fc:	08004c25 	.word	0x08004c25
 8004600:	42258000 	.word	0x42258000
 8004604:	004005ff 	.word	0x004005ff

08004608 <HAL_SD_WriteBlocks_DMA>:
{
 8004608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460a:	b087      	sub	sp, #28
 800460c:	4604      	mov	r4, r0
  if(NULL == pData)
 800460e:	2900      	cmp	r1, #0
 8004610:	d038      	beq.n	8004684 <HAL_SD_WriteBlocks_DMA+0x7c>
 8004612:	461e      	mov	r6, r3
 8004614:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8004616:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 800461a:	b2ed      	uxtb	r5, r5
 800461c:	2d01      	cmp	r5, #1
 800461e:	d17f      	bne.n	8004720 <HAL_SD_WriteBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004620:	2300      	movs	r3, #0
 8004622:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004624:	1993      	adds	r3, r2, r6
 8004626:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8004628:	428b      	cmp	r3, r1
 800462a:	d831      	bhi.n	8004690 <HAL_SD_WriteBlocks_DMA+0x88>
    hsd->State = HAL_SD_STATE_BUSY;
 800462c:	2303      	movs	r3, #3
 800462e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004632:	6803      	ldr	r3, [r0, #0]
 8004634:	2100      	movs	r1, #0
 8004636:	62d9      	str	r1, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8004638:	6800      	ldr	r0, [r0, #0]
 800463a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800463c:	f043 031a 	orr.w	r3, r3, #26
 8004640:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004642:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004644:	4838      	ldr	r0, [pc, #224]	; (8004728 <HAL_SD_WriteBlocks_DMA+0x120>)
 8004646:	63d8      	str	r0, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004648:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800464a:	4838      	ldr	r0, [pc, #224]	; (800472c <HAL_SD_WriteBlocks_DMA+0x124>)
 800464c:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 800464e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004650:	6519      	str	r1, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004652:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004654:	2b01      	cmp	r3, #1
 8004656:	d000      	beq.n	800465a <HAL_SD_WriteBlocks_DMA+0x52>
      add *= 512U;
 8004658:	0252      	lsls	r2, r2, #9
    if(NumberOfBlocks > 1U)
 800465a:	2e01      	cmp	r6, #1
 800465c:	d91d      	bls.n	800469a <HAL_SD_WriteBlocks_DMA+0x92>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800465e:	23a0      	movs	r3, #160	; 0xa0
 8004660:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004662:	4611      	mov	r1, r2
 8004664:	6820      	ldr	r0, [r4, #0]
 8004666:	f001 f8fb 	bl	8005860 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800466a:	b1e8      	cbz	r0, 80046a8 <HAL_SD_WriteBlocks_DMA+0xa0>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	4a30      	ldr	r2, [pc, #192]	; (8004730 <HAL_SD_WriteBlocks_DMA+0x128>)
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004672:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004674:	4303      	orrs	r3, r0
 8004676:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004678:	2301      	movs	r3, #1
 800467a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800467e:	2300      	movs	r3, #0
 8004680:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004682:	e04e      	b.n	8004722 <HAL_SD_WriteBlocks_DMA+0x11a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004684:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004686:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800468a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800468c:	2501      	movs	r5, #1
 800468e:	e048      	b.n	8004722 <HAL_SD_WriteBlocks_DMA+0x11a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004690:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004696:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8004698:	e043      	b.n	8004722 <HAL_SD_WriteBlocks_DMA+0x11a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800469a:	2390      	movs	r3, #144	; 0x90
 800469c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800469e:	4611      	mov	r1, r2
 80046a0:	6820      	ldr	r0, [r4, #0]
 80046a2:	f001 f8c5 	bl	8005830 <SDMMC_CmdWriteSingleBlock>
 80046a6:	e7e0      	b.n	800466a <HAL_SD_WriteBlocks_DMA+0x62>
    __HAL_SD_DMA_ENABLE(hsd);
 80046a8:	4b22      	ldr	r3, [pc, #136]	; (8004734 <HAL_SD_WriteBlocks_DMA+0x12c>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046b2:	2240      	movs	r2, #64	; 0x40
 80046b4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80046b6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80046b8:	680a      	ldr	r2, [r1, #0]
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046c0:	6889      	ldr	r1, [r1, #8]
 80046c2:	430b      	orrs	r3, r1
 80046c4:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80046c6:	6822      	ldr	r2, [r4, #0]
 80046c8:	0276      	lsls	r6, r6, #9
 80046ca:	08b3      	lsrs	r3, r6, #2
 80046cc:	3280      	adds	r2, #128	; 0x80
 80046ce:	4639      	mov	r1, r7
 80046d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80046d2:	f7fd feb1 	bl	8002438 <HAL_DMA_Start_IT>
 80046d6:	4607      	mov	r7, r0
 80046d8:	b188      	cbz	r0, 80046fe <HAL_SD_WriteBlocks_DMA+0xf6>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80046da:	6822      	ldr	r2, [r4, #0]
 80046dc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80046de:	f023 031a 	bic.w	r3, r3, #26
 80046e2:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	4a12      	ldr	r2, [pc, #72]	; (8004730 <HAL_SD_WriteBlocks_DMA+0x128>)
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80046ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046f0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046f8:	2300      	movs	r3, #0
 80046fa:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80046fc:	e011      	b.n	8004722 <HAL_SD_WriteBlocks_DMA+0x11a>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004702:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004704:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004706:	2390      	movs	r3, #144	; 0x90
 8004708:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800470a:	2300      	movs	r3, #0
 800470c:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800470e:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004710:	2301      	movs	r3, #1
 8004712:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004714:	4669      	mov	r1, sp
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	f000 ff73 	bl	8005602 <SDIO_ConfigData>
      return HAL_OK;
 800471c:	463d      	mov	r5, r7
 800471e:	e000      	b.n	8004722 <HAL_SD_WriteBlocks_DMA+0x11a>
    return HAL_BUSY;
 8004720:	2502      	movs	r5, #2
}
 8004722:	4628      	mov	r0, r5
 8004724:	b007      	add	sp, #28
 8004726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004728:	080041bd 	.word	0x080041bd
 800472c:	08004c25 	.word	0x08004c25
 8004730:	004005ff 	.word	0x004005ff
 8004734:	42258000 	.word	0x42258000

08004738 <HAL_SD_ErrorCallback>:
}
 8004738:	4770      	bx	lr

0800473a <SD_DMAReceiveCplt>:
{
 800473a:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800473c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800473e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004740:	2b82      	cmp	r3, #130	; 0x82
 8004742:	d011      	beq.n	8004768 <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004748:	f023 0308 	bic.w	r3, r3, #8
 800474c:	62d3      	str	r3, [r2, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	f240 523a 	movw	r2, #1338	; 0x53a
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8004756:	2301      	movs	r3, #1
 8004758:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800475c:	2300      	movs	r3, #0
 800475e:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8004760:	4620      	mov	r0, r4
 8004762:	f002 f8f8 	bl	8006956 <HAL_SD_RxCpltCallback>
}
 8004766:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	f001 f891 	bl	8005890 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 800476e:	4603      	mov	r3, r0
 8004770:	2800      	cmp	r0, #0
 8004772:	d0e7      	beq.n	8004744 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 8004774:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004776:	4313      	orrs	r3, r2
 8004778:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 800477a:	4620      	mov	r0, r4
 800477c:	f7ff ffdc 	bl	8004738 <HAL_SD_ErrorCallback>
 8004780:	e7e0      	b.n	8004744 <SD_DMAReceiveCplt+0xa>
	...

08004784 <HAL_SD_GetCardCSD>:
{
 8004784:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004786:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004788:	0f92      	lsrs	r2, r2, #30
 800478a:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800478c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800478e:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8004792:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004794:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
 8004798:	f002 0203 	and.w	r2, r2, #3
 800479c:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800479e:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
 80047a2:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80047a4:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 80047a8:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80047aa:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 80047ae:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80047b0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80047b2:	0d12      	lsrs	r2, r2, #20
 80047b4:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80047b6:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 80047ba:	f002 020f 	and.w	r2, r2, #15
 80047be:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80047c0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80047c2:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80047c6:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80047c8:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80047ca:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80047ce:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80047d0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80047d2:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80047d6:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80047d8:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80047da:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80047de:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80047e0:	2200      	movs	r2, #0
 80047e2:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80047e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80047e6:	2a00      	cmp	r2, #0
 80047e8:	f040 8086 	bne.w	80048f8 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80047ec:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80047ee:	f640 72fc 	movw	r2, #4092	; 0xffc
 80047f2:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 80047f6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80047f8:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80047fc:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80047fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004800:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8004804:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004806:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 800480a:	f002 0207 	and.w	r2, r2, #7
 800480e:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004810:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004812:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8004816:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004818:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800481a:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800481e:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004820:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004822:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8004826:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004828:	690a      	ldr	r2, [r1, #16]
 800482a:	3201      	adds	r2, #1
 800482c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800482e:	7e08      	ldrb	r0, [r1, #24]
 8004830:	f000 0007 	and.w	r0, r0, #7
 8004834:	3002      	adds	r0, #2
 8004836:	4082      	lsls	r2, r0
 8004838:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800483a:	f891 c008 	ldrb.w	ip, [r1, #8]
 800483e:	f00c 0c0f 	and.w	ip, ip, #15
 8004842:	2001      	movs	r0, #1
 8004844:	fa00 f00c 	lsl.w	r0, r0, ip
 8004848:	6598      	str	r0, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800484a:	0a40      	lsrs	r0, r0, #9
 800484c:	fb00 f202 	mul.w	r2, r0, r2
 8004850:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004856:	661a      	str	r2, [r3, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004858:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800485a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800485e:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004860:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004862:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8004866:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004868:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800486a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800486e:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004870:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004872:	0fd2      	lsrs	r2, r2, #31
 8004874:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004878:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800487c:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800487e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004880:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8004884:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004888:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800488c:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800488e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004890:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8004894:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8004898:	2000      	movs	r0, #0
 800489a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800489e:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 80048a2:	f002 0201 	and.w	r2, r2, #1
 80048a6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80048aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048ac:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80048b0:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80048b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048b6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80048ba:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80048be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048c0:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80048c4:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80048c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048ca:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80048ce:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80048d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048d4:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80048d8:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80048dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048de:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80048e2:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80048e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80048ec:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80048f6:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80048f8:	2a01      	cmp	r2, #1
 80048fa:	d111      	bne.n	8004920 <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80048fc:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80048fe:	0412      	lsls	r2, r2, #16
 8004900:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8004904:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 8004908:	4302      	orrs	r2, r0
 800490a:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800490c:	690a      	ldr	r2, [r1, #16]
 800490e:	3201      	adds	r2, #1
 8004910:	0292      	lsls	r2, r2, #10
 8004912:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004914:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800491a:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800491c:	661a      	str	r2, [r3, #96]	; 0x60
 800491e:	e79b      	b.n	8004858 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004920:	6802      	ldr	r2, [r0, #0]
 8004922:	4905      	ldr	r1, [pc, #20]	; (8004938 <HAL_SD_GetCardCSD+0x1b4>)
 8004924:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004926:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004928:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800492c:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800492e:	2001      	movs	r0, #1
 8004930:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	004005ff 	.word	0x004005ff

0800493c <SD_InitCard>:
{
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	b090      	sub	sp, #64	; 0x40
 8004940:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8004942:	2301      	movs	r3, #1
 8004944:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004948:	6800      	ldr	r0, [r0, #0]
 800494a:	f000 fe3e 	bl	80055ca <SDIO_GetPowerState>
 800494e:	2800      	cmp	r0, #0
 8004950:	d06c      	beq.n	8004a2c <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004952:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004954:	2b03      	cmp	r3, #3
 8004956:	d145      	bne.n	80049e4 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004958:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800495a:	2b03      	cmp	r3, #3
 800495c:	d15d      	bne.n	8004a1a <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800495e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004960:	2b03      	cmp	r3, #3
 8004962:	d01d      	beq.n	80049a0 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8004964:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8004968:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800496a:	0409      	lsls	r1, r1, #16
 800496c:	6820      	ldr	r0, [r4, #0]
 800496e:	f001 f864 	bl	8005a3a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004972:	4605      	mov	r5, r0
 8004974:	2800      	cmp	r0, #0
 8004976:	d15b      	bne.n	8004a30 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004978:	2100      	movs	r1, #0
 800497a:	6820      	ldr	r0, [r4, #0]
 800497c:	f000 fe3e 	bl	80055fc <SDIO_GetResponse>
 8004980:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004982:	2104      	movs	r1, #4
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	f000 fe39 	bl	80055fc <SDIO_GetResponse>
 800498a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800498c:	2108      	movs	r1, #8
 800498e:	6820      	ldr	r0, [r4, #0]
 8004990:	f000 fe34 	bl	80055fc <SDIO_GetResponse>
 8004994:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004996:	210c      	movs	r1, #12
 8004998:	6820      	ldr	r0, [r4, #0]
 800499a:	f000 fe2f 	bl	80055fc <SDIO_GetResponse>
 800499e:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80049a0:	2104      	movs	r1, #4
 80049a2:	6820      	ldr	r0, [r4, #0]
 80049a4:	f000 fe2a 	bl	80055fc <SDIO_GetResponse>
 80049a8:	0d00      	lsrs	r0, r0, #20
 80049aa:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80049ac:	a905      	add	r1, sp, #20
 80049ae:	4620      	mov	r0, r4
 80049b0:	f7ff fee8 	bl	8004784 <HAL_SD_GetCardCSD>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d13e      	bne.n	8004a36 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80049b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80049ba:	0412      	lsls	r2, r2, #16
 80049bc:	2300      	movs	r3, #0
 80049be:	6820      	ldr	r0, [r4, #0]
 80049c0:	f000 ff80 	bl	80058c4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80049c4:	4605      	mov	r5, r0
 80049c6:	bb98      	cbnz	r0, 8004a30 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80049c8:	4623      	mov	r3, r4
 80049ca:	f853 6b10 	ldr.w	r6, [r3], #16
 80049ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80049d6:	3404      	adds	r4, #4
 80049d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80049dc:	4630      	mov	r0, r6
 80049de:	f000 fdcf 	bl	8005580 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 80049e2:	e025      	b.n	8004a30 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80049e4:	6820      	ldr	r0, [r4, #0]
 80049e6:	f001 f813 	bl	8005a10 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80049ea:	4605      	mov	r5, r0
 80049ec:	bb00      	cbnz	r0, 8004a30 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049ee:	2100      	movs	r1, #0
 80049f0:	6820      	ldr	r0, [r4, #0]
 80049f2:	f000 fe03 	bl	80055fc <SDIO_GetResponse>
 80049f6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80049f8:	2104      	movs	r1, #4
 80049fa:	6820      	ldr	r0, [r4, #0]
 80049fc:	f000 fdfe 	bl	80055fc <SDIO_GetResponse>
 8004a00:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004a02:	2108      	movs	r1, #8
 8004a04:	6820      	ldr	r0, [r4, #0]
 8004a06:	f000 fdf9 	bl	80055fc <SDIO_GetResponse>
 8004a0a:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004a0c:	210c      	movs	r1, #12
 8004a0e:	6820      	ldr	r0, [r4, #0]
 8004a10:	f000 fdf4 	bl	80055fc <SDIO_GetResponse>
 8004a14:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8004a18:	e79e      	b.n	8004958 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004a1a:	f10d 0112 	add.w	r1, sp, #18
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	f001 f8b0 	bl	8005b84 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a24:	4605      	mov	r5, r0
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d099      	beq.n	800495e <SD_InitCard+0x22>
 8004a2a:	e001      	b.n	8004a30 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a2c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8004a30:	4628      	mov	r0, r5
 8004a32:	b010      	add	sp, #64	; 0x40
 8004a34:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a36:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004a3a:	e7f9      	b.n	8004a30 <SD_InitCard+0xf4>

08004a3c <HAL_SD_InitCard>:
{
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004a42:	2300      	movs	r3, #0
 8004a44:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004a46:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004a48:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004a4a:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004a4c:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004a4e:	2376      	movs	r3, #118	; 0x76
 8004a50:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8004a52:	ab0a      	add	r3, sp, #40	; 0x28
 8004a54:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004a58:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004a5c:	ab04      	add	r3, sp, #16
 8004a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a60:	6820      	ldr	r0, [r4, #0]
 8004a62:	f000 fd8d 	bl	8005580 <SDIO_Init>
  if(status != HAL_OK)
 8004a66:	b118      	cbz	r0, 8004a70 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8004a68:	2501      	movs	r5, #1
}
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	b00a      	add	sp, #40	; 0x28
 8004a6e:	bd70      	pop	{r4, r5, r6, pc}
 8004a70:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 8004a72:	4e1a      	ldr	r6, [pc, #104]	; (8004adc <HAL_SD_InitCard+0xa0>)
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004a7a:	6820      	ldr	r0, [r4, #0]
 8004a7c:	f000 fda1 	bl	80055c2 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8004a80:	2301      	movs	r3, #1
 8004a82:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
  HAL_Delay(2);
 8004a86:	2002      	movs	r0, #2
 8004a88:	f7fd faca 	bl	8002020 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f7ff fb9d 	bl	80041cc <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a92:	b130      	cbz	r0, 8004aa2 <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 8004a94:	2501      	movs	r5, #1
 8004a96:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a9c:	4303      	orrs	r3, r0
 8004a9e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8004aa0:	e7e3      	b.n	8004a6a <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f7ff ff4a 	bl	800493c <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004aa8:	b130      	cbz	r0, 8004ab8 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 8004aaa:	2501      	movs	r5, #1
 8004aac:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004ab0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ab2:	4303      	orrs	r3, r0
 8004ab4:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8004ab6:	e7d8      	b.n	8004a6a <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004abc:	6820      	ldr	r0, [r4, #0]
 8004abe:	f000 fe6f 	bl	80057a0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d0d1      	beq.n	8004a6a <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	4905      	ldr	r1, [pc, #20]	; (8004ae0 <HAL_SD_InitCard+0xa4>)
 8004aca:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004acc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ace:	4303      	orrs	r3, r0
 8004ad0:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ad2:	2501      	movs	r5, #1
 8004ad4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8004ad8:	e7c7      	b.n	8004a6a <HAL_SD_InitCard+0x2e>
 8004ada:	bf00      	nop
 8004adc:	42258000 	.word	0x42258000
 8004ae0:	004005ff 	.word	0x004005ff

08004ae4 <HAL_SD_Init>:
  if(hsd == NULL)
 8004ae4:	b1a8      	cbz	r0, 8004b12 <HAL_SD_Init+0x2e>
{
 8004ae6:	b510      	push	{r4, lr}
 8004ae8:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8004aea:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8004aee:	b163      	cbz	r3, 8004b0a <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 8004af0:	2303      	movs	r3, #3
 8004af2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004af6:	4620      	mov	r0, r4
 8004af8:	f7ff ffa0 	bl	8004a3c <HAL_SD_InitCard>
 8004afc:	b958      	cbnz	r0, 8004b16 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004afe:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8004b00:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004b08:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8004b0a:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8004b0c:	f7fd f830 	bl	8001b70 <HAL_SD_MspInit>
 8004b10:	e7ee      	b.n	8004af0 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8004b12:	2001      	movs	r0, #1
}
 8004b14:	4770      	bx	lr
    return HAL_ERROR;
 8004b16:	2001      	movs	r0, #1
 8004b18:	e7f6      	b.n	8004b08 <HAL_SD_Init+0x24>

08004b1a <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004b1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b1c:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004b1e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004b20:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004b22:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004b24:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004b26:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004b28:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004b2a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004b2c:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004b2e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004b30:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004b32:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004b34:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004b36:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004b38:	61cb      	str	r3, [r1, #28]
}
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	4770      	bx	lr
	...

08004b40 <HAL_SD_ConfigWideBusOperation>:
{
 8004b40:	b530      	push	{r4, r5, lr}
 8004b42:	b08b      	sub	sp, #44	; 0x2c
 8004b44:	4604      	mov	r4, r0
 8004b46:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d01c      	beq.n	8004b8e <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004b54:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004b58:	d008      	beq.n	8004b6c <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004b5a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004b5e:	d00a      	beq.n	8004b76 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004b60:	b179      	cbz	r1, 8004b82 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b62:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004b64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b68:	6383      	str	r3, [r0, #56]	; 0x38
 8004b6a:	e014      	b.n	8004b96 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b72:	6383      	str	r3, [r0, #56]	; 0x38
 8004b74:	e00f      	b.n	8004b96 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8004b76:	f7ff fc49 	bl	800440c <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8004b7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b7c:	4303      	orrs	r3, r0
 8004b7e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b80:	e009      	b.n	8004b96 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8004b82:	f7ff fc6a 	bl	800445a <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8004b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b88:	4303      	orrs	r3, r0
 8004b8a:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b8c:	e003      	b.n	8004b96 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b94:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004b96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b98:	b1c3      	cbz	r3, 8004bcc <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_SD_ConfigWideBusOperation+0xbc>)
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ba0:	2501      	movs	r5, #1
 8004ba2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004baa:	6820      	ldr	r0, [r4, #0]
 8004bac:	f000 fdf8 	bl	80057a0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bb0:	b130      	cbz	r0, 8004bc0 <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	4911      	ldr	r1, [pc, #68]	; (8004bfc <HAL_SD_ConfigWideBusOperation+0xbc>)
 8004bb6:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004bb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bba:	4303      	orrs	r3, r0
 8004bbc:	63a3      	str	r3, [r4, #56]	; 0x38
    status = HAL_ERROR;
 8004bbe:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	b00b      	add	sp, #44	; 0x2c
 8004bca:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004bcc:	6863      	ldr	r3, [r4, #4]
 8004bce:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004bd0:	68a3      	ldr	r3, [r4, #8]
 8004bd2:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004bd4:	68e3      	ldr	r3, [r4, #12]
 8004bd6:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8004bd8:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004bda:	6963      	ldr	r3, [r4, #20]
 8004bdc:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004bde:	69a3      	ldr	r3, [r4, #24]
 8004be0:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 8004be2:	ab0a      	add	r3, sp, #40	; 0x28
 8004be4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004be8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004bec:	ab04      	add	r3, sp, #16
 8004bee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	f000 fcc5 	bl	8005580 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8004bf6:	2500      	movs	r5, #0
 8004bf8:	e7d5      	b.n	8004ba6 <HAL_SD_ConfigWideBusOperation+0x66>
 8004bfa:	bf00      	nop
 8004bfc:	004005ff 	.word	0x004005ff

08004c00 <HAL_SD_GetCardState>:
{
 8004c00:	b510      	push	{r4, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8004c0a:	a901      	add	r1, sp, #4
 8004c0c:	f7ff fc4c 	bl	80044a8 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c10:	b110      	cbz	r0, 8004c18 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8004c12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c14:	4303      	orrs	r3, r0
 8004c16:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004c18:	9801      	ldr	r0, [sp, #4]
 8004c1a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd10      	pop	{r4, pc}
	...

08004c24 <SD_DMAError>:
{
 8004c24:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c26:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004c28:	f7fd fd3f 	bl	80026aa <HAL_DMA_GetError>
 8004c2c:	2802      	cmp	r0, #2
 8004c2e:	d00a      	beq.n	8004c46 <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004c30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004c34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c36:	6d52      	ldr	r2, [r2, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d005      	beq.n	8004c48 <SD_DMAError+0x24>
 8004c3c:	2a01      	cmp	r2, #1
 8004c3e:	d003      	beq.n	8004c48 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8004c40:	4620      	mov	r0, r4
 8004c42:	f7ff fd79 	bl	8004738 <HAL_SD_ErrorCallback>
}
 8004c46:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	4a0f      	ldr	r2, [pc, #60]	; (8004c88 <SD_DMAError+0x64>)
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004c4e:	6822      	ldr	r2, [r4, #0]
 8004c50:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004c52:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8004c56:	63d3      	str	r3, [r2, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004c58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c5e:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004c60:	4620      	mov	r0, r4
 8004c62:	f7ff ffcd 	bl	8004c00 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004c66:	3805      	subs	r0, #5
 8004c68:	2801      	cmp	r0, #1
 8004c6a:	d905      	bls.n	8004c78 <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	6323      	str	r3, [r4, #48]	; 0x30
 8004c76:	e7e3      	b.n	8004c40 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004c78:	6820      	ldr	r0, [r4, #0]
 8004c7a:	f000 fe09 	bl	8005890 <SDMMC_CmdStopTransfer>
 8004c7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c80:	4303      	orrs	r3, r0
 8004c82:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c84:	e7f2      	b.n	8004c6c <SD_DMAError+0x48>
 8004c86:	bf00      	nop
 8004c88:	004005ff 	.word	0x004005ff

08004c8c <SD_DMATxAbort>:
{
 8004c8c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c8e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f7ff ffb1 	bl	8004c00 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ca8:	3805      	subs	r0, #5
 8004caa:	2801      	cmp	r0, #1
 8004cac:	d905      	bls.n	8004cba <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004cae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cb0:	b953      	cbnz	r3, 8004cc8 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	f001 fe47 	bl	8006946 <HAL_SD_AbortCallback>
}
 8004cb8:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004cba:	6820      	ldr	r0, [r4, #0]
 8004cbc:	f000 fde8 	bl	8005890 <SDMMC_CmdStopTransfer>
 8004cc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cc2:	4303      	orrs	r3, r0
 8004cc4:	63a3      	str	r3, [r4, #56]	; 0x38
 8004cc6:	e7f2      	b.n	8004cae <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f7ff fd35 	bl	8004738 <HAL_SD_ErrorCallback>
}
 8004cce:	e7f3      	b.n	8004cb8 <SD_DMATxAbort+0x2c>

08004cd0 <SD_DMARxAbort>:
{
 8004cd0:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004cd2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	f240 523a 	movw	r2, #1338	; 0x53a
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f7ff ff8f 	bl	8004c00 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004cec:	3805      	subs	r0, #5
 8004cee:	2801      	cmp	r0, #1
 8004cf0:	d905      	bls.n	8004cfe <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004cf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cf4:	b953      	cbnz	r3, 8004d0c <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f001 fe25 	bl	8006946 <HAL_SD_AbortCallback>
}
 8004cfc:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004cfe:	6820      	ldr	r0, [r4, #0]
 8004d00:	f000 fdc6 	bl	8005890 <SDMMC_CmdStopTransfer>
 8004d04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d06:	4303      	orrs	r3, r0
 8004d08:	63a3      	str	r3, [r4, #56]	; 0x38
 8004d0a:	e7f2      	b.n	8004cf2 <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f7ff fd13 	bl	8004738 <HAL_SD_ErrorCallback>
}
 8004d12:	e7f3      	b.n	8004cfc <SD_DMARxAbort+0x2c>

08004d14 <HAL_SD_IRQHandler>:
{
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8004d18:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004d1a:	6803      	ldr	r3, [r0, #0]
 8004d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004d22:	d002      	beq.n	8004d2a <HAL_SD_IRQHandler+0x16>
 8004d24:	f015 0f08 	tst.w	r5, #8
 8004d28:	d128      	bne.n	8004d7c <HAL_SD_IRQHandler+0x68>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d2c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004d30:	d05a      	beq.n	8004de8 <HAL_SD_IRQHandler+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004d38:	6822      	ldr	r2, [r4, #0]
 8004d3a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004d3c:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8004d40:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004d44:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004d46:	6822      	ldr	r2, [r4, #0]
 8004d48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8004d50:	f015 0f08 	tst.w	r5, #8
 8004d54:	d026      	beq.n	8004da4 <HAL_SD_IRQHandler+0x90>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004d56:	f015 0f22 	tst.w	r5, #34	; 0x22
 8004d5a:	d112      	bne.n	8004d82 <HAL_SD_IRQHandler+0x6e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004d6e:	f015 0f03 	tst.w	r5, #3
 8004d72:	d013      	beq.n	8004d9c <HAL_SD_IRQHandler+0x88>
        HAL_SD_RxCpltCallback(hsd);
 8004d74:	4620      	mov	r0, r4
 8004d76:	f001 fdee 	bl	8006956 <HAL_SD_RxCpltCallback>
 8004d7a:	e001      	b.n	8004d80 <HAL_SD_IRQHandler+0x6c>
    SD_Read_IT(hsd);
 8004d7c:	f7ff fa86 	bl	800428c <SD_Read_IT>
}
 8004d80:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	f000 fd84 	bl	8005890 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d0e6      	beq.n	8004d5c <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8004d8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d90:	4313      	orrs	r3, r2
 8004d92:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004d94:	4620      	mov	r0, r4
 8004d96:	f7ff fccf 	bl	8004738 <HAL_SD_ErrorCallback>
 8004d9a:	e7df      	b.n	8004d5c <HAL_SD_IRQHandler+0x48>
        HAL_SD_TxCpltCallback(hsd);
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f001 fdd6 	bl	800694e <HAL_SD_TxCpltCallback>
 8004da2:	e7ed      	b.n	8004d80 <HAL_SD_IRQHandler+0x6c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004da4:	f015 0f80 	tst.w	r5, #128	; 0x80
 8004da8:	d0ea      	beq.n	8004d80 <HAL_SD_IRQHandler+0x6c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004daa:	f015 0f20 	tst.w	r5, #32
 8004dae:	d10e      	bne.n	8004dce <HAL_SD_IRQHandler+0xba>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004db0:	f015 0f03 	tst.w	r5, #3
 8004db4:	d1e4      	bne.n	8004d80 <HAL_SD_IRQHandler+0x6c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004dba:	f023 0308 	bic.w	r3, r3, #8
 8004dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f001 fdc1 	bl	800694e <HAL_SD_TxCpltCallback>
 8004dcc:	e7d8      	b.n	8004d80 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004dce:	6820      	ldr	r0, [r4, #0]
 8004dd0:	f000 fd5e 	bl	8005890 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d0ea      	beq.n	8004db0 <HAL_SD_IRQHandler+0x9c>
          hsd->ErrorCode |= errorstate;
 8004dda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004de0:	4620      	mov	r0, r4
 8004de2:	f7ff fca9 	bl	8004738 <HAL_SD_ErrorCallback>
 8004de6:	e7e3      	b.n	8004db0 <HAL_SD_IRQHandler+0x9c>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dea:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004dee:	d002      	beq.n	8004df6 <HAL_SD_IRQHandler+0xe2>
 8004df0:	f015 0f08 	tst.w	r5, #8
 8004df4:	d14a      	bne.n	8004e8c <HAL_SD_IRQHandler+0x178>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8004df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df8:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 8004dfc:	d0c0      	beq.n	8004d80 <HAL_SD_IRQHandler+0x6c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e00:	f012 0f02 	tst.w	r2, #2
 8004e04:	d003      	beq.n	8004e0e <HAL_SD_IRQHandler+0xfa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e08:	f042 0202 	orr.w	r2, r2, #2
 8004e0c:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e10:	f012 0f08 	tst.w	r2, #8
 8004e14:	d003      	beq.n	8004e1e <HAL_SD_IRQHandler+0x10a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004e16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e18:	f042 0208 	orr.w	r2, r2, #8
 8004e1c:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e20:	f012 0f20 	tst.w	r2, #32
 8004e24:	d003      	beq.n	8004e2e <HAL_SD_IRQHandler+0x11a>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004e26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e28:	f042 0220 	orr.w	r2, r2, #32
 8004e2c:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e30:	f012 0f10 	tst.w	r2, #16
 8004e34:	d003      	beq.n	8004e3e <HAL_SD_IRQHandler+0x12a>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004e36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e38:	f042 0210 	orr.w	r2, r2, #16
 8004e3c:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e3e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004e44:	6822      	ldr	r2, [r4, #0]
 8004e46:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004e48:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8004e4c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004e4e:	6820      	ldr	r0, [r4, #0]
 8004e50:	f000 fd1e 	bl	8005890 <SDMMC_CmdStopTransfer>
 8004e54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e56:	4303      	orrs	r3, r0
 8004e58:	63a3      	str	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004e5a:	f015 0f08 	tst.w	r5, #8
 8004e5e:	d119      	bne.n	8004e94 <HAL_SD_IRQHandler+0x180>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004e60:	f015 0f80 	tst.w	r5, #128	; 0x80
 8004e64:	d08c      	beq.n	8004d80 <HAL_SD_IRQHandler+0x6c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004e66:	f015 0f30 	tst.w	r5, #48	; 0x30
 8004e6a:	d11c      	bne.n	8004ea6 <HAL_SD_IRQHandler+0x192>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004e6c:	f015 0f03 	tst.w	r5, #3
 8004e70:	d026      	beq.n	8004ec0 <HAL_SD_IRQHandler+0x1ac>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e74:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <HAL_SD_IRQHandler+0x1c0>)
 8004e76:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e78:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004e7a:	f7fd fb12 	bl	80024a2 <HAL_DMA_Abort_IT>
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	f43f af7e 	beq.w	8004d80 <HAL_SD_IRQHandler+0x6c>
          SD_DMARxAbort(hsd->hdmarx);
 8004e84:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004e86:	f7ff ff23 	bl	8004cd0 <SD_DMARxAbort>
 8004e8a:	e779      	b.n	8004d80 <HAL_SD_IRQHandler+0x6c>
    SD_Write_IT(hsd);
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f7ff fa19 	bl	80042c4 <SD_Write_IT>
 8004e92:	e775      	b.n	8004d80 <HAL_SD_IRQHandler+0x6c>
      hsd->State = HAL_SD_STATE_READY;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f7ff fc4a 	bl	8004738 <HAL_SD_ErrorCallback>
 8004ea4:	e76c      	b.n	8004d80 <HAL_SD_IRQHandler+0x6c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004ea6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ea8:	4a0b      	ldr	r2, [pc, #44]	; (8004ed8 <HAL_SD_IRQHandler+0x1c4>)
 8004eaa:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004eac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004eae:	f7fd faf8 	bl	80024a2 <HAL_DMA_Abort_IT>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	f43f af64 	beq.w	8004d80 <HAL_SD_IRQHandler+0x6c>
          SD_DMATxAbort(hsd->hdmatx);
 8004eb8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004eba:	f7ff fee7 	bl	8004c8c <SD_DMATxAbort>
 8004ebe:	e75f      	b.n	8004d80 <HAL_SD_IRQHandler+0x6c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004eca:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f001 fd3a 	bl	8006946 <HAL_SD_AbortCallback>
}
 8004ed2:	e755      	b.n	8004d80 <HAL_SD_IRQHandler+0x6c>
 8004ed4:	08004cd1 	.word	0x08004cd1
 8004ed8:	08004c8d 	.word	0x08004c8d

08004edc <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d05a      	beq.n	8004f96 <HAL_SPI_Init+0xba>
{
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ee4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ee6:	b933      	cbnz	r3, 8004ef6 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ee8:	6843      	ldr	r3, [r0, #4]
 8004eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eee:	d005      	beq.n	8004efc <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61c3      	str	r3, [r0, #28]
 8004ef4:	e002      	b.n	8004efc <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004efa:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f00:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d040      	beq.n	8004f8a <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f0e:	6822      	ldr	r2, [r4, #0]
 8004f10:	6813      	ldr	r3, [r2, #0]
 8004f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f16:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f18:	6863      	ldr	r3, [r4, #4]
 8004f1a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004f1e:	68a2      	ldr	r2, [r4, #8]
 8004f20:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8004f24:	4313      	orrs	r3, r2
 8004f26:	68e2      	ldr	r2, [r4, #12]
 8004f28:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	6922      	ldr	r2, [r4, #16]
 8004f30:	f002 0202 	and.w	r2, r2, #2
 8004f34:	4313      	orrs	r3, r2
 8004f36:	6962      	ldr	r2, [r4, #20]
 8004f38:	f002 0201 	and.w	r2, r2, #1
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	69a2      	ldr	r2, [r4, #24]
 8004f40:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004f44:	4313      	orrs	r3, r2
 8004f46:	69e2      	ldr	r2, [r4, #28]
 8004f48:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	6a22      	ldr	r2, [r4, #32]
 8004f50:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004f54:	4313      	orrs	r3, r2
 8004f56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f58:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004f5c:	6821      	ldr	r1, [r4, #0]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f62:	8b63      	ldrh	r3, [r4, #26]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004f6a:	f002 0210 	and.w	r2, r2, #16
 8004f6e:	6821      	ldr	r1, [r4, #0]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	69d3      	ldr	r3, [r2, #28]
 8004f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f7c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f7e:	2000      	movs	r0, #0
 8004f80:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8004f88:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004f8a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f7fc fecc 	bl	8001d2c <HAL_SPI_MspInit>
 8004f94:	e7b8      	b.n	8004f08 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8004f96:	2001      	movs	r0, #1
}
 8004f98:	4770      	bx	lr

08004f9a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f9a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f9c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f9e:	6a04      	ldr	r4, [r0, #32]
 8004fa0:	f024 0401 	bic.w	r4, r4, #1
 8004fa4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fa6:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fa8:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fac:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fb0:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004fb4:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fb6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004fb8:	6203      	str	r3, [r0, #32]
}
 8004fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc2:	6a03      	ldr	r3, [r0, #32]
 8004fc4:	f023 0310 	bic.w	r3, r3, #16
 8004fc8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fca:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004fcc:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fce:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fd2:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fda:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fde:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004fe0:	6203      	str	r3, [r0, #32]
}
 8004fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fe8:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fee:	430b      	orrs	r3, r1
 8004ff0:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ff4:	6083      	str	r3, [r0, #8]
}
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004ff8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d132      	bne.n	8005068 <HAL_TIM_Base_Start+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8005002:	2302      	movs	r3, #2
 8005004:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005008:	6803      	ldr	r3, [r0, #0]
 800500a:	4a19      	ldr	r2, [pc, #100]	; (8005070 <HAL_TIM_Base_Start+0x78>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d020      	beq.n	8005052 <HAL_TIM_Base_Start+0x5a>
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005014:	d01d      	beq.n	8005052 <HAL_TIM_Base_Start+0x5a>
 8005016:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800501a:	4293      	cmp	r3, r2
 800501c:	d019      	beq.n	8005052 <HAL_TIM_Base_Start+0x5a>
 800501e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005022:	4293      	cmp	r3, r2
 8005024:	d015      	beq.n	8005052 <HAL_TIM_Base_Start+0x5a>
 8005026:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800502a:	4293      	cmp	r3, r2
 800502c:	d011      	beq.n	8005052 <HAL_TIM_Base_Start+0x5a>
 800502e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005032:	4293      	cmp	r3, r2
 8005034:	d00d      	beq.n	8005052 <HAL_TIM_Base_Start+0x5a>
 8005036:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800503a:	4293      	cmp	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_TIM_Base_Start+0x5a>
 800503e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005042:	4293      	cmp	r3, r2
 8005044:	d005      	beq.n	8005052 <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800504e:	2000      	movs	r0, #0
 8005050:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005058:	2a06      	cmp	r2, #6
 800505a:	d007      	beq.n	800506c <HAL_TIM_Base_Start+0x74>
      __HAL_TIM_ENABLE(htim);
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005064:	2000      	movs	r0, #0
 8005066:	4770      	bx	lr
    return HAL_ERROR;
 8005068:	2001      	movs	r0, #1
 800506a:	4770      	bx	lr
  return HAL_OK;
 800506c:	2000      	movs	r0, #0
}
 800506e:	4770      	bx	lr
 8005070:	40010000 	.word	0x40010000

08005074 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005074:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	d137      	bne.n	80050ee <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 800507e:	2302      	movs	r3, #2
 8005080:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005084:	6802      	ldr	r2, [r0, #0]
 8005086:	68d3      	ldr	r3, [r2, #12]
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508e:	6803      	ldr	r3, [r0, #0]
 8005090:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_TIM_Base_Start_IT+0x84>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d020      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x64>
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d01d      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x64>
 800509c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d019      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x64>
 80050a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d015      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x64>
 80050ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d011      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x64>
 80050b4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00d      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x64>
 80050bc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d009      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x64>
 80050c4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d005      	beq.n	80050d8 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80050d4:	2000      	movs	r0, #0
 80050d6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050de:	2a06      	cmp	r2, #6
 80050e0:	d007      	beq.n	80050f2 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	f042 0201 	orr.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80050ea:	2000      	movs	r0, #0
 80050ec:	4770      	bx	lr
    return HAL_ERROR;
 80050ee:	2001      	movs	r0, #1
 80050f0:	4770      	bx	lr
  return HAL_OK;
 80050f2:	2000      	movs	r0, #0
}
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000

080050fc <HAL_TIM_OC_DelayElapsedCallback>:
}
 80050fc:	4770      	bx	lr

080050fe <HAL_TIM_IC_CaptureCallback>:
}
 80050fe:	4770      	bx	lr

08005100 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005100:	4770      	bx	lr

08005102 <HAL_TIM_TriggerCallback>:
}
 8005102:	4770      	bx	lr

08005104 <HAL_TIM_IRQHandler>:
{
 8005104:	b510      	push	{r4, lr}
 8005106:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005108:	6803      	ldr	r3, [r0, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	f012 0f02 	tst.w	r2, #2
 8005110:	d011      	beq.n	8005136 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	f012 0f02 	tst.w	r2, #2
 8005118:	d00d      	beq.n	8005136 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800511a:	f06f 0202 	mvn.w	r2, #2
 800511e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005120:	2301      	movs	r3, #1
 8005122:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005124:	6803      	ldr	r3, [r0, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f013 0f03 	tst.w	r3, #3
 800512c:	d070      	beq.n	8005210 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800512e:	f7ff ffe6 	bl	80050fe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	2300      	movs	r3, #0
 8005134:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	f012 0f04 	tst.w	r2, #4
 800513e:	d012      	beq.n	8005166 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	f012 0f04 	tst.w	r2, #4
 8005146:	d00e      	beq.n	8005166 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005148:	f06f 0204 	mvn.w	r2, #4
 800514c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800514e:	2302      	movs	r3, #2
 8005150:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f413 7f40 	tst.w	r3, #768	; 0x300
 800515a:	d05f      	beq.n	800521c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800515c:	4620      	mov	r0, r4
 800515e:	f7ff ffce 	bl	80050fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005162:	2300      	movs	r3, #0
 8005164:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	f012 0f08 	tst.w	r2, #8
 800516e:	d012      	beq.n	8005196 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	f012 0f08 	tst.w	r2, #8
 8005176:	d00e      	beq.n	8005196 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005178:	f06f 0208 	mvn.w	r2, #8
 800517c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800517e:	2304      	movs	r3, #4
 8005180:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f013 0f03 	tst.w	r3, #3
 800518a:	d04e      	beq.n	800522a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800518c:	4620      	mov	r0, r4
 800518e:	f7ff ffb6 	bl	80050fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	2300      	movs	r3, #0
 8005194:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	f012 0f10 	tst.w	r2, #16
 800519e:	d012      	beq.n	80051c6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	f012 0f10 	tst.w	r2, #16
 80051a6:	d00e      	beq.n	80051c6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051a8:	f06f 0210 	mvn.w	r2, #16
 80051ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ae:	2308      	movs	r3, #8
 80051b0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80051ba:	d03d      	beq.n	8005238 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80051bc:	4620      	mov	r0, r4
 80051be:	f7ff ff9e 	bl	80050fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c2:	2300      	movs	r3, #0
 80051c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	f012 0f01 	tst.w	r2, #1
 80051ce:	d003      	beq.n	80051d8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	f012 0f01 	tst.w	r2, #1
 80051d6:	d136      	bne.n	8005246 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80051e0:	d003      	beq.n	80051ea <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80051e8:	d134      	bne.n	8005254 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80051f2:	d003      	beq.n	80051fc <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80051fa:	d132      	bne.n	8005262 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	f012 0f20 	tst.w	r2, #32
 8005204:	d003      	beq.n	800520e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	f012 0f20 	tst.w	r2, #32
 800520c:	d130      	bne.n	8005270 <HAL_TIM_IRQHandler+0x16c>
}
 800520e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005210:	f7ff ff74 	bl	80050fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005214:	4620      	mov	r0, r4
 8005216:	f7ff ff73 	bl	8005100 <HAL_TIM_PWM_PulseFinishedCallback>
 800521a:	e78a      	b.n	8005132 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521c:	4620      	mov	r0, r4
 800521e:	f7ff ff6d 	bl	80050fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005222:	4620      	mov	r0, r4
 8005224:	f7ff ff6c 	bl	8005100 <HAL_TIM_PWM_PulseFinishedCallback>
 8005228:	e79b      	b.n	8005162 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	4620      	mov	r0, r4
 800522c:	f7ff ff66 	bl	80050fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	4620      	mov	r0, r4
 8005232:	f7ff ff65 	bl	8005100 <HAL_TIM_PWM_PulseFinishedCallback>
 8005236:	e7ac      	b.n	8005192 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005238:	4620      	mov	r0, r4
 800523a:	f7ff ff5f 	bl	80050fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523e:	4620      	mov	r0, r4
 8005240:	f7ff ff5e 	bl	8005100 <HAL_TIM_PWM_PulseFinishedCallback>
 8005244:	e7bd      	b.n	80051c2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005246:	f06f 0201 	mvn.w	r2, #1
 800524a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800524c:	4620      	mov	r0, r4
 800524e:	f7fc f96d 	bl	800152c <HAL_TIM_PeriodElapsedCallback>
 8005252:	e7c1      	b.n	80051d8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005254:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005258:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800525a:	4620      	mov	r0, r4
 800525c:	f000 f973 	bl	8005546 <HAL_TIMEx_BreakCallback>
 8005260:	e7c3      	b.n	80051ea <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005262:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005266:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005268:	4620      	mov	r0, r4
 800526a:	f7ff ff4a 	bl	8005102 <HAL_TIM_TriggerCallback>
 800526e:	e7c5      	b.n	80051fc <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005270:	f06f 0220 	mvn.w	r2, #32
 8005274:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005276:	4620      	mov	r0, r4
 8005278:	f000 f964 	bl	8005544 <HAL_TIMEx_CommutCallback>
}
 800527c:	e7c7      	b.n	800520e <HAL_TIM_IRQHandler+0x10a>
	...

08005280 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005280:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005282:	4a30      	ldr	r2, [pc, #192]	; (8005344 <TIM_Base_SetConfig+0xc4>)
 8005284:	4290      	cmp	r0, r2
 8005286:	d012      	beq.n	80052ae <TIM_Base_SetConfig+0x2e>
 8005288:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800528c:	d00f      	beq.n	80052ae <TIM_Base_SetConfig+0x2e>
 800528e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005292:	4290      	cmp	r0, r2
 8005294:	d00b      	beq.n	80052ae <TIM_Base_SetConfig+0x2e>
 8005296:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800529a:	4290      	cmp	r0, r2
 800529c:	d007      	beq.n	80052ae <TIM_Base_SetConfig+0x2e>
 800529e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052a2:	4290      	cmp	r0, r2
 80052a4:	d003      	beq.n	80052ae <TIM_Base_SetConfig+0x2e>
 80052a6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80052aa:	4290      	cmp	r0, r2
 80052ac:	d103      	bne.n	80052b6 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80052b2:	684a      	ldr	r2, [r1, #4]
 80052b4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052b6:	4a23      	ldr	r2, [pc, #140]	; (8005344 <TIM_Base_SetConfig+0xc4>)
 80052b8:	4290      	cmp	r0, r2
 80052ba:	d02a      	beq.n	8005312 <TIM_Base_SetConfig+0x92>
 80052bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80052c0:	d027      	beq.n	8005312 <TIM_Base_SetConfig+0x92>
 80052c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80052c6:	4290      	cmp	r0, r2
 80052c8:	d023      	beq.n	8005312 <TIM_Base_SetConfig+0x92>
 80052ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052ce:	4290      	cmp	r0, r2
 80052d0:	d01f      	beq.n	8005312 <TIM_Base_SetConfig+0x92>
 80052d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052d6:	4290      	cmp	r0, r2
 80052d8:	d01b      	beq.n	8005312 <TIM_Base_SetConfig+0x92>
 80052da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80052de:	4290      	cmp	r0, r2
 80052e0:	d017      	beq.n	8005312 <TIM_Base_SetConfig+0x92>
 80052e2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80052e6:	4290      	cmp	r0, r2
 80052e8:	d013      	beq.n	8005312 <TIM_Base_SetConfig+0x92>
 80052ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052ee:	4290      	cmp	r0, r2
 80052f0:	d00f      	beq.n	8005312 <TIM_Base_SetConfig+0x92>
 80052f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052f6:	4290      	cmp	r0, r2
 80052f8:	d00b      	beq.n	8005312 <TIM_Base_SetConfig+0x92>
 80052fa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80052fe:	4290      	cmp	r0, r2
 8005300:	d007      	beq.n	8005312 <TIM_Base_SetConfig+0x92>
 8005302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005306:	4290      	cmp	r0, r2
 8005308:	d003      	beq.n	8005312 <TIM_Base_SetConfig+0x92>
 800530a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800530e:	4290      	cmp	r0, r2
 8005310:	d103      	bne.n	800531a <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005316:	68ca      	ldr	r2, [r1, #12]
 8005318:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800531a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800531e:	694a      	ldr	r2, [r1, #20]
 8005320:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005322:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005324:	688b      	ldr	r3, [r1, #8]
 8005326:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005328:	680b      	ldr	r3, [r1, #0]
 800532a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <TIM_Base_SetConfig+0xc4>)
 800532e:	4298      	cmp	r0, r3
 8005330:	d003      	beq.n	800533a <TIM_Base_SetConfig+0xba>
 8005332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005336:	4298      	cmp	r0, r3
 8005338:	d101      	bne.n	800533e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 800533a:	690b      	ldr	r3, [r1, #16]
 800533c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800533e:	2301      	movs	r3, #1
 8005340:	6143      	str	r3, [r0, #20]
}
 8005342:	4770      	bx	lr
 8005344:	40010000 	.word	0x40010000

08005348 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005348:	b340      	cbz	r0, 800539c <HAL_TIM_Base_Init+0x54>
{
 800534a:	b510      	push	{r4, lr}
 800534c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800534e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005352:	b1f3      	cbz	r3, 8005392 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	2302      	movs	r3, #2
 8005356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535a:	4621      	mov	r1, r4
 800535c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005360:	f7ff ff8e 	bl	8005280 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005364:	2301      	movs	r3, #1
 8005366:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800536e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005372:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005376:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800537e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005382:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800538a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800538e:	2000      	movs	r0, #0
}
 8005390:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005392:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005396:	f7fc fd01 	bl	8001d9c <HAL_TIM_Base_MspInit>
 800539a:	e7db      	b.n	8005354 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800539c:	2001      	movs	r0, #1
}
 800539e:	4770      	bx	lr

080053a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053a0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053a2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a4:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80053ac:	430a      	orrs	r2, r1
 80053ae:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b2:	6082      	str	r2, [r0, #8]
}
 80053b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80053ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d078      	beq.n	80054b4 <HAL_TIM_ConfigClockSource+0xfa>
{
 80053c2:	b510      	push	{r4, lr}
 80053c4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80053c6:	2301      	movs	r3, #1
 80053c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	2302      	movs	r3, #2
 80053ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80053d2:	6802      	ldr	r2, [r0, #0]
 80053d4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80053de:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80053e0:	680b      	ldr	r3, [r1, #0]
 80053e2:	2b60      	cmp	r3, #96	; 0x60
 80053e4:	d04c      	beq.n	8005480 <HAL_TIM_ConfigClockSource+0xc6>
 80053e6:	d829      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x82>
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	d054      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0xdc>
 80053ec:	d90c      	bls.n	8005408 <HAL_TIM_ConfigClockSource+0x4e>
 80053ee:	2b50      	cmp	r3, #80	; 0x50
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f2:	68ca      	ldr	r2, [r1, #12]
 80053f4:	6849      	ldr	r1, [r1, #4]
 80053f6:	6800      	ldr	r0, [r0, #0]
 80053f8:	f7ff fdcf 	bl	8004f9a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053fc:	2150      	movs	r1, #80	; 0x50
 80053fe:	6820      	ldr	r0, [r4, #0]
 8005400:	f7ff fdf2 	bl	8004fe8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005404:	2000      	movs	r0, #0
      break;
 8005406:	e005      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005408:	2b20      	cmp	r3, #32
 800540a:	d00d      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0x6e>
 800540c:	d909      	bls.n	8005422 <HAL_TIM_ConfigClockSource+0x68>
 800540e:	2b30      	cmp	r3, #48	; 0x30
 8005410:	d00a      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8005412:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8005414:	2301      	movs	r3, #1
 8005416:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800541a:	2300      	movs	r3, #0
 800541c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005420:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8005422:	b10b      	cbz	r3, 8005428 <HAL_TIM_ConfigClockSource+0x6e>
 8005424:	2b10      	cmp	r3, #16
 8005426:	d105      	bne.n	8005434 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005428:	4619      	mov	r1, r3
 800542a:	6820      	ldr	r0, [r4, #0]
 800542c:	f7ff fddc 	bl	8004fe8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005430:	2000      	movs	r0, #0
      break;
 8005432:	e7ef      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005434:	2001      	movs	r0, #1
 8005436:	e7ed      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x5a>
 8005438:	2001      	movs	r0, #1
 800543a:	e7eb      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800543c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005440:	d034      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0xf2>
 8005442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005446:	d10c      	bne.n	8005462 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8005448:	68cb      	ldr	r3, [r1, #12]
 800544a:	684a      	ldr	r2, [r1, #4]
 800544c:	6889      	ldr	r1, [r1, #8]
 800544e:	6800      	ldr	r0, [r0, #0]
 8005450:	f7ff ffa6 	bl	80053a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005454:	6822      	ldr	r2, [r4, #0]
 8005456:	6893      	ldr	r3, [r2, #8]
 8005458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800545c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800545e:	2000      	movs	r0, #0
      break;
 8005460:	e7d8      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005462:	2b70      	cmp	r3, #112	; 0x70
 8005464:	d124      	bne.n	80054b0 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8005466:	68cb      	ldr	r3, [r1, #12]
 8005468:	684a      	ldr	r2, [r1, #4]
 800546a:	6889      	ldr	r1, [r1, #8]
 800546c:	6800      	ldr	r0, [r0, #0]
 800546e:	f7ff ff97 	bl	80053a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005476:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800547a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800547c:	2000      	movs	r0, #0
      break;
 800547e:	e7c9      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005480:	68ca      	ldr	r2, [r1, #12]
 8005482:	6849      	ldr	r1, [r1, #4]
 8005484:	6800      	ldr	r0, [r0, #0]
 8005486:	f7ff fd9b 	bl	8004fc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800548a:	2160      	movs	r1, #96	; 0x60
 800548c:	6820      	ldr	r0, [r4, #0]
 800548e:	f7ff fdab 	bl	8004fe8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005492:	2000      	movs	r0, #0
      break;
 8005494:	e7be      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005496:	68ca      	ldr	r2, [r1, #12]
 8005498:	6849      	ldr	r1, [r1, #4]
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	f7ff fd7d 	bl	8004f9a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a0:	2140      	movs	r1, #64	; 0x40
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	f7ff fda0 	bl	8004fe8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80054a8:	2000      	movs	r0, #0
      break;
 80054aa:	e7b3      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80054ac:	2000      	movs	r0, #0
 80054ae:	e7b1      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80054b0:	2001      	movs	r0, #1
 80054b2:	e7af      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80054b4:	2002      	movs	r0, #2
}
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80054bc:	2a01      	cmp	r2, #1
 80054be:	d03d      	beq.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 80054c0:	b410      	push	{r4}
 80054c2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80054c4:	2201      	movs	r2, #1
 80054c6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ca:	2202      	movs	r2, #2
 80054cc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d0:	6802      	ldr	r2, [r0, #0]
 80054d2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d4:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d6:	f020 0c70 	bic.w	ip, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054da:	6808      	ldr	r0, [r1, #0]
 80054dc:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054e0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4816      	ldr	r0, [pc, #88]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80054e6:	4282      	cmp	r2, r0
 80054e8:	d01a      	beq.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80054ea:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80054ee:	d017      	beq.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80054f0:	f5a0 407c 	sub.w	r0, r0, #64512	; 0xfc00
 80054f4:	4282      	cmp	r2, r0
 80054f6:	d013      	beq.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80054f8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80054fc:	4282      	cmp	r2, r0
 80054fe:	d00f      	beq.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8005500:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005504:	4282      	cmp	r2, r0
 8005506:	d00b      	beq.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8005508:	f500 4078 	add.w	r0, r0, #63488	; 0xf800
 800550c:	4282      	cmp	r2, r0
 800550e:	d007      	beq.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8005510:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8005514:	4282      	cmp	r2, r0
 8005516:	d003      	beq.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8005518:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800551c:	4282      	cmp	r2, r0
 800551e:	d104      	bne.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005520:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005524:	6849      	ldr	r1, [r1, #4]
 8005526:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005528:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005530:	2000      	movs	r0, #0
 8005532:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8005536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800553a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800553c:	2002      	movs	r0, #2
}
 800553e:	4770      	bx	lr
 8005540:	40010000 	.word	0x40010000

08005544 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005544:	4770      	bx	lr

08005546 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005546:	4770      	bx	lr

08005548 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005548:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <SDMMC_GetCmdError+0x30>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a0b      	ldr	r2, [pc, #44]	; (800557c <SDMMC_GetCmdError+0x34>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	0a5b      	lsrs	r3, r3, #9
 8005554:	f241 3288 	movw	r2, #5000	; 0x1388
 8005558:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 800555c:	461a      	mov	r2, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b13a      	cbz	r2, 8005572 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005562:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005564:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005568:	d0f8      	beq.n	800555c <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800556a:	23c5      	movs	r3, #197	; 0xc5
 800556c:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800556e:	2000      	movs	r0, #0
 8005570:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005572:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005576:	4770      	bx	lr
 8005578:	20000134 	.word	0x20000134
 800557c:	10624dd3 	.word	0x10624dd3

08005580 <SDIO_Init>:
{
 8005580:	b084      	sub	sp, #16
 8005582:	f10d 0c04 	add.w	ip, sp, #4
 8005586:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800558a:	460b      	mov	r3, r1
 800558c:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800558e:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 8005590:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8005592:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 8005594:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8005596:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8005598:	4313      	orrs	r3, r2
             Init.ClockDiv
 800559a:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 800559c:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800559e:	6842      	ldr	r2, [r0, #4]
 80055a0:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 80055a4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80055a8:	4313      	orrs	r3, r2
 80055aa:	6043      	str	r3, [r0, #4]
}
 80055ac:	2000      	movs	r0, #0
 80055ae:	b004      	add	sp, #16
 80055b0:	4770      	bx	lr

080055b2 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 80055b2:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80055b6:	4770      	bx	lr

080055b8 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 80055b8:	680b      	ldr	r3, [r1, #0]
 80055ba:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80055be:	2000      	movs	r0, #0
 80055c0:	4770      	bx	lr

080055c2 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80055c2:	2303      	movs	r3, #3
 80055c4:	6003      	str	r3, [r0, #0]
}
 80055c6:	2000      	movs	r0, #0
 80055c8:	4770      	bx	lr

080055ca <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80055ca:	6800      	ldr	r0, [r0, #0]
}
 80055cc:	f000 0003 	and.w	r0, r0, #3
 80055d0:	4770      	bx	lr

080055d2 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 80055d2:	680b      	ldr	r3, [r1, #0]
 80055d4:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055d6:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 80055d8:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055da:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 80055dc:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 80055de:	4313      	orrs	r3, r2
                       Command->CPSM);
 80055e0:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 80055e2:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80055e4:	68c2      	ldr	r2, [r0, #12]
 80055e6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80055ea:	f022 020f 	bic.w	r2, r2, #15
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60c3      	str	r3, [r0, #12]
}
 80055f2:	2000      	movs	r0, #0
 80055f4:	4770      	bx	lr

080055f6 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 80055f6:	6900      	ldr	r0, [r0, #16]
}
 80055f8:	b2c0      	uxtb	r0, r0
 80055fa:	4770      	bx	lr

080055fc <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80055fc:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80055fe:	5840      	ldr	r0, [r0, r1]
}  
 8005600:	4770      	bx	lr

08005602 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8005602:	680b      	ldr	r3, [r1, #0]
 8005604:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8005606:	684b      	ldr	r3, [r1, #4]
 8005608:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800560a:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800560c:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800560e:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8005610:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8005612:	4313      	orrs	r3, r2
                       Data->DPSM);
 8005614:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8005616:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005618:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800561a:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 800561e:	4313      	orrs	r3, r2
 8005620:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8005622:	2000      	movs	r0, #0
 8005624:	4770      	bx	lr

08005626 <SDMMC_CmdGoIdleState>:
{
 8005626:	b510      	push	{r4, lr}
 8005628:	b086      	sub	sp, #24
 800562a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005630:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005632:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005634:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800563a:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800563c:	a901      	add	r1, sp, #4
 800563e:	f7ff ffc8 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff ff80 	bl	8005548 <SDMMC_GetCmdError>
}
 8005648:	b006      	add	sp, #24
 800564a:	bd10      	pop	{r4, pc}

0800564c <SDMMC_GetCmdResp1>:
{
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4604      	mov	r4, r0
 8005650:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005652:	4b50      	ldr	r3, [pc, #320]	; (8005794 <SDMMC_GetCmdResp1+0x148>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4950      	ldr	r1, [pc, #320]	; (8005798 <SDMMC_GetCmdResp1+0x14c>)
 8005658:	fba1 1303 	umull	r1, r3, r1, r3
 800565c:	0a5b      	lsrs	r3, r3, #9
 800565e:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 8005662:	4613      	mov	r3, r2
 8005664:	3a01      	subs	r2, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d05d      	beq.n	8005726 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 800566a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800566c:	f013 0f45 	tst.w	r3, #69	; 0x45
 8005670:	d0f7      	beq.n	8005662 <SDMMC_GetCmdResp1+0x16>
 8005672:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005676:	d1f4      	bne.n	8005662 <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005678:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800567a:	f013 0f04 	tst.w	r3, #4
 800567e:	d106      	bne.n	800568e <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005680:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005682:	f013 0f01 	tst.w	r3, #1
 8005686:	d005      	beq.n	8005694 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005688:	2001      	movs	r0, #1
 800568a:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800568c:	e04d      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800568e:	2004      	movs	r0, #4
 8005690:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005692:	e04a      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005694:	23c5      	movs	r3, #197	; 0xc5
 8005696:	63a3      	str	r3, [r4, #56]	; 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005698:	4620      	mov	r0, r4
 800569a:	f7ff ffac 	bl	80055f6 <SDIO_GetCommandResponse>
 800569e:	42a8      	cmp	r0, r5
 80056a0:	d001      	beq.n	80056a6 <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056a2:	2001      	movs	r0, #1
 80056a4:	e041      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80056a6:	2100      	movs	r1, #0
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7ff ffa7 	bl	80055fc <SDIO_GetResponse>
 80056ae:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80056b0:	483a      	ldr	r0, [pc, #232]	; (800579c <SDMMC_GetCmdResp1+0x150>)
 80056b2:	4018      	ands	r0, r3
 80056b4:	b3c8      	cbz	r0, 800572a <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	db38      	blt.n	800572c <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80056ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80056be:	d138      	bne.n	8005732 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80056c0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80056c4:	d137      	bne.n	8005736 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80056c6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80056ca:	d136      	bne.n	800573a <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80056cc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80056d0:	d136      	bne.n	8005740 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80056d2:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80056d6:	d136      	bne.n	8005746 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80056d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80056dc:	d136      	bne.n	800574c <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80056de:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80056e2:	d136      	bne.n	8005752 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80056e4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80056e8:	d136      	bne.n	8005758 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80056ea:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80056ee:	d136      	bne.n	800575e <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80056f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80056f4:	d136      	bne.n	8005764 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80056f6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80056fa:	d136      	bne.n	800576a <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80056fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005700:	d136      	bne.n	8005770 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005702:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005706:	d136      	bne.n	8005776 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005708:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800570c:	d136      	bne.n	800577c <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800570e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005712:	d136      	bne.n	8005782 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005714:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005718:	d136      	bne.n	8005788 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800571a:	f013 0f08 	tst.w	r3, #8
 800571e:	d036      	beq.n	800578e <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005720:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005724:	e001      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8005726:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800572a:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800572c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005730:	e7fb      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005732:	2040      	movs	r0, #64	; 0x40
 8005734:	e7f9      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005736:	2080      	movs	r0, #128	; 0x80
 8005738:	e7f7      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800573a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800573e:	e7f4      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005740:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005744:	e7f1      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005746:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800574a:	e7ee      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800574c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005750:	e7eb      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005752:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005756:	e7e8      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005758:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800575c:	e7e5      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800575e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005762:	e7e2      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8005764:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005768:	e7df      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800576a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800576e:	e7dc      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005770:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005774:	e7d9      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005776:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800577a:	e7d6      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800577c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005780:	e7d3      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005782:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005786:	e7d0      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8005788:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800578c:	e7cd      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800578e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005792:	e7ca      	b.n	800572a <SDMMC_GetCmdResp1+0xde>
 8005794:	20000134 	.word	0x20000134
 8005798:	10624dd3 	.word	0x10624dd3
 800579c:	fdffe008 	.word	0xfdffe008

080057a0 <SDMMC_CmdBlockLength>:
{
 80057a0:	b530      	push	{r4, r5, lr}
 80057a2:	b087      	sub	sp, #28
 80057a4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80057a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80057a8:	2510      	movs	r5, #16
 80057aa:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057ac:	2340      	movs	r3, #64	; 0x40
 80057ae:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057b0:	2300      	movs	r3, #0
 80057b2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057b8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057ba:	a901      	add	r1, sp, #4
 80057bc:	f7ff ff09 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80057c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c4:	4629      	mov	r1, r5
 80057c6:	4620      	mov	r0, r4
 80057c8:	f7ff ff40 	bl	800564c <SDMMC_GetCmdResp1>
}
 80057cc:	b007      	add	sp, #28
 80057ce:	bd30      	pop	{r4, r5, pc}

080057d0 <SDMMC_CmdReadSingleBlock>:
{
 80057d0:	b530      	push	{r4, r5, lr}
 80057d2:	b087      	sub	sp, #28
 80057d4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80057d6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80057d8:	2511      	movs	r5, #17
 80057da:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057dc:	2340      	movs	r3, #64	; 0x40
 80057de:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057e0:	2300      	movs	r3, #0
 80057e2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057e8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057ea:	a901      	add	r1, sp, #4
 80057ec:	f7ff fef1 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80057f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f4:	4629      	mov	r1, r5
 80057f6:	4620      	mov	r0, r4
 80057f8:	f7ff ff28 	bl	800564c <SDMMC_GetCmdResp1>
}
 80057fc:	b007      	add	sp, #28
 80057fe:	bd30      	pop	{r4, r5, pc}

08005800 <SDMMC_CmdReadMultiBlock>:
{
 8005800:	b530      	push	{r4, r5, lr}
 8005802:	b087      	sub	sp, #28
 8005804:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005806:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005808:	2512      	movs	r5, #18
 800580a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800580c:	2340      	movs	r3, #64	; 0x40
 800580e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005810:	2300      	movs	r3, #0
 8005812:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005818:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800581a:	a901      	add	r1, sp, #4
 800581c:	f7ff fed9 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005820:	f241 3288 	movw	r2, #5000	; 0x1388
 8005824:	4629      	mov	r1, r5
 8005826:	4620      	mov	r0, r4
 8005828:	f7ff ff10 	bl	800564c <SDMMC_GetCmdResp1>
}
 800582c:	b007      	add	sp, #28
 800582e:	bd30      	pop	{r4, r5, pc}

08005830 <SDMMC_CmdWriteSingleBlock>:
{
 8005830:	b530      	push	{r4, r5, lr}
 8005832:	b087      	sub	sp, #28
 8005834:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005836:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005838:	2518      	movs	r5, #24
 800583a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800583c:	2340      	movs	r3, #64	; 0x40
 800583e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005840:	2300      	movs	r3, #0
 8005842:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005848:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800584a:	a901      	add	r1, sp, #4
 800584c:	f7ff fec1 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005850:	f241 3288 	movw	r2, #5000	; 0x1388
 8005854:	4629      	mov	r1, r5
 8005856:	4620      	mov	r0, r4
 8005858:	f7ff fef8 	bl	800564c <SDMMC_GetCmdResp1>
}
 800585c:	b007      	add	sp, #28
 800585e:	bd30      	pop	{r4, r5, pc}

08005860 <SDMMC_CmdWriteMultiBlock>:
{
 8005860:	b530      	push	{r4, r5, lr}
 8005862:	b087      	sub	sp, #28
 8005864:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005866:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005868:	2519      	movs	r5, #25
 800586a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800586c:	2340      	movs	r3, #64	; 0x40
 800586e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005870:	2300      	movs	r3, #0
 8005872:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005878:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800587a:	a901      	add	r1, sp, #4
 800587c:	f7ff fea9 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005880:	f241 3288 	movw	r2, #5000	; 0x1388
 8005884:	4629      	mov	r1, r5
 8005886:	4620      	mov	r0, r4
 8005888:	f7ff fee0 	bl	800564c <SDMMC_GetCmdResp1>
}
 800588c:	b007      	add	sp, #28
 800588e:	bd30      	pop	{r4, r5, pc}

08005890 <SDMMC_CmdStopTransfer>:
{
 8005890:	b530      	push	{r4, r5, lr}
 8005892:	b087      	sub	sp, #28
 8005894:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800589a:	250c      	movs	r5, #12
 800589c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800589e:	2240      	movs	r2, #64	; 0x40
 80058a0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058a2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058a8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058aa:	a901      	add	r1, sp, #4
 80058ac:	f7ff fe91 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80058b0:	4a03      	ldr	r2, [pc, #12]	; (80058c0 <SDMMC_CmdStopTransfer+0x30>)
 80058b2:	4629      	mov	r1, r5
 80058b4:	4620      	mov	r0, r4
 80058b6:	f7ff fec9 	bl	800564c <SDMMC_GetCmdResp1>
}
 80058ba:	b007      	add	sp, #28
 80058bc:	bd30      	pop	{r4, r5, pc}
 80058be:	bf00      	nop
 80058c0:	05f5e100 	.word	0x05f5e100

080058c4 <SDMMC_CmdSelDesel>:
{
 80058c4:	b530      	push	{r4, r5, lr}
 80058c6:	b087      	sub	sp, #28
 80058c8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80058ca:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80058cc:	2507      	movs	r5, #7
 80058ce:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058d0:	2340      	movs	r3, #64	; 0x40
 80058d2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058d4:	2300      	movs	r3, #0
 80058d6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058dc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058de:	a901      	add	r1, sp, #4
 80058e0:	f7ff fe77 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80058e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e8:	4629      	mov	r1, r5
 80058ea:	4620      	mov	r0, r4
 80058ec:	f7ff feae 	bl	800564c <SDMMC_GetCmdResp1>
}
 80058f0:	b007      	add	sp, #28
 80058f2:	bd30      	pop	{r4, r5, pc}

080058f4 <SDMMC_CmdAppCommand>:
{
 80058f4:	b530      	push	{r4, r5, lr}
 80058f6:	b087      	sub	sp, #28
 80058f8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80058fa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80058fc:	2537      	movs	r5, #55	; 0x37
 80058fe:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005900:	2340      	movs	r3, #64	; 0x40
 8005902:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005904:	2300      	movs	r3, #0
 8005906:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800590c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800590e:	a901      	add	r1, sp, #4
 8005910:	f7ff fe5f 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005914:	f241 3288 	movw	r2, #5000	; 0x1388
 8005918:	4629      	mov	r1, r5
 800591a:	4620      	mov	r0, r4
 800591c:	f7ff fe96 	bl	800564c <SDMMC_GetCmdResp1>
}
 8005920:	b007      	add	sp, #28
 8005922:	bd30      	pop	{r4, r5, pc}

08005924 <SDMMC_CmdBusWidth>:
{
 8005924:	b530      	push	{r4, r5, lr}
 8005926:	b087      	sub	sp, #28
 8005928:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800592a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800592c:	2506      	movs	r5, #6
 800592e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005930:	2340      	movs	r3, #64	; 0x40
 8005932:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005934:	2300      	movs	r3, #0
 8005936:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800593c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800593e:	a901      	add	r1, sp, #4
 8005940:	f7ff fe47 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005944:	f241 3288 	movw	r2, #5000	; 0x1388
 8005948:	4629      	mov	r1, r5
 800594a:	4620      	mov	r0, r4
 800594c:	f7ff fe7e 	bl	800564c <SDMMC_GetCmdResp1>
}
 8005950:	b007      	add	sp, #28
 8005952:	bd30      	pop	{r4, r5, pc}

08005954 <SDMMC_CmdSendSCR>:
{
 8005954:	b530      	push	{r4, r5, lr}
 8005956:	b087      	sub	sp, #28
 8005958:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800595e:	2533      	movs	r5, #51	; 0x33
 8005960:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005962:	2240      	movs	r2, #64	; 0x40
 8005964:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005966:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800596c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800596e:	a901      	add	r1, sp, #4
 8005970:	f7ff fe2f 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005974:	f241 3288 	movw	r2, #5000	; 0x1388
 8005978:	4629      	mov	r1, r5
 800597a:	4620      	mov	r0, r4
 800597c:	f7ff fe66 	bl	800564c <SDMMC_GetCmdResp1>
}
 8005980:	b007      	add	sp, #28
 8005982:	bd30      	pop	{r4, r5, pc}

08005984 <SDMMC_CmdSendStatus>:
{
 8005984:	b530      	push	{r4, r5, lr}
 8005986:	b087      	sub	sp, #28
 8005988:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800598a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800598c:	250d      	movs	r5, #13
 800598e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005990:	2340      	movs	r3, #64	; 0x40
 8005992:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005994:	2300      	movs	r3, #0
 8005996:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800599c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800599e:	a901      	add	r1, sp, #4
 80059a0:	f7ff fe17 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80059a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a8:	4629      	mov	r1, r5
 80059aa:	4620      	mov	r0, r4
 80059ac:	f7ff fe4e 	bl	800564c <SDMMC_GetCmdResp1>
}
 80059b0:	b007      	add	sp, #28
 80059b2:	bd30      	pop	{r4, r5, pc}

080059b4 <SDMMC_GetCmdResp2>:
{
 80059b4:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059b6:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <SDMMC_GetCmdResp2+0x54>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a14      	ldr	r2, [pc, #80]	; (8005a0c <SDMMC_GetCmdResp2+0x58>)
 80059bc:	fba2 2303 	umull	r2, r3, r2, r3
 80059c0:	0a5b      	lsrs	r3, r3, #9
 80059c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 80059ca:	461a      	mov	r2, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b1ba      	cbz	r2, 8005a00 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDIOx->STA;
 80059d0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059d2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80059d6:	d0f8      	beq.n	80059ca <SDMMC_GetCmdResp2+0x16>
 80059d8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80059dc:	d1f5      	bne.n	80059ca <SDMMC_GetCmdResp2+0x16>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059de:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80059e0:	f013 0f04 	tst.w	r3, #4
 80059e4:	d106      	bne.n	80059f4 <SDMMC_GetCmdResp2+0x40>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059e6:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80059e8:	f010 0001 	ands.w	r0, r0, #1
 80059ec:	d105      	bne.n	80059fa <SDMMC_GetCmdResp2+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80059ee:	23c5      	movs	r3, #197	; 0xc5
 80059f0:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80059f2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059f4:	2004      	movs	r0, #4
 80059f6:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059f8:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80059fa:	2001      	movs	r0, #1
 80059fc:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059fe:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005a00:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000134 	.word	0x20000134
 8005a0c:	10624dd3 	.word	0x10624dd3

08005a10 <SDMMC_CmdSendCID>:
{
 8005a10:	b510      	push	{r4, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a1e:	22c0      	movs	r2, #192	; 0xc0
 8005a20:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a22:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a28:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a2a:	a901      	add	r1, sp, #4
 8005a2c:	f7ff fdd1 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a30:	4620      	mov	r0, r4
 8005a32:	f7ff ffbf 	bl	80059b4 <SDMMC_GetCmdResp2>
}
 8005a36:	b006      	add	sp, #24
 8005a38:	bd10      	pop	{r4, pc}

08005a3a <SDMMC_CmdSendCSD>:
{
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	b086      	sub	sp, #24
 8005a3e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8005a40:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005a42:	2309      	movs	r3, #9
 8005a44:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a46:	23c0      	movs	r3, #192	; 0xc0
 8005a48:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a52:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a54:	a901      	add	r1, sp, #4
 8005a56:	f7ff fdbc 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f7ff ffaa 	bl	80059b4 <SDMMC_GetCmdResp2>
}
 8005a60:	b006      	add	sp, #24
 8005a62:	bd10      	pop	{r4, pc}

08005a64 <SDMMC_GetCmdResp3>:
{
 8005a64:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a66:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <SDMMC_GetCmdResp3+0x44>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a10      	ldr	r2, [pc, #64]	; (8005aac <SDMMC_GetCmdResp3+0x48>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	0a5b      	lsrs	r3, r3, #9
 8005a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b182      	cbz	r2, 8005aa2 <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDIOx->STA;
 8005a80:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a82:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005a86:	d0f8      	beq.n	8005a7a <SDMMC_GetCmdResp3+0x16>
 8005a88:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005a8c:	d1f5      	bne.n	8005a7a <SDMMC_GetCmdResp3+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005a8e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005a90:	f010 0004 	ands.w	r0, r0, #4
 8005a94:	d102      	bne.n	8005a9c <SDMMC_GetCmdResp3+0x38>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a96:	23c5      	movs	r3, #197	; 0xc5
 8005a98:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005a9a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a9c:	2004      	movs	r0, #4
 8005a9e:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005aa0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005aa2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005aa6:	4770      	bx	lr
 8005aa8:	20000134 	.word	0x20000134
 8005aac:	10624dd3 	.word	0x10624dd3

08005ab0 <SDMMC_CmdAppOperCommand>:
{
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005ab6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005abe:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005ac0:	2329      	movs	r3, #41	; 0x29
 8005ac2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ac4:	2340      	movs	r3, #64	; 0x40
 8005ac6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ad0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ad2:	a901      	add	r1, sp, #4
 8005ad4:	f7ff fd7d 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f7ff ffc3 	bl	8005a64 <SDMMC_GetCmdResp3>
}
 8005ade:	b006      	add	sp, #24
 8005ae0:	bd10      	pop	{r4, pc}
	...

08005ae4 <SDMMC_GetCmdResp6>:
{
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	460e      	mov	r6, r1
 8005aea:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005aec:	4b23      	ldr	r3, [pc, #140]	; (8005b7c <SDMMC_GetCmdResp6+0x98>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a23      	ldr	r2, [pc, #140]	; (8005b80 <SDMMC_GetCmdResp6+0x9c>)
 8005af2:	fba2 2303 	umull	r2, r3, r2, r3
 8005af6:	0a5b      	lsrs	r3, r3, #9
 8005af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afc:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8005b00:	461a      	mov	r2, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b38a      	cbz	r2, 8005b6a <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 8005b06:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b08:	f014 0f45 	tst.w	r4, #69	; 0x45
 8005b0c:	d0f8      	beq.n	8005b00 <SDMMC_GetCmdResp6+0x1c>
 8005b0e:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8005b12:	d1f5      	bne.n	8005b00 <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b14:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005b16:	f013 0f04 	tst.w	r3, #4
 8005b1a:	d106      	bne.n	8005b2a <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b1c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005b1e:	f013 0f01 	tst.w	r3, #1
 8005b22:	d005      	beq.n	8005b30 <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b24:	2001      	movs	r0, #1
 8005b26:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b28:	e021      	b.n	8005b6e <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b2a:	2004      	movs	r0, #4
 8005b2c:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b2e:	e01e      	b.n	8005b6e <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005b30:	4628      	mov	r0, r5
 8005b32:	f7ff fd60 	bl	80055f6 <SDIO_GetCommandResponse>
 8005b36:	42b0      	cmp	r0, r6
 8005b38:	d001      	beq.n	8005b3e <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	e017      	b.n	8005b6e <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b3e:	23c5      	movs	r3, #197	; 0xc5
 8005b40:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005b42:	2100      	movs	r1, #0
 8005b44:	4628      	mov	r0, r5
 8005b46:	f7ff fd59 	bl	80055fc <SDIO_GetResponse>
 8005b4a:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005b4c:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 8005b50:	d008      	beq.n	8005b64 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005b52:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005b56:	d10b      	bne.n	8005b70 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005b58:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005b5c:	d00b      	beq.n	8005b76 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005b5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005b62:	e004      	b.n	8005b6e <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005b64:	0c1b      	lsrs	r3, r3, #16
 8005b66:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8005b68:	e001      	b.n	8005b6e <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 8005b6a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005b70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005b74:	e7fb      	b.n	8005b6e <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b76:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005b7a:	e7f8      	b.n	8005b6e <SDMMC_GetCmdResp6+0x8a>
 8005b7c:	20000134 	.word	0x20000134
 8005b80:	10624dd3 	.word	0x10624dd3

08005b84 <SDMMC_CmdSetRelAdd>:
{
 8005b84:	b570      	push	{r4, r5, r6, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	4604      	mov	r4, r0
 8005b8a:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005b90:	2603      	movs	r6, #3
 8005b92:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b94:	2240      	movs	r2, #64	; 0x40
 8005b96:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b98:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b9e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ba0:	a901      	add	r1, sp, #4
 8005ba2:	f7ff fd16 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005ba6:	462a      	mov	r2, r5
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7ff ff9a 	bl	8005ae4 <SDMMC_GetCmdResp6>
}
 8005bb0:	b006      	add	sp, #24
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}

08005bb4 <SDMMC_GetCmdResp7>:
{
 8005bb4:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005bb6:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <SDMMC_GetCmdResp7+0x5c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a16      	ldr	r2, [pc, #88]	; (8005c14 <SDMMC_GetCmdResp7+0x60>)
 8005bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc0:	0a5b      	lsrs	r3, r3, #9
 8005bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8005bca:	461a      	mov	r2, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b1e2      	cbz	r2, 8005c0a <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDIOx->STA;
 8005bd0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bd2:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005bd6:	d0f8      	beq.n	8005bca <SDMMC_GetCmdResp7+0x16>
 8005bd8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005bdc:	d1f5      	bne.n	8005bca <SDMMC_GetCmdResp7+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bde:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005be0:	f013 0f04 	tst.w	r3, #4
 8005be4:	d10b      	bne.n	8005bfe <SDMMC_GetCmdResp7+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005be6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005be8:	f013 0301 	ands.w	r3, r3, #1
 8005bec:	d10a      	bne.n	8005c04 <SDMMC_GetCmdResp7+0x50>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005bee:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005bf0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8005bf4:	d00b      	beq.n	8005c0e <SDMMC_GetCmdResp7+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005bf6:	2240      	movs	r2, #64	; 0x40
 8005bf8:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005bfe:	2004      	movs	r0, #4
 8005c00:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c02:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c04:	2001      	movs	r0, #1
 8005c06:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c08:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005c0a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005c0e:	4770      	bx	lr
 8005c10:	20000134 	.word	0x20000134
 8005c14:	10624dd3 	.word	0x10624dd3

08005c18 <SDMMC_CmdOperCond>:
{
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005c1e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005c22:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005c24:	2308      	movs	r3, #8
 8005c26:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c28:	2340      	movs	r3, #64	; 0x40
 8005c2a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c34:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c36:	a901      	add	r1, sp, #4
 8005c38:	f7ff fccb 	bl	80055d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7ff ffb9 	bl	8005bb4 <SDMMC_GetCmdResp7>
}
 8005c42:	b006      	add	sp, #24
 8005c44:	bd10      	pop	{r4, pc}
	...

08005c48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c48:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	3301      	adds	r3, #1
 8005c52:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 8005c54:	9a01      	ldr	r2, [sp, #4]
 8005c56:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <USB_CoreReset+0x4c>)
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d815      	bhi.n	8005c88 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c5c:	6903      	ldr	r3, [r0, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	daf5      	bge.n	8005c4e <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c66:	6903      	ldr	r3, [r0, #16]
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8005c6e:	9b01      	ldr	r3, [sp, #4]
 8005c70:	3301      	adds	r3, #1
 8005c72:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 8005c74:	9a01      	ldr	r2, [sp, #4]
 8005c76:	4b07      	ldr	r3, [pc, #28]	; (8005c94 <USB_CoreReset+0x4c>)
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d808      	bhi.n	8005c8e <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c7c:	6903      	ldr	r3, [r0, #16]
 8005c7e:	f013 0f01 	tst.w	r3, #1
 8005c82:	d1f4      	bne.n	8005c6e <USB_CoreReset+0x26>

  return HAL_OK;
 8005c84:	2000      	movs	r0, #0
 8005c86:	e000      	b.n	8005c8a <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8005c88:	2003      	movs	r0, #3
}
 8005c8a:	b002      	add	sp, #8
 8005c8c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005c8e:	2003      	movs	r0, #3
 8005c90:	e7fb      	b.n	8005c8a <USB_CoreReset+0x42>
 8005c92:	bf00      	nop
 8005c94:	00030d40 	.word	0x00030d40

08005c98 <USB_CoreInit>:
{
 8005c98:	b084      	sub	sp, #16
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	a803      	add	r0, sp, #12
 8005ca0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ca4:	9b08      	ldr	r3, [sp, #32]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d11f      	bne.n	8005cea <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005caa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cb2:	68e3      	ldr	r3, [r4, #12]
 8005cb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cbc:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cbe:	68e3      	ldr	r3, [r4, #12]
 8005cc0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005cc4:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8005cc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d009      	beq.n	8005ce0 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f7ff ffbb 	bl	8005c48 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8005cd2:	9b06      	ldr	r3, [sp, #24]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d01b      	beq.n	8005d10 <USB_CoreInit+0x78>
}
 8005cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cdc:	b004      	add	sp, #16
 8005cde:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ce0:	68e3      	ldr	r3, [r4, #12]
 8005ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ce6:	60e3      	str	r3, [r4, #12]
 8005ce8:	e7f0      	b.n	8005ccc <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cea:	68e3      	ldr	r3, [r4, #12]
 8005cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf0:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f7ff ffa8 	bl	8005c48 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8005cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cfa:	b923      	cbnz	r3, 8005d06 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005cfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d02:	63a3      	str	r3, [r4, #56]	; 0x38
 8005d04:	e7e5      	b.n	8005cd2 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d0c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005d0e:	e7e0      	b.n	8005cd2 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d10:	68a3      	ldr	r3, [r4, #8]
 8005d12:	f043 0306 	orr.w	r3, r3, #6
 8005d16:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d18:	68a3      	ldr	r3, [r4, #8]
 8005d1a:	f043 0320 	orr.w	r3, r3, #32
 8005d1e:	60a3      	str	r3, [r4, #8]
 8005d20:	e7da      	b.n	8005cd8 <USB_CoreInit+0x40>
	...

08005d24 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8005d24:	2a02      	cmp	r2, #2
 8005d26:	d00a      	beq.n	8005d3e <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d28:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d2a:	68c3      	ldr	r3, [r0, #12]
 8005d2c:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8005d30:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d32:	68c3      	ldr	r3, [r0, #12]
 8005d34:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8005d38:	60c3      	str	r3, [r0, #12]
}
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d3e:	4b23      	ldr	r3, [pc, #140]	; (8005dcc <USB_SetTurnaroundTime+0xa8>)
 8005d40:	440b      	add	r3, r1
 8005d42:	4a23      	ldr	r2, [pc, #140]	; (8005dd0 <USB_SetTurnaroundTime+0xac>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d92f      	bls.n	8005da8 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d48:	4b22      	ldr	r3, [pc, #136]	; (8005dd4 <USB_SetTurnaroundTime+0xb0>)
 8005d4a:	440b      	add	r3, r1
 8005d4c:	4a22      	ldr	r2, [pc, #136]	; (8005dd8 <USB_SetTurnaroundTime+0xb4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d92c      	bls.n	8005dac <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005d52:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8005d56:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8005d5a:	4a20      	ldr	r2, [pc, #128]	; (8005ddc <USB_SetTurnaroundTime+0xb8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d927      	bls.n	8005db0 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005d60:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8005d64:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8005d68:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <USB_SetTurnaroundTime+0xbc>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d322      	bcc.n	8005db4 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <USB_SetTurnaroundTime+0xc0>)
 8005d70:	440b      	add	r3, r1
 8005d72:	4a1d      	ldr	r2, [pc, #116]	; (8005de8 <USB_SetTurnaroundTime+0xc4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d91f      	bls.n	8005db8 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005d78:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <USB_SetTurnaroundTime+0xc8>)
 8005d7a:	440b      	add	r3, r1
 8005d7c:	4a1c      	ldr	r2, [pc, #112]	; (8005df0 <USB_SetTurnaroundTime+0xcc>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d31c      	bcc.n	8005dbc <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005d82:	4b1c      	ldr	r3, [pc, #112]	; (8005df4 <USB_SetTurnaroundTime+0xd0>)
 8005d84:	440b      	add	r3, r1
 8005d86:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <USB_SetTurnaroundTime+0xd4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d319      	bcc.n	8005dc0 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005d8c:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8005d90:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8005d94:	4a19      	ldr	r2, [pc, #100]	; (8005dfc <USB_SetTurnaroundTime+0xd8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d314      	bcc.n	8005dc4 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005d9a:	4b19      	ldr	r3, [pc, #100]	; (8005e00 <USB_SetTurnaroundTime+0xdc>)
 8005d9c:	440b      	add	r3, r1
 8005d9e:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <USB_SetTurnaroundTime+0xe0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d211      	bcs.n	8005dc8 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8005da4:	2207      	movs	r2, #7
 8005da6:	e7c0      	b.n	8005d2a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8005da8:	220f      	movs	r2, #15
 8005daa:	e7be      	b.n	8005d2a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8005dac:	220e      	movs	r2, #14
 8005dae:	e7bc      	b.n	8005d2a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8005db0:	220d      	movs	r2, #13
 8005db2:	e7ba      	b.n	8005d2a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8005db4:	220c      	movs	r2, #12
 8005db6:	e7b8      	b.n	8005d2a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8005db8:	220b      	movs	r2, #11
 8005dba:	e7b6      	b.n	8005d2a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8005dbc:	220a      	movs	r2, #10
 8005dbe:	e7b4      	b.n	8005d2a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8005dc0:	2209      	movs	r2, #9
 8005dc2:	e7b2      	b.n	8005d2a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	e7b0      	b.n	8005d2a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8005dc8:	2206      	movs	r2, #6
 8005dca:	e7ae      	b.n	8005d2a <USB_SetTurnaroundTime+0x6>
 8005dcc:	ff275340 	.word	0xff275340
 8005dd0:	000c34ff 	.word	0x000c34ff
 8005dd4:	ff1b1e40 	.word	0xff1b1e40
 8005dd8:	000f423f 	.word	0x000f423f
 8005ddc:	00124f7f 	.word	0x00124f7f
 8005de0:	0013d620 	.word	0x0013d620
 8005de4:	fee5b660 	.word	0xfee5b660
 8005de8:	0016e35f 	.word	0x0016e35f
 8005dec:	feced300 	.word	0xfeced300
 8005df0:	001b7740 	.word	0x001b7740
 8005df4:	feb35bc0 	.word	0xfeb35bc0
 8005df8:	002191c0 	.word	0x002191c0
 8005dfc:	00387520 	.word	0x00387520
 8005e00:	fe5954e0 	.word	0xfe5954e0
 8005e04:	00419ce0 	.word	0x00419ce0

08005e08 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e08:	6883      	ldr	r3, [r0, #8]
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	6083      	str	r3, [r0, #8]
}
 8005e10:	2000      	movs	r0, #0
 8005e12:	4770      	bx	lr

08005e14 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e14:	6883      	ldr	r3, [r0, #8]
 8005e16:	f023 0301 	bic.w	r3, r3, #1
 8005e1a:	6083      	str	r3, [r0, #8]
}
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	4770      	bx	lr

08005e20 <USB_FlushTxFifo>:
{
 8005e20:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	9301      	str	r3, [sp, #4]
    count++;
 8005e26:	9b01      	ldr	r3, [sp, #4]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005e2c:	9a01      	ldr	r2, [sp, #4]
 8005e2e:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <USB_FlushTxFifo+0x4c>)
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d815      	bhi.n	8005e60 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e34:	6903      	ldr	r3, [r0, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	daf5      	bge.n	8005e26 <USB_FlushTxFifo+0x6>
  count = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e3e:	0189      	lsls	r1, r1, #6
 8005e40:	f041 0120 	orr.w	r1, r1, #32
 8005e44:	6101      	str	r1, [r0, #16]
    count++;
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005e4c:	9a01      	ldr	r2, [sp, #4]
 8005e4e:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <USB_FlushTxFifo+0x4c>)
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d808      	bhi.n	8005e66 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e54:	6903      	ldr	r3, [r0, #16]
 8005e56:	f013 0f20 	tst.w	r3, #32
 8005e5a:	d1f4      	bne.n	8005e46 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	e000      	b.n	8005e62 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8005e60:	2003      	movs	r0, #3
}
 8005e62:	b002      	add	sp, #8
 8005e64:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005e66:	2003      	movs	r0, #3
 8005e68:	e7fb      	b.n	8005e62 <USB_FlushTxFifo+0x42>
 8005e6a:	bf00      	nop
 8005e6c:	00030d40 	.word	0x00030d40

08005e70 <USB_FlushRxFifo>:
{
 8005e70:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	9301      	str	r3, [sp, #4]
    count++;
 8005e76:	9b01      	ldr	r3, [sp, #4]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005e7c:	9a01      	ldr	r2, [sp, #4]
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <USB_FlushRxFifo+0x48>)
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d813      	bhi.n	8005eac <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e84:	6903      	ldr	r3, [r0, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	daf5      	bge.n	8005e76 <USB_FlushRxFifo+0x6>
  count = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e8e:	2310      	movs	r3, #16
 8005e90:	6103      	str	r3, [r0, #16]
    count++;
 8005e92:	9b01      	ldr	r3, [sp, #4]
 8005e94:	3301      	adds	r3, #1
 8005e96:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8005e98:	9a01      	ldr	r2, [sp, #4]
 8005e9a:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <USB_FlushRxFifo+0x48>)
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d808      	bhi.n	8005eb2 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ea0:	6903      	ldr	r3, [r0, #16]
 8005ea2:	f013 0f10 	tst.w	r3, #16
 8005ea6:	d1f4      	bne.n	8005e92 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	e000      	b.n	8005eae <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8005eac:	2003      	movs	r0, #3
}
 8005eae:	b002      	add	sp, #8
 8005eb0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005eb2:	2003      	movs	r0, #3
 8005eb4:	e7fb      	b.n	8005eae <USB_FlushRxFifo+0x3e>
 8005eb6:	bf00      	nop
 8005eb8:	00030d40 	.word	0x00030d40

08005ebc <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8005ebc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005ec0:	4319      	orrs	r1, r3
 8005ec2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	4770      	bx	lr
	...

08005ecc <USB_DevInit>:
{
 8005ecc:	b084      	sub	sp, #16
 8005ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	a807      	add	r0, sp, #28
 8005ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8005eda:	2300      	movs	r3, #0
 8005edc:	e006      	b.n	8005eec <USB_DevInit+0x20>
    USBx->DIEPTXF[i] = 0U;
 8005ede:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005ee2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8005eea:	3301      	adds	r3, #1
 8005eec:	2b0e      	cmp	r3, #14
 8005eee:	d9f6      	bls.n	8005ede <USB_DevInit+0x12>
  if (cfg.vbus_sensing_enable == 0U)
 8005ef0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8005ef2:	bb27      	cbnz	r7, 8005f3e <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ef4:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8005ef8:	f043 0302 	orr.w	r3, r3, #2
 8005efc:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f06:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f0e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f16:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f1e:	f504 6500 	add.w	r5, r4, #2048	; 0x800
 8005f22:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8005f26:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d110      	bne.n	8005f52 <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 8005f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f32:	b94b      	cbnz	r3, 8005f48 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f34:	2100      	movs	r1, #0
 8005f36:	4620      	mov	r0, r4
 8005f38:	f7ff ffc0 	bl	8005ebc <USB_SetDevSpeed>
 8005f3c:	e00d      	b.n	8005f5a <USB_DevInit+0x8e>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f44:	63a3      	str	r3, [r4, #56]	; 0x38
 8005f46:	e7e7      	b.n	8005f18 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f48:	2101      	movs	r1, #1
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f7ff ffb6 	bl	8005ebc <USB_SetDevSpeed>
 8005f50:	e003      	b.n	8005f5a <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f52:	2103      	movs	r1, #3
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7ff ffb1 	bl	8005ebc <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f5a:	2110      	movs	r1, #16
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f7ff ff5f 	bl	8005e20 <USB_FlushTxFifo>
 8005f62:	4680      	mov	r8, r0
 8005f64:	b108      	cbz	r0, 8005f6a <USB_DevInit+0x9e>
    ret = HAL_ERROR;
 8005f66:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f7ff ff80 	bl	8005e70 <USB_FlushRxFifo>
 8005f70:	b108      	cbz	r0, 8005f76 <USB_DevInit+0xaa>
    ret = HAL_ERROR;
 8005f72:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f7a:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f7c:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f7e:	e00a      	b.n	8005f96 <USB_DevInit+0xca>
      if (i == 0U)
 8005f80:	b9c3      	cbnz	r3, 8005fb4 <USB_DevInit+0xe8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f82:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005f86:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f8e:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8005f92:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f94:	3301      	adds	r3, #1
 8005f96:	9907      	ldr	r1, [sp, #28]
 8005f98:	4299      	cmp	r1, r3
 8005f9a:	d910      	bls.n	8005fbe <USB_DevInit+0xf2>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f9c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8005fa0:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8005fa4:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	dbe9      	blt.n	8005f80 <USB_DevInit+0xb4>
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fac:	2000      	movs	r0, #0
 8005fae:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8005fb2:	e7ea      	b.n	8005f8a <USB_DevInit+0xbe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fb8:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8005fbc:	e7e5      	b.n	8005f8a <USB_DevInit+0xbe>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e00a      	b.n	8005fd8 <USB_DevInit+0x10c>
      if (i == 0U)
 8005fc2:	b1c3      	cbz	r3, 8005ff6 <USB_DevInit+0x12a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fc4:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
 8005fc8:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fcc:	2200      	movs	r2, #0
 8005fce:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fd0:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8005fd4:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	4299      	cmp	r1, r3
 8005fda:	d911      	bls.n	8006000 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fdc:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8005fe0:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8005fe4:	f8d2 6b00 	ldr.w	r6, [r2, #2816]	; 0xb00
 8005fe8:	2e00      	cmp	r6, #0
 8005fea:	dbea      	blt.n	8005fc2 <USB_DevInit+0xf6>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fec:	f04f 0c00 	mov.w	ip, #0
 8005ff0:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 8005ff4:	e7ea      	b.n	8005fcc <USB_DevInit+0x100>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ff6:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8005ffa:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 8005ffe:	e7e5      	b.n	8005fcc <USB_DevInit+0x100>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006000:	692b      	ldr	r3, [r5, #16]
 8006002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006006:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800600c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8006010:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8006012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006014:	b91b      	cbnz	r3, 800601e <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006016:	69a3      	ldr	r3, [r4, #24]
 8006018:	f043 0310 	orr.w	r3, r3, #16
 800601c:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800601e:	69a2      	ldr	r2, [r4, #24]
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <USB_DevInit+0x184>)
 8006022:	4313      	orrs	r3, r2
 8006024:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8006026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006028:	b11b      	cbz	r3, 8006032 <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800602a:	69a3      	ldr	r3, [r4, #24]
 800602c:	f043 0308 	orr.w	r3, r3, #8
 8006030:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8006032:	2f01      	cmp	r7, #1
 8006034:	d004      	beq.n	8006040 <USB_DevInit+0x174>
}
 8006036:	4640      	mov	r0, r8
 8006038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800603c:	b004      	add	sp, #16
 800603e:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006040:	69a3      	ldr	r3, [r4, #24]
 8006042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006046:	f043 0304 	orr.w	r3, r3, #4
 800604a:	61a3      	str	r3, [r4, #24]
 800604c:	e7f3      	b.n	8006036 <USB_DevInit+0x16a>
 800604e:	bf00      	nop
 8006050:	803c3800 	.word	0x803c3800

08006054 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006054:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006058:	f013 0306 	ands.w	r3, r3, #6
 800605c:	d007      	beq.n	800606e <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800605e:	2b02      	cmp	r3, #2
 8006060:	d007      	beq.n	8006072 <USB_GetDevSpeed+0x1e>
 8006062:	2b06      	cmp	r3, #6
 8006064:	d001      	beq.n	800606a <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 8006066:	200f      	movs	r0, #15
}
 8006068:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800606a:	2002      	movs	r0, #2
 800606c:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 800606e:	2000      	movs	r0, #0
 8006070:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8006072:	2002      	movs	r0, #2
 8006074:	4770      	bx	lr

08006076 <USB_ActivateEndpoint>:
{
 8006076:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8006078:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800607c:	784b      	ldrb	r3, [r1, #1]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d023      	beq.n	80060ca <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006082:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8006086:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 800608a:	f00c 040f 	and.w	r4, ip, #15
 800608e:	2201      	movs	r2, #1
 8006090:	40a2      	lsls	r2, r4
 8006092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006096:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800609a:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800609e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80060a2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80060a6:	d10e      	bne.n	80060c6 <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060a8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80060ac:	68ca      	ldr	r2, [r1, #12]
 80060ae:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060b2:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060b4:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80060c6:	2000      	movs	r0, #0
 80060c8:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80060ca:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80060ce:	f00c 0e0f 	and.w	lr, ip, #15
 80060d2:	fa03 f30e 	lsl.w	r3, r3, lr
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80060de:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80060e2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80060e6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80060ea:	d1ec      	bne.n	80060c6 <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060ec:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80060f0:	68ca      	ldr	r2, [r1, #12]
 80060f2:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060f6:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060f8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060fc:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006100:	4313      	orrs	r3, r2
 8006102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800610e:	e7da      	b.n	80060c6 <USB_ActivateEndpoint+0x50>

08006110 <USB_DeactivateEndpoint>:
{
 8006110:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8006112:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006114:	784a      	ldrb	r2, [r1, #1]
 8006116:	2a01      	cmp	r2, #1
 8006118:	d026      	beq.n	8006168 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800611a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800611e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006122:	2a00      	cmp	r2, #0
 8006124:	db52      	blt.n	80061cc <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006126:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800612a:	780a      	ldrb	r2, [r1, #0]
 800612c:	f002 020f 	and.w	r2, r2, #15
 8006130:	f04f 0c01 	mov.w	ip, #1
 8006134:	fa0c f202 	lsl.w	r2, ip, r2
 8006138:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 800613c:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006140:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8006144:	7809      	ldrb	r1, [r1, #0]
 8006146:	f001 010f 	and.w	r1, r1, #15
 800614a:	fa0c fc01 	lsl.w	ip, ip, r1
 800614e:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8006152:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006156:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800615a:	4a23      	ldr	r2, [pc, #140]	; (80061e8 <USB_DeactivateEndpoint+0xd8>)
 800615c:	400a      	ands	r2, r1
 800615e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8006162:	2000      	movs	r0, #0
 8006164:	bc30      	pop	{r4, r5}
 8006166:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006168:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800616c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006170:	2a00      	cmp	r2, #0
 8006172:	db1e      	blt.n	80061b2 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006174:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8006178:	780a      	ldrb	r2, [r1, #0]
 800617a:	f002 020f 	and.w	r2, r2, #15
 800617e:	2401      	movs	r4, #1
 8006180:	fa04 f202 	lsl.w	r2, r4, r2
 8006184:	b292      	uxth	r2, r2
 8006186:	ea25 0202 	bic.w	r2, r5, r2
 800618a:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800618e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8006192:	7809      	ldrb	r1, [r1, #0]
 8006194:	f001 010f 	and.w	r1, r1, #15
 8006198:	408c      	lsls	r4, r1
 800619a:	b2a4      	uxth	r4, r4
 800619c:	ea22 0204 	bic.w	r2, r2, r4
 80061a0:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061a4:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 80061a8:	4a10      	ldr	r2, [pc, #64]	; (80061ec <USB_DeactivateEndpoint+0xdc>)
 80061aa:	400a      	ands	r2, r1
 80061ac:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80061b0:	e7d7      	b.n	8006162 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061b2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80061b6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80061ba:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061be:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80061c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061c6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80061ca:	e7d3      	b.n	8006174 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061cc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80061d0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80061d4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80061d8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80061dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061e0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80061e4:	e79f      	b.n	8006126 <USB_DeactivateEndpoint+0x16>
 80061e6:	bf00      	nop
 80061e8:	eff37800 	.word	0xeff37800
 80061ec:	ec337800 	.word	0xec337800

080061f0 <USB_EP0StartXfer>:
{
 80061f0:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 80061f2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80061f4:	784c      	ldrb	r4, [r1, #1]
 80061f6:	2c01      	cmp	r4, #1
 80061f8:	d029      	beq.n	800624e <USB_EP0StartXfer+0x5e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061fa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80061fe:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8006202:	691c      	ldr	r4, [r3, #16]
 8006204:	0ce4      	lsrs	r4, r4, #19
 8006206:	04e4      	lsls	r4, r4, #19
 8006208:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800620a:	691c      	ldr	r4, [r3, #16]
 800620c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006210:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006214:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8006216:	698c      	ldr	r4, [r1, #24]
 8006218:	b10c      	cbz	r4, 800621e <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 800621a:	68cc      	ldr	r4, [r1, #12]
 800621c:	618c      	str	r4, [r1, #24]
    ep->xfer_size = ep->maxpacket;
 800621e:	68cc      	ldr	r4, [r1, #12]
 8006220:	61cc      	str	r4, [r1, #28]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006222:	691c      	ldr	r4, [r3, #16]
 8006224:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006228:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800622a:	691c      	ldr	r4, [r3, #16]
 800622c:	69cd      	ldr	r5, [r1, #28]
 800622e:	f3c5 0c12 	ubfx	ip, r5, #0, #19
 8006232:	ea44 040c 	orr.w	r4, r4, ip
 8006236:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8006238:	2a01      	cmp	r2, #1
 800623a:	d066      	beq.n	800630a <USB_EP0StartXfer+0x11a>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800623c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006240:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006244:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8006248:	2000      	movs	r0, #0
 800624a:	bc70      	pop	{r4, r5, r6}
 800624c:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 800624e:	698c      	ldr	r4, [r1, #24]
 8006250:	bb6c      	cbnz	r4, 80062ae <USB_EP0StartXfer+0xbe>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006252:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8006256:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800625a:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800625e:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8006262:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006266:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800626a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800626e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006272:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8006276:	0ced      	lsrs	r5, r5, #19
 8006278:	04ed      	lsls	r5, r5, #19
 800627a:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 800627e:	2a01      	cmp	r2, #1
 8006280:	d034      	beq.n	80062ec <USB_EP0StartXfer+0xfc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006282:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8006286:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800628a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800628e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8006292:	698b      	ldr	r3, [r1, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0d7      	beq.n	8006248 <USB_EP0StartXfer+0x58>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006298:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800629c:	7809      	ldrb	r1, [r1, #0]
 800629e:	f001 010f 	and.w	r1, r1, #15
 80062a2:	2201      	movs	r2, #1
 80062a4:	408a      	lsls	r2, r1
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80062ac:	e7cc      	b.n	8006248 <USB_EP0StartXfer+0x58>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062ae:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80062b2:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 80062b6:	6925      	ldr	r5, [r4, #16]
 80062b8:	0ced      	lsrs	r5, r5, #19
 80062ba:	04ed      	lsls	r5, r5, #19
 80062bc:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062be:	6925      	ldr	r5, [r4, #16]
 80062c0:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80062c4:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80062c8:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 80062ca:	68cd      	ldr	r5, [r1, #12]
 80062cc:	698e      	ldr	r6, [r1, #24]
 80062ce:	42ae      	cmp	r6, r5
 80062d0:	d900      	bls.n	80062d4 <USB_EP0StartXfer+0xe4>
        ep->xfer_len = ep->maxpacket;
 80062d2:	618d      	str	r5, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062d4:	6925      	ldr	r5, [r4, #16]
 80062d6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80062da:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062dc:	6925      	ldr	r5, [r4, #16]
 80062de:	698e      	ldr	r6, [r1, #24]
 80062e0:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 80062e4:	ea45 050c 	orr.w	r5, r5, ip
 80062e8:	6125      	str	r5, [r4, #16]
 80062ea:	e7c8      	b.n	800627e <USB_EP0StartXfer+0x8e>
      if ((uint32_t)ep->dma_addr != 0U)
 80062ec:	694a      	ldr	r2, [r1, #20]
 80062ee:	b11a      	cbz	r2, 80062f8 <USB_EP0StartXfer+0x108>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062f0:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 80062f4:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062f8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80062fc:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006300:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006304:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8006308:	e79e      	b.n	8006248 <USB_EP0StartXfer+0x58>
      if ((uint32_t)ep->xfer_buff != 0U)
 800630a:	690a      	ldr	r2, [r1, #16]
 800630c:	2a00      	cmp	r2, #0
 800630e:	d095      	beq.n	800623c <USB_EP0StartXfer+0x4c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006310:	615a      	str	r2, [r3, #20]
 8006312:	e793      	b.n	800623c <USB_EP0StartXfer+0x4c>

08006314 <USB_EPStopXfer>:
{
 8006314:	b410      	push	{r4}
 8006316:	b083      	sub	sp, #12
 8006318:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 800631e:	7848      	ldrb	r0, [r1, #1]
 8006320:	2801      	cmp	r0, #1
 8006322:	d00b      	beq.n	800633c <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006324:	780b      	ldrb	r3, [r1, #0]
 8006326:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800632a:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	; 0xb00
 800632e:	2800      	cmp	r0, #0
 8006330:	db2d      	blt.n	800638e <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8006332:	2000      	movs	r0, #0
}
 8006334:	b003      	add	sp, #12
 8006336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800633a:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800633c:	780b      	ldrb	r3, [r1, #0]
 800633e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8006342:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8006346:	2c00      	cmp	r4, #0
 8006348:	db01      	blt.n	800634e <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 800634a:	2000      	movs	r0, #0
 800634c:	e7f2      	b.n	8006334 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800634e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8006352:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8006356:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800635a:	780b      	ldrb	r3, [r1, #0]
 800635c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8006360:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8006364:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8006368:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        count++;
 800636c:	9b01      	ldr	r3, [sp, #4]
 800636e:	3301      	adds	r3, #1
 8006370:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8006372:	9c01      	ldr	r4, [sp, #4]
 8006374:	f242 7310 	movw	r3, #10000	; 0x2710
 8006378:	429c      	cmp	r4, r3
 800637a:	d8db      	bhi.n	8006334 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800637c:	780b      	ldrb	r3, [r1, #0]
 800637e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8006382:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8006386:	2b00      	cmp	r3, #0
 8006388:	dbf0      	blt.n	800636c <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 800638a:	2000      	movs	r0, #0
 800638c:	e7d2      	b.n	8006334 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800638e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	; 0xb00
 8006392:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
 8006396:	f8c3 0b00 	str.w	r0, [r3, #2816]	; 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800639a:	780b      	ldrb	r3, [r1, #0]
 800639c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80063a0:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	; 0xb00
 80063a4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80063a8:	f8c3 0b00 	str.w	r0, [r3, #2816]	; 0xb00
        count++;
 80063ac:	9b01      	ldr	r3, [sp, #4]
 80063ae:	3301      	adds	r3, #1
 80063b0:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80063b2:	9801      	ldr	r0, [sp, #4]
 80063b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80063b8:	4298      	cmp	r0, r3
 80063ba:	d808      	bhi.n	80063ce <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063bc:	780b      	ldrb	r3, [r1, #0]
 80063be:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80063c2:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	dbf0      	blt.n	80063ac <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 80063ca:	2000      	movs	r0, #0
 80063cc:	e7b2      	b.n	8006334 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 80063ce:	2001      	movs	r0, #1
 80063d0:	e7b0      	b.n	8006334 <USB_EPStopXfer+0x20>

080063d2 <USB_WritePacket>:
{
 80063d2:	b510      	push	{r4, lr}
 80063d4:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80063d8:	b984      	cbnz	r4, 80063fc <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 80063da:	3303      	adds	r3, #3
 80063dc:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 80063e0:	f04f 0c00 	mov.w	ip, #0
 80063e4:	e008      	b.n	80063f8 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063e6:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80063ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ee:	f851 4b04 	ldr.w	r4, [r1], #4
 80063f2:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 80063f4:	f10c 0c01 	add.w	ip, ip, #1
 80063f8:	45f4      	cmp	ip, lr
 80063fa:	d3f4      	bcc.n	80063e6 <USB_WritePacket+0x14>
}
 80063fc:	2000      	movs	r0, #0
 80063fe:	bd10      	pop	{r4, pc}

08006400 <USB_EPStartXfer>:
{
 8006400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006402:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8006404:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006406:	784c      	ldrb	r4, [r1, #1]
 8006408:	2c01      	cmp	r4, #1
 800640a:	d033      	beq.n	8006474 <USB_EPStartXfer+0x74>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800640c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8006410:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 8006414:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8006418:	0ce4      	lsrs	r4, r4, #19
 800641a:	04e4      	lsls	r4, r4, #19
 800641c:	f8cc 4010 	str.w	r4, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006420:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8006424:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006428:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800642c:	f8cc 4010 	str.w	r4, [ip, #16]
    if (ep->xfer_len == 0U)
 8006430:	698c      	ldr	r4, [r1, #24]
 8006432:	2c00      	cmp	r4, #0
 8006434:	f040 80c7 	bne.w	80065c6 <USB_EPStartXfer+0x1c6>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006438:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800643c:	68cd      	ldr	r5, [r1, #12]
 800643e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8006442:	432c      	orrs	r4, r5
 8006444:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006448:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800644c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006450:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8006454:	2a01      	cmp	r2, #1
 8006456:	f000 80d0 	beq.w	80065fa <USB_EPStartXfer+0x1fa>
    if (ep->type == EP_TYPE_ISOC)
 800645a:	790a      	ldrb	r2, [r1, #4]
 800645c:	2a01      	cmp	r2, #1
 800645e:	f000 80d3 	beq.w	8006608 <USB_EPStartXfer+0x208>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006462:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006466:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800646a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800646e:	2000      	movs	r0, #0
 8006470:	b003      	add	sp, #12
 8006472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8006474:	698c      	ldr	r4, [r1, #24]
 8006476:	bb84      	cbnz	r4, 80064da <USB_EPStartXfer+0xda>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006478:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800647c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8006480:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8006484:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8006488:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800648c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8006490:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8006494:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006498:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800649c:	0ced      	lsrs	r5, r5, #19
 800649e:	04ed      	lsls	r5, r5, #19
 80064a0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 80064a4:	2a01      	cmp	r2, #1
 80064a6:	d04c      	beq.n	8006542 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064a8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80064ac:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80064b0:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80064b4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80064b8:	790c      	ldrb	r4, [r1, #4]
 80064ba:	2c01      	cmp	r4, #1
 80064bc:	d06a      	beq.n	8006594 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 80064be:	698b      	ldr	r3, [r1, #24]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0d4      	beq.n	800646e <USB_EPStartXfer+0x6e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064c4:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 80064c8:	7809      	ldrb	r1, [r1, #0]
 80064ca:	f001 010f 	and.w	r1, r1, #15
 80064ce:	2201      	movs	r2, #1
 80064d0:	408a      	lsls	r2, r1
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80064d8:	e7c9      	b.n	800646e <USB_EPStartXfer+0x6e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064da:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80064de:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80064e2:	0ced      	lsrs	r5, r5, #19
 80064e4:	04ed      	lsls	r5, r5, #19
 80064e6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064ea:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80064ee:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80064f2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80064f6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80064fa:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80064fe:	698d      	ldr	r5, [r1, #24]
 8006500:	68cf      	ldr	r7, [r1, #12]
 8006502:	443d      	add	r5, r7
 8006504:	3d01      	subs	r5, #1
 8006506:	fbb5 f5f7 	udiv	r5, r5, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800650a:	4f49      	ldr	r7, [pc, #292]	; (8006630 <USB_EPStartXfer+0x230>)
 800650c:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8006510:	4335      	orrs	r5, r6
 8006512:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006516:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800651a:	698e      	ldr	r6, [r1, #24]
 800651c:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8006520:	4335      	orrs	r5, r6
 8006522:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006526:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800652a:	790d      	ldrb	r5, [r1, #4]
 800652c:	2d01      	cmp	r5, #1
 800652e:	d1b9      	bne.n	80064a4 <USB_EPStartXfer+0xa4>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006530:	6925      	ldr	r5, [r4, #16]
 8006532:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8006536:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006538:	6925      	ldr	r5, [r4, #16]
 800653a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800653e:	6125      	str	r5, [r4, #16]
 8006540:	e7b0      	b.n	80064a4 <USB_EPStartXfer+0xa4>
      if ((uint32_t)ep->dma_addr != 0U)
 8006542:	694a      	ldr	r2, [r1, #20]
 8006544:	b11a      	cbz	r2, 800654e <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006546:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800654a:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 800654e:	790a      	ldrb	r2, [r1, #4]
 8006550:	2a01      	cmp	r2, #1
 8006552:	d008      	beq.n	8006566 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006554:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8006558:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800655c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006560:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8006564:	e783      	b.n	800646e <USB_EPStartXfer+0x6e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006566:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800656a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800656e:	d108      	bne.n	8006582 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006570:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8006574:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8006578:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800657c:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8006580:	e7e8      	b.n	8006554 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006582:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8006586:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800658a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800658e:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8006592:	e7df      	b.n	8006554 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006594:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8006598:	f414 7f80 	tst.w	r4, #256	; 0x100
 800659c:	d10c      	bne.n	80065b8 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800659e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80065a2:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80065a6:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065aa:	9200      	str	r2, [sp, #0]
 80065ac:	8b0b      	ldrh	r3, [r1, #24]
 80065ae:	780a      	ldrb	r2, [r1, #0]
 80065b0:	6909      	ldr	r1, [r1, #16]
 80065b2:	f7ff ff0e 	bl	80063d2 <USB_WritePacket>
 80065b6:	e75a      	b.n	800646e <USB_EPStartXfer+0x6e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065b8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80065bc:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80065c0:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 80065c4:	e7f1      	b.n	80065aa <USB_EPStartXfer+0x1aa>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065c6:	68cd      	ldr	r5, [r1, #12]
 80065c8:	442c      	add	r4, r5
 80065ca:	3c01      	subs	r4, #1
 80065cc:	fbb4 f4f5 	udiv	r4, r4, r5
      ep->xfer_size = ep->maxpacket * pktcnt;
 80065d0:	b2a4      	uxth	r4, r4
 80065d2:	fb04 f505 	mul.w	r5, r4, r5
 80065d6:	61cd      	str	r5, [r1, #28]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065d8:	f8dc 5010 	ldr.w	r5, [ip, #16]
 80065dc:	4e14      	ldr	r6, [pc, #80]	; (8006630 <USB_EPStartXfer+0x230>)
 80065de:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 80065e2:	432c      	orrs	r4, r5
 80065e4:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80065e8:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80065ec:	69cd      	ldr	r5, [r1, #28]
 80065ee:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80065f2:	432c      	orrs	r4, r5
 80065f4:	f8cc 4010 	str.w	r4, [ip, #16]
 80065f8:	e72c      	b.n	8006454 <USB_EPStartXfer+0x54>
      if ((uint32_t)ep->xfer_buff != 0U)
 80065fa:	690a      	ldr	r2, [r1, #16]
 80065fc:	2a00      	cmp	r2, #0
 80065fe:	f43f af2c 	beq.w	800645a <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006602:	f8cc 2014 	str.w	r2, [ip, #20]
 8006606:	e728      	b.n	800645a <USB_EPStartXfer+0x5a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006608:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800660c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006610:	d106      	bne.n	8006620 <USB_EPStartXfer+0x220>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006612:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006616:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800661a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800661e:	e720      	b.n	8006462 <USB_EPStartXfer+0x62>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006620:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006624:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006628:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800662c:	e719      	b.n	8006462 <USB_EPStartXfer+0x62>
 800662e:	bf00      	nop
 8006630:	1ff80000 	.word	0x1ff80000

08006634 <USB_ReadPacket>:
{
 8006634:	b510      	push	{r4, lr}
 8006636:	4684      	mov	ip, r0
 8006638:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 800663a:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 800663e:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8006642:	2300      	movs	r3, #0
 8006644:	e005      	b.n	8006652 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006646:	f50c 5180 	add.w	r1, ip, #4096	; 0x1000
 800664a:	6809      	ldr	r1, [r1, #0]
 800664c:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8006650:	3301      	adds	r3, #1
 8006652:	4573      	cmp	r3, lr
 8006654:	d3f7      	bcc.n	8006646 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8006656:	b17a      	cbz	r2, 8006678 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006658:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 800665c:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8006660:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006662:	b2cb      	uxtb	r3, r1
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	fa24 f303 	lsr.w	r3, r4, r3
 800666a:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 800666e:	3101      	adds	r1, #1
      remaining_bytes--;
 8006670:	3a01      	subs	r2, #1
 8006672:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8006674:	2a00      	cmp	r2, #0
 8006676:	d1f4      	bne.n	8006662 <USB_ReadPacket+0x2e>
}
 8006678:	bd10      	pop	{r4, pc}

0800667a <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800667a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800667c:	784a      	ldrb	r2, [r1, #1]
 800667e:	2a01      	cmp	r2, #1
 8006680:	d014      	beq.n	80066ac <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006682:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006686:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800668a:	2a00      	cmp	r2, #0
 800668c:	db06      	blt.n	800669c <USB_EPSetStall+0x22>
 800668e:	b12b      	cbz	r3, 800669c <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006690:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006694:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006698:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800669c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80066a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066a4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80066a8:	2000      	movs	r0, #0
 80066aa:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066ac:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80066b0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80066b4:	2a00      	cmp	r2, #0
 80066b6:	db06      	blt.n	80066c6 <USB_EPSetStall+0x4c>
 80066b8:	b12b      	cbz	r3, 80066c6 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066ba:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80066be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066c2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066c6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80066ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066ce:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80066d2:	e7e9      	b.n	80066a8 <USB_EPSetStall+0x2e>

080066d4 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80066d4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80066d6:	784a      	ldrb	r2, [r1, #1]
 80066d8:	2a01      	cmp	r2, #1
 80066da:	d00e      	beq.n	80066fa <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066dc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80066e0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80066e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066e8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066ec:	790b      	ldrb	r3, [r1, #4]
 80066ee:	3b02      	subs	r3, #2
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d915      	bls.n	8006722 <USB_EPClearStall+0x4e>
}
 80066f6:	2000      	movs	r0, #0
 80066f8:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066fa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80066fe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006702:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006706:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800670a:	790b      	ldrb	r3, [r1, #4]
 800670c:	3b02      	subs	r3, #2
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	d8f0      	bhi.n	80066f6 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006714:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800671c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8006720:	e7e9      	b.n	80066f6 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006722:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800672e:	e7e2      	b.n	80066f6 <USB_EPClearStall+0x22>

08006730 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006730:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006734:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006738:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800673c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006740:	0109      	lsls	r1, r1, #4
 8006742:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8006746:	430b      	orrs	r3, r1
 8006748:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 800674c:	2000      	movs	r0, #0
 800674e:	4770      	bx	lr

08006750 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006750:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8006754:	f023 0303 	bic.w	r3, r3, #3
 8006758:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800675c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006760:	f023 0302 	bic.w	r3, r3, #2
 8006764:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8006768:	2000      	movs	r0, #0
 800676a:	4770      	bx	lr

0800676c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800676c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8006770:	f023 0303 	bic.w	r3, r3, #3
 8006774:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006778:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800677c:	f043 0302 	orr.w	r3, r3, #2
 8006780:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8006784:	2000      	movs	r0, #0
 8006786:	4770      	bx	lr

08006788 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006788:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800678a:	6980      	ldr	r0, [r0, #24]
}
 800678c:	4010      	ands	r0, r2
 800678e:	4770      	bx	lr

08006790 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006790:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006794:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006798:	69c0      	ldr	r0, [r0, #28]
 800679a:	4018      	ands	r0, r3
}
 800679c:	0c00      	lsrs	r0, r0, #16
 800679e:	4770      	bx	lr

080067a0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80067a0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80067a4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067a8:	69c0      	ldr	r0, [r0, #28]
 80067aa:	4018      	ands	r0, r3
}
 80067ac:	b280      	uxth	r0, r0
 80067ae:	4770      	bx	lr

080067b0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067b0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80067b4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067b8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80067bc:	6940      	ldr	r0, [r0, #20]
}
 80067be:	4010      	ands	r0, r2
 80067c0:	4770      	bx	lr

080067c2 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 80067c2:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067c6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067ca:	f001 0c0f 	and.w	ip, r1, #15
 80067ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80067d2:	01db      	lsls	r3, r3, #7
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067d8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80067dc:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80067e0:	6880      	ldr	r0, [r0, #8]
}
 80067e2:	4018      	ands	r0, r3
 80067e4:	4770      	bx	lr

080067e6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80067e6:	6940      	ldr	r0, [r0, #20]
}
 80067e8:	f000 0001 	and.w	r0, r0, #1
 80067ec:	4770      	bx	lr

080067ee <USB_SetCurrentMode>:
{
 80067ee:	b538      	push	{r3, r4, r5, lr}
 80067f0:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067f2:	68c3      	ldr	r3, [r0, #12]
 80067f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067f8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80067fa:	2901      	cmp	r1, #1
 80067fc:	d013      	beq.n	8006826 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 80067fe:	bb19      	cbnz	r1, 8006848 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006800:	68c3      	ldr	r3, [r0, #12]
 8006802:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006806:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8006808:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800680a:	2001      	movs	r0, #1
 800680c:	f7fb fc08 	bl	8002020 <HAL_Delay>
      ms++;
 8006810:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006812:	4628      	mov	r0, r5
 8006814:	f7ff ffe7 	bl	80067e6 <USB_GetMode>
 8006818:	b108      	cbz	r0, 800681e <USB_SetCurrentMode+0x30>
 800681a:	2c31      	cmp	r4, #49	; 0x31
 800681c:	d9f5      	bls.n	800680a <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 800681e:	2c32      	cmp	r4, #50	; 0x32
 8006820:	d014      	beq.n	800684c <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8006822:	2000      	movs	r0, #0
}
 8006824:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006826:	68c3      	ldr	r3, [r0, #12]
 8006828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800682c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800682e:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8006830:	2001      	movs	r0, #1
 8006832:	f7fb fbf5 	bl	8002020 <HAL_Delay>
      ms++;
 8006836:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006838:	4628      	mov	r0, r5
 800683a:	f7ff ffd4 	bl	80067e6 <USB_GetMode>
 800683e:	2801      	cmp	r0, #1
 8006840:	d0ed      	beq.n	800681e <USB_SetCurrentMode+0x30>
 8006842:	2c31      	cmp	r4, #49	; 0x31
 8006844:	d9f4      	bls.n	8006830 <USB_SetCurrentMode+0x42>
 8006846:	e7ea      	b.n	800681e <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8006848:	2001      	movs	r0, #1
 800684a:	e7eb      	b.n	8006824 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 800684c:	2001      	movs	r0, #1
 800684e:	e7e9      	b.n	8006824 <USB_SetCurrentMode+0x36>

08006850 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006850:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006854:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006858:	f023 0307 	bic.w	r3, r3, #7
 800685c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006860:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006868:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800686c:	2000      	movs	r0, #0
 800686e:	4770      	bx	lr

08006870 <USB_EP0_OutStart>:
{
 8006870:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006872:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006874:	4b15      	ldr	r3, [pc, #84]	; (80068cc <USB_EP0_OutStart+0x5c>)
 8006876:	429c      	cmp	r4, r3
 8006878:	d903      	bls.n	8006882 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800687a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800687e:	2b00      	cmp	r3, #0
 8006880:	db16      	blt.n	80068b0 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006882:	2400      	movs	r4, #0
 8006884:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006888:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800688c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006890:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006894:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8006898:	f044 0418 	orr.w	r4, r4, #24
 800689c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068a0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80068a4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80068a8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 80068ac:	2901      	cmp	r1, #1
 80068ae:	d003      	beq.n	80068b8 <USB_EP0_OutStart+0x48>
}
 80068b0:	2000      	movs	r0, #0
 80068b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068b6:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068b8:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068bc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80068c0:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068c4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80068c8:	e7f2      	b.n	80068b0 <USB_EP0_OutStart+0x40>
 80068ca:	bf00      	nop
 80068cc:	4f54300a 	.word	0x4f54300a

080068d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80068d0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80068d2:	4903      	ldr	r1, [pc, #12]	; (80068e0 <MX_FATFS_Init+0x10>)
 80068d4:	4803      	ldr	r0, [pc, #12]	; (80068e4 <MX_FATFS_Init+0x14>)
 80068d6:	f004 fb59 	bl	800af8c <FATFS_LinkDriver>
 80068da:	4b03      	ldr	r3, [pc, #12]	; (80068e8 <MX_FATFS_Init+0x18>)
 80068dc:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80068de:	bd08      	pop	{r3, pc}
 80068e0:	20004a30 	.word	0x20004a30
 80068e4:	0800c300 	.word	0x0800c300
 80068e8:	20004a34 	.word	0x20004a34

080068ec <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80068ec:	2000      	movs	r0, #0
 80068ee:	4770      	bx	lr

080068f0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80068f0:	b508      	push	{r3, lr}
 80068f2:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80068f4:	460a      	mov	r2, r1
 80068f6:	4601      	mov	r1, r0
 80068f8:	4802      	ldr	r0, [pc, #8]	; (8006904 <BSP_SD_ReadBlocks_DMA+0x14>)
 80068fa:	f7fd fdeb 	bl	80044d4 <HAL_SD_ReadBlocks_DMA>
 80068fe:	b100      	cbz	r0, 8006902 <BSP_SD_ReadBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8006900:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8006902:	bd08      	pop	{r3, pc}
 8006904:	20004744 	.word	0x20004744

08006908 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006908:	b508      	push	{r3, lr}
 800690a:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800690c:	460a      	mov	r2, r1
 800690e:	4601      	mov	r1, r0
 8006910:	4802      	ldr	r0, [pc, #8]	; (800691c <BSP_SD_WriteBlocks_DMA+0x14>)
 8006912:	f7fd fe79 	bl	8004608 <HAL_SD_WriteBlocks_DMA>
 8006916:	b100      	cbz	r0, 800691a <BSP_SD_WriteBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8006918:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800691a:	bd08      	pop	{r3, pc}
 800691c:	20004744 	.word	0x20004744

08006920 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006920:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006922:	4803      	ldr	r0, [pc, #12]	; (8006930 <BSP_SD_GetCardState+0x10>)
 8006924:	f7fe f96c 	bl	8004c00 <HAL_SD_GetCardState>
}
 8006928:	3804      	subs	r0, #4
 800692a:	bf18      	it	ne
 800692c:	2001      	movne	r0, #1
 800692e:	bd08      	pop	{r3, pc}
 8006930:	20004744 	.word	0x20004744

08006934 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006934:	b508      	push	{r3, lr}
 8006936:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006938:	4801      	ldr	r0, [pc, #4]	; (8006940 <BSP_SD_GetCardInfo+0xc>)
 800693a:	f7fe f8ee 	bl	8004b1a <HAL_SD_GetCardInfo>
}
 800693e:	bd08      	pop	{r3, pc}
 8006940:	20004744 	.word	0x20004744

08006944 <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8006944:	4770      	bx	lr

08006946 <HAL_SD_AbortCallback>:
{
 8006946:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8006948:	f7ff fffc 	bl	8006944 <BSP_SD_AbortCallback>
}
 800694c:	bd08      	pop	{r3, pc}

0800694e <HAL_SD_TxCpltCallback>:
{
 800694e:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8006950:	f000 f938 	bl	8006bc4 <BSP_SD_WriteCpltCallback>
}
 8006954:	bd08      	pop	{r3, pc}

08006956 <HAL_SD_RxCpltCallback>:
{
 8006956:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8006958:	f000 f93a 	bl	8006bd0 <BSP_SD_ReadCpltCallback>
}
 800695c:	bd08      	pop	{r3, pc}

0800695e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800695e:	b500      	push	{lr}
 8006960:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8006962:	2301      	movs	r3, #1
 8006964:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006968:	f000 f824 	bl	80069b4 <BSP_PlatformIsDetected>
 800696c:	b910      	cbnz	r0, 8006974 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 800696e:	2300      	movs	r3, #0
 8006970:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8006974:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006978:	b003      	add	sp, #12
 800697a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006980 <BSP_SD_Init>:
{
 8006980:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006982:	f7ff ffec 	bl	800695e <BSP_SD_IsDetected>
 8006986:	2801      	cmp	r0, #1
 8006988:	d002      	beq.n	8006990 <BSP_SD_Init+0x10>
    return MSD_ERROR;
 800698a:	2501      	movs	r5, #1
}
 800698c:	4628      	mov	r0, r5
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd);
 8006992:	4807      	ldr	r0, [pc, #28]	; (80069b0 <BSP_SD_Init+0x30>)
 8006994:	f7fe f8a6 	bl	8004ae4 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8006998:	4605      	mov	r5, r0
 800699a:	2800      	cmp	r0, #0
 800699c:	d1f6      	bne.n	800698c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800699e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80069a2:	4803      	ldr	r0, [pc, #12]	; (80069b0 <BSP_SD_Init+0x30>)
 80069a4:	f7fe f8cc 	bl	8004b40 <HAL_SD_ConfigWideBusOperation>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d0ef      	beq.n	800698c <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 80069ac:	4625      	mov	r5, r4
 80069ae:	e7ed      	b.n	800698c <BSP_SD_Init+0xc>
 80069b0:	20004744 	.word	0x20004744

080069b4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80069b4:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80069b6:	2102      	movs	r1, #2
 80069b8:	4803      	ldr	r0, [pc, #12]	; (80069c8 <BSP_PlatformIsDetected+0x14>)
 80069ba:	f7fb ff69 	bl	8002890 <HAL_GPIO_ReadPin>
 80069be:	b908      	cbnz	r0, 80069c4 <BSP_PlatformIsDetected+0x10>
    uint8_t status = SD_PRESENT;
 80069c0:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80069c2:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 80069c4:	2000      	movs	r0, #0
 80069c6:	e7fc      	b.n	80069c2 <BSP_PlatformIsDetected+0xe>
 80069c8:	40020400 	.word	0x40020400

080069cc <SD_CheckStatus>:

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80069cc:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 80069ce:	4b07      	ldr	r3, [pc, #28]	; (80069ec <SD_CheckStatus+0x20>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80069d4:	f7ff ffa4 	bl	8006920 <BSP_SD_GetCardState>
 80069d8:	b920      	cbnz	r0, 80069e4 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 80069da:	4a04      	ldr	r2, [pc, #16]	; (80069ec <SD_CheckStatus+0x20>)
 80069dc:	7813      	ldrb	r3, [r2, #0]
 80069de:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80069e2:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 80069e4:	4b01      	ldr	r3, [pc, #4]	; (80069ec <SD_CheckStatus+0x20>)
 80069e6:	7818      	ldrb	r0, [r3, #0]
}
 80069e8:	bd08      	pop	{r3, pc}
 80069ea:	bf00      	nop
 80069ec:	20000140 	.word	0x20000140

080069f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80069f0:	b510      	push	{r4, lr}
 80069f2:	4604      	mov	r4, r0

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80069f4:	f7ff ffc4 	bl	8006980 <BSP_SD_Init>
 80069f8:	b110      	cbz	r0, 8006a00 <SD_initialize+0x10>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80069fa:	4b04      	ldr	r3, [pc, #16]	; (8006a0c <SD_initialize+0x1c>)
 80069fc:	7818      	ldrb	r0, [r3, #0]
}
 80069fe:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7ff ffe3 	bl	80069cc <SD_CheckStatus>
 8006a06:	4b01      	ldr	r3, [pc, #4]	; (8006a0c <SD_initialize+0x1c>)
 8006a08:	7018      	strb	r0, [r3, #0]
 8006a0a:	e7f6      	b.n	80069fa <SD_initialize+0xa>
 8006a0c:	20000140 	.word	0x20000140

08006a10 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006a10:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8006a12:	f7ff ffdb 	bl	80069cc <SD_CheckStatus>
}
 8006a16:	bd08      	pop	{r3, pc}

08006a18 <SD_CheckStatusWithTimeout>:
{
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4605      	mov	r5, r0
  uint32_t timer = HAL_GetTick();
 8006a1c:	f7fb fafa 	bl	8002014 <HAL_GetTick>
 8006a20:	4604      	mov	r4, r0
  while(HAL_GetTick() - timer < timeout)
 8006a22:	f7fb faf7 	bl	8002014 <HAL_GetTick>
 8006a26:	1b00      	subs	r0, r0, r4
 8006a28:	42a8      	cmp	r0, r5
 8006a2a:	d205      	bcs.n	8006a38 <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006a2c:	f7ff ff78 	bl	8006920 <BSP_SD_GetCardState>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d1f6      	bne.n	8006a22 <SD_CheckStatusWithTimeout+0xa>
      return 0;
 8006a34:	2000      	movs	r0, #0
 8006a36:	e001      	b.n	8006a3c <SD_CheckStatusWithTimeout+0x24>
  return -1;
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006a3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006a40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	460c      	mov	r4, r1
 8006a44:	4615      	mov	r5, r2
 8006a46:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006a48:	f247 5030 	movw	r0, #30000	; 0x7530
 8006a4c:	f7ff ffe4 	bl	8006a18 <SD_CheckStatusWithTimeout>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	db30      	blt.n	8006ab6 <SD_read+0x76>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006a54:	4632      	mov	r2, r6
 8006a56:	4629      	mov	r1, r5
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f7ff ff49 	bl	80068f0 <BSP_SD_ReadBlocks_DMA>
 8006a5e:	b108      	cbz	r0, 8006a64 <SD_read+0x24>
  DRESULT res = RES_ERROR;
 8006a60:	2001      	movs	r0, #1
 8006a62:	e029      	b.n	8006ab8 <SD_read+0x78>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006a64:	4b15      	ldr	r3, [pc, #84]	; (8006abc <SD_read+0x7c>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006a6a:	f7fb fad3 	bl	8002014 <HAL_GetTick>
 8006a6e:	4604      	mov	r4, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006a70:	4b12      	ldr	r3, [pc, #72]	; (8006abc <SD_read+0x7c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	b933      	cbnz	r3, 8006a84 <SD_read+0x44>
 8006a76:	f7fb facd 	bl	8002014 <HAL_GetTick>
 8006a7a:	1b00      	subs	r0, r0, r4
 8006a7c:	f247 532f 	movw	r3, #29999	; 0x752f
 8006a80:	4298      	cmp	r0, r3
 8006a82:	d9f5      	bls.n	8006a70 <SD_read+0x30>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006a84:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <SD_read+0x7c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	b90b      	cbnz	r3, 8006a8e <SD_read+0x4e>
      {
        res = RES_ERROR;
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	e014      	b.n	8006ab8 <SD_read+0x78>
      }
      else
      {
        ReadStatus = 0;
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <SD_read+0x7c>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006a94:	f7fb fabe 	bl	8002014 <HAL_GetTick>
 8006a98:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006a9a:	f7fb fabb 	bl	8002014 <HAL_GetTick>
 8006a9e:	1b00      	subs	r0, r0, r4
 8006aa0:	f247 532f 	movw	r3, #29999	; 0x752f
 8006aa4:	4298      	cmp	r0, r3
 8006aa6:	d804      	bhi.n	8006ab2 <SD_read+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006aa8:	f7ff ff3a 	bl	8006920 <BSP_SD_GetCardState>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d1f4      	bne.n	8006a9a <SD_read+0x5a>
 8006ab0:	e002      	b.n	8006ab8 <SD_read+0x78>
  DRESULT res = RES_ERROR;
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	e000      	b.n	8006ab8 <SD_read+0x78>
    return res;
 8006ab6:	2001      	movs	r0, #1
        res = RES_OK;
    }
#endif

  return res;
}
 8006ab8:	bd70      	pop	{r4, r5, r6, pc}
 8006aba:	bf00      	nop
 8006abc:	20004a38 	.word	0x20004a38

08006ac0 <SD_write>:

/* USER CODE BEGIN beforeWriteSection */
/* can be used to modify previous code / undefine following code / add new code */
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	460f      	mov	r7, r1
 8006ac4:	4616      	mov	r6, r2
 8006ac6:	461d      	mov	r5, r3
	  DRESULT res = RES_ERROR;
	  uint32_t timeout;

	  if(sd_FastWriteFlag == 0)
 8006ac8:	4c26      	ldr	r4, [pc, #152]	; (8006b64 <SD_write+0xa4>)
 8006aca:	6824      	ldr	r4, [r4, #0]
 8006acc:	b12c      	cbz	r4, 8006ada <SD_write+0x1a>
		    }
		  return res;
	  }
	  else
	  {
		  if (WriteStatus == 0)
 8006ace:	4b26      	ldr	r3, [pc, #152]	; (8006b68 <SD_write+0xa8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d13a      	bne.n	8006b4c <SD_write+0x8c>
		  {
			  res = RES_ERROR;
 8006ad6:	2001      	movs	r0, #1
				  res = RES_OK;
			  }
		  }
		  return res;
	  }
}
 8006ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   WriteStatus = 0;
 8006ada:	4b23      	ldr	r3, [pc, #140]	; (8006b68 <SD_write+0xa8>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]
	  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006ae0:	f247 5030 	movw	r0, #30000	; 0x7530
 8006ae4:	f7ff ff98 	bl	8006a18 <SD_CheckStatusWithTimeout>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	da01      	bge.n	8006af0 <SD_write+0x30>
	    return res;
 8006aec:	2001      	movs	r0, #1
 8006aee:	e7f3      	b.n	8006ad8 <SD_write+0x18>
		    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006af0:	462a      	mov	r2, r5
 8006af2:	4631      	mov	r1, r6
 8006af4:	4638      	mov	r0, r7
 8006af6:	f7ff ff07 	bl	8006908 <BSP_SD_WriteBlocks_DMA>
 8006afa:	b108      	cbz	r0, 8006b00 <SD_write+0x40>
	  DRESULT res = RES_ERROR;
 8006afc:	2001      	movs	r0, #1
 8006afe:	e7eb      	b.n	8006ad8 <SD_write+0x18>
		      timeout = HAL_GetTick();
 8006b00:	f7fb fa88 	bl	8002014 <HAL_GetTick>
 8006b04:	4604      	mov	r4, r0
		      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006b06:	4b18      	ldr	r3, [pc, #96]	; (8006b68 <SD_write+0xa8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	b933      	cbnz	r3, 8006b1a <SD_write+0x5a>
 8006b0c:	f7fb fa82 	bl	8002014 <HAL_GetTick>
 8006b10:	1b00      	subs	r0, r0, r4
 8006b12:	f247 532f 	movw	r3, #29999	; 0x752f
 8006b16:	4298      	cmp	r0, r3
 8006b18:	d9f5      	bls.n	8006b06 <SD_write+0x46>
		      if (WriteStatus == 0)
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <SD_write+0xa8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	b90b      	cbnz	r3, 8006b24 <SD_write+0x64>
		        res = RES_ERROR;
 8006b20:	2001      	movs	r0, #1
		  return res;
 8006b22:	e7d9      	b.n	8006ad8 <SD_write+0x18>
		        WriteStatus = 1;
 8006b24:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <SD_write+0xa8>)
 8006b26:	2201      	movs	r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
		        timeout = HAL_GetTick();
 8006b2a:	f7fb fa73 	bl	8002014 <HAL_GetTick>
 8006b2e:	4604      	mov	r4, r0
		        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006b30:	f7fb fa70 	bl	8002014 <HAL_GetTick>
 8006b34:	1b00      	subs	r0, r0, r4
 8006b36:	f247 532f 	movw	r3, #29999	; 0x752f
 8006b3a:	4298      	cmp	r0, r3
 8006b3c:	d804      	bhi.n	8006b48 <SD_write+0x88>
		          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b3e:	f7ff feef 	bl	8006920 <BSP_SD_GetCardState>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d1f4      	bne.n	8006b30 <SD_write+0x70>
 8006b46:	e7c7      	b.n	8006ad8 <SD_write+0x18>
	  DRESULT res = RES_ERROR;
 8006b48:	2001      	movs	r0, #1
 8006b4a:	e7c5      	b.n	8006ad8 <SD_write+0x18>
			  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff, (uint32_t)(sector),count) == MSD_OK)
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4638      	mov	r0, r7
 8006b52:	f7ff fed9 	bl	8006908 <BSP_SD_WriteBlocks_DMA>
 8006b56:	b918      	cbnz	r0, 8006b60 <SD_write+0xa0>
				  WriteStatus = 0;
 8006b58:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <SD_write+0xa8>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
				  res = RES_OK;
 8006b5e:	e7bb      	b.n	8006ad8 <SD_write+0x18>
	  DRESULT res = RES_ERROR;
 8006b60:	2001      	movs	r0, #1
		  return res;
 8006b62:	e7b9      	b.n	8006ad8 <SD_write+0x18>
 8006b64:	20004a40 	.word	0x20004a40
 8006b68:	20004a3c 	.word	0x20004a3c

08006b6c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006b6c:	b530      	push	{r4, r5, lr}
 8006b6e:	b089      	sub	sp, #36	; 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006b70:	4b13      	ldr	r3, [pc, #76]	; (8006bc0 <SD_ioctl+0x54>)
 8006b72:	7818      	ldrb	r0, [r3, #0]
 8006b74:	f010 0401 	ands.w	r4, r0, #1
 8006b78:	d11b      	bne.n	8006bb2 <SD_ioctl+0x46>
 8006b7a:	4615      	mov	r5, r2

  switch (cmd)
 8006b7c:	2903      	cmp	r1, #3
 8006b7e:	d81c      	bhi.n	8006bba <SD_ioctl+0x4e>
 8006b80:	e8df f001 	tbb	[pc, r1]
 8006b84:	100a0402 	.word	0x100a0402
 8006b88:	460c      	mov	r4, r1
 8006b8a:	e013      	b.n	8006bb4 <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006b8c:	4668      	mov	r0, sp
 8006b8e:	f7ff fed1 	bl	8006934 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006b92:	9b06      	ldr	r3, [sp, #24]
 8006b94:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8006b96:	e00d      	b.n	8006bb4 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006b98:	4668      	mov	r0, sp
 8006b9a:	f7ff fecb 	bl	8006934 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006b9e:	9b07      	ldr	r3, [sp, #28]
 8006ba0:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 8006ba2:	e007      	b.n	8006bb4 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006ba4:	4668      	mov	r0, sp
 8006ba6:	f7ff fec5 	bl	8006934 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006baa:	9b07      	ldr	r3, [sp, #28]
 8006bac:	0a5b      	lsrs	r3, r3, #9
 8006bae:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8006bb0:	e000      	b.n	8006bb4 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006bb2:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	b009      	add	sp, #36	; 0x24
 8006bb8:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8006bba:	2404      	movs	r4, #4
 8006bbc:	e7fa      	b.n	8006bb4 <SD_ioctl+0x48>
 8006bbe:	bf00      	nop
 8006bc0:	20000140 	.word	0x20000140

08006bc4 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 8006bc4:	4b01      	ldr	r3, [pc, #4]	; (8006bcc <BSP_SD_WriteCpltCallback+0x8>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]
}
 8006bca:	4770      	bx	lr
 8006bcc:	20004a3c 	.word	0x20004a3c

08006bd0 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 8006bd0:	4b01      	ldr	r3, [pc, #4]	; (8006bd8 <BSP_SD_ReadCpltCallback+0x8>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
}
 8006bd6:	4770      	bx	lr
 8006bd8:	20004a38 	.word	0x20004a38

08006bdc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bdc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bde:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006be2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006be6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 8006bea:	b18c      	cbz	r4, 8006c10 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bec:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006bf0:	6843      	ldr	r3, [r0, #4]
 8006bf2:	b17b      	cbz	r3, 8006c14 <USBD_CDC_EP0_RxReady+0x38>
 8006bf4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006bf8:	28ff      	cmp	r0, #255	; 0xff
 8006bfa:	d00d      	beq.n	8006c18 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8006c02:	4621      	mov	r1, r4
 8006c04:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8006c06:	23ff      	movs	r3, #255	; 0xff
 8006c08:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c0c:	2000      	movs	r0, #0
}
 8006c0e:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8006c10:	2003      	movs	r0, #3
 8006c12:	e7fc      	b.n	8006c0e <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 8006c14:	2000      	movs	r0, #0
 8006c16:	e7fa      	b.n	8006c0e <USBD_CDC_EP0_RxReady+0x32>
 8006c18:	2000      	movs	r0, #0
 8006c1a:	e7f8      	b.n	8006c0e <USBD_CDC_EP0_RxReady+0x32>

08006c1c <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c1c:	230a      	movs	r3, #10
 8006c1e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8006c20:	4800      	ldr	r0, [pc, #0]	; (8006c24 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006c22:	4770      	bx	lr
 8006c24:	200001c0 	.word	0x200001c0

08006c28 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c2c:	4f0f      	ldr	r7, [pc, #60]	; (8006c6c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8006c2e:	2182      	movs	r1, #130	; 0x82
 8006c30:	4638      	mov	r0, r7
 8006c32:	f000 fc3c 	bl	80074ae <USBD_GetEpDesc>
 8006c36:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c38:	2101      	movs	r1, #1
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	f000 fc37 	bl	80074ae <USBD_GetEpDesc>
 8006c40:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c42:	2181      	movs	r1, #129	; 0x81
 8006c44:	4638      	mov	r0, r7
 8006c46:	f000 fc32 	bl	80074ae <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8006c4a:	b10d      	cbz	r5, 8006c50 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c4c:	2210      	movs	r2, #16
 8006c4e:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006c50:	b11c      	cbz	r4, 8006c5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c52:	2240      	movs	r2, #64	; 0x40
 8006c54:	7122      	strb	r2, [r4, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8006c5a:	b118      	cbz	r0, 8006c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c5c:	2240      	movs	r2, #64	; 0x40
 8006c5e:	7102      	strb	r2, [r0, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c64:	2343      	movs	r3, #67	; 0x43
 8006c66:	8033      	strh	r3, [r6, #0]
}
 8006c68:	4800      	ldr	r0, [pc, #0]	; (8006c6c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8006c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c6c:	2000017c 	.word	0x2000017c

08006c70 <USBD_CDC_GetFSCfgDesc>:
{
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c74:	4f0f      	ldr	r7, [pc, #60]	; (8006cb4 <USBD_CDC_GetFSCfgDesc+0x44>)
 8006c76:	2182      	movs	r1, #130	; 0x82
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f000 fc18 	bl	80074ae <USBD_GetEpDesc>
 8006c7e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c80:	2101      	movs	r1, #1
 8006c82:	4638      	mov	r0, r7
 8006c84:	f000 fc13 	bl	80074ae <USBD_GetEpDesc>
 8006c88:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c8a:	2181      	movs	r1, #129	; 0x81
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	f000 fc0e 	bl	80074ae <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8006c92:	b10d      	cbz	r5, 8006c98 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c94:	2210      	movs	r2, #16
 8006c96:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006c98:	b11c      	cbz	r4, 8006ca2 <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c9a:	2240      	movs	r2, #64	; 0x40
 8006c9c:	7122      	strb	r2, [r4, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8006ca2:	b118      	cbz	r0, 8006cac <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ca4:	2240      	movs	r2, #64	; 0x40
 8006ca6:	7102      	strb	r2, [r0, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cac:	2343      	movs	r3, #67	; 0x43
 8006cae:	8033      	strh	r3, [r6, #0]
}
 8006cb0:	4800      	ldr	r0, [pc, #0]	; (8006cb4 <USBD_CDC_GetFSCfgDesc+0x44>)
 8006cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb4:	2000017c 	.word	0x2000017c

08006cb8 <USBD_CDC_GetHSCfgDesc>:
{
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cbc:	4f0f      	ldr	r7, [pc, #60]	; (8006cfc <USBD_CDC_GetHSCfgDesc+0x44>)
 8006cbe:	2182      	movs	r1, #130	; 0x82
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	f000 fbf4 	bl	80074ae <USBD_GetEpDesc>
 8006cc6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cc8:	2101      	movs	r1, #1
 8006cca:	4638      	mov	r0, r7
 8006ccc:	f000 fbef 	bl	80074ae <USBD_GetEpDesc>
 8006cd0:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cd2:	2181      	movs	r1, #129	; 0x81
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	f000 fbea 	bl	80074ae <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8006cda:	b10d      	cbz	r5, 8006ce0 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006cdc:	2210      	movs	r2, #16
 8006cde:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8006ce0:	b11c      	cbz	r4, 8006cea <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	7122      	strb	r2, [r4, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8006cea:	b118      	cbz	r0, 8006cf4 <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cec:	2200      	movs	r2, #0
 8006cee:	7102      	strb	r2, [r0, #4]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cf4:	2343      	movs	r3, #67	; 0x43
 8006cf6:	8033      	strh	r3, [r6, #0]
}
 8006cf8:	4800      	ldr	r0, [pc, #0]	; (8006cfc <USBD_CDC_GetHSCfgDesc+0x44>)
 8006cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cfc:	2000017c 	.word	0x2000017c

08006d00 <USBD_CDC_DataOut>:
{
 8006d00:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d02:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006d06:	33b0      	adds	r3, #176	; 0xb0
 8006d08:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d0c:	b195      	cbz	r5, 8006d34 <USBD_CDC_DataOut+0x34>
 8006d0e:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d10:	f004 fbcd 	bl	800b4ae <USBD_LL_GetRxDataSize>
 8006d14:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d18:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006d1c:	33b0      	adds	r3, #176	; 0xb0
 8006d1e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006d22:	6863      	ldr	r3, [r4, #4]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8006d2a:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006d2e:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8006d30:	2000      	movs	r0, #0
}
 8006d32:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8006d34:	2003      	movs	r0, #3
 8006d36:	e7fc      	b.n	8006d32 <USBD_CDC_DataOut+0x32>

08006d38 <USBD_CDC_DataIn>:
{
 8006d38:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d3a:	f8d0 52c8 	ldr.w	r5, [r0, #712]	; 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d3e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006d42:	33b0      	adds	r3, #176	; 0xb0
 8006d44:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8006d48:	b384      	cbz	r4, 8006dac <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d4a:	f001 030f 	and.w	r3, r1, #15
 8006d4e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006d52:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006d56:	6992      	ldr	r2, [r2, #24]
 8006d58:	b14a      	cbz	r2, 8006d6e <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006d5a:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8006d5e:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8006d62:	6cad      	ldr	r5, [r5, #72]	; 0x48
 8006d64:	fbb2 fcf5 	udiv	ip, r2, r5
 8006d68:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d6c:	b192      	cbz	r2, 8006d94 <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006d74:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006d78:	33b0      	adds	r3, #176	; 0xb0
 8006d7a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006d7e:	6843      	ldr	r3, [r0, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	b1ab      	cbz	r3, 8006db0 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006d84:	460a      	mov	r2, r1
 8006d86:	f504 7104 	add.w	r1, r4, #528	; 0x210
 8006d8a:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8006d8e:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8006d90:	2000      	movs	r0, #0
}
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006d94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006d98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006d9c:	2400      	movs	r4, #0
 8006d9e:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006da0:	4623      	mov	r3, r4
 8006da2:	4622      	mov	r2, r4
 8006da4:	f004 fbfe 	bl	800b5a4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8006da8:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006daa:	e7f2      	b.n	8006d92 <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8006dac:	2003      	movs	r0, #3
 8006dae:	e7f0      	b.n	8006d92 <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8006db0:	2000      	movs	r0, #0
 8006db2:	e7ee      	b.n	8006d92 <USBD_CDC_DataIn+0x5a>

08006db4 <USBD_CDC_Setup>:
{
 8006db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006db6:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006db8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8006dbc:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006dc0:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 8006dca:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 8006dce:	2f00      	cmp	r7, #0
 8006dd0:	d07b      	beq.n	8006eca <USBD_CDC_Setup+0x116>
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd6:	7809      	ldrb	r1, [r1, #0]
 8006dd8:	f011 0660 	ands.w	r6, r1, #96	; 0x60
 8006ddc:	d034      	beq.n	8006e48 <USBD_CDC_Setup+0x94>
 8006dde:	2e20      	cmp	r6, #32
 8006de0:	d16c      	bne.n	8006ebc <USBD_CDC_Setup+0x108>
      if (req->wLength != 0U)
 8006de2:	88ea      	ldrh	r2, [r5, #6]
 8006de4:	b32a      	cbz	r2, 8006e32 <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 8006de6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006dea:	d107      	bne.n	8006dfc <USBD_CDC_Setup+0x48>
          hcdc->CmdOpCode = req->bRequest;
 8006dec:	786b      	ldrb	r3, [r5, #1]
 8006dee:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006df2:	88ea      	ldrh	r2, [r5, #6]
 8006df4:	2a3f      	cmp	r2, #63	; 0x3f
 8006df6:	d813      	bhi.n	8006e20 <USBD_CDC_Setup+0x6c>
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	e012      	b.n	8006e22 <USBD_CDC_Setup+0x6e>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dfc:	33b0      	adds	r3, #176	; 0xb0
 8006dfe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	4639      	mov	r1, r7
 8006e08:	7868      	ldrb	r0, [r5, #1]
 8006e0a:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e0c:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e0e:	2a07      	cmp	r2, #7
 8006e10:	bf28      	it	cs
 8006e12:	2207      	movcs	r2, #7
 8006e14:	4639      	mov	r1, r7
 8006e16:	4620      	mov	r0, r4
 8006e18:	f000 ff0a 	bl	8007c30 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	e051      	b.n	8006ec4 <USBD_CDC_Setup+0x110>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e20:	2240      	movs	r2, #64	; 0x40
 8006e22:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e26:	4639      	mov	r1, r7
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 ff16 	bl	8007c5a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8006e2e:	2600      	movs	r6, #0
 8006e30:	e048      	b.n	8006ec4 <USBD_CDC_Setup+0x110>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e32:	33b0      	adds	r3, #176	; 0xb0
 8006e34:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4629      	mov	r1, r5
 8006e40:	7868      	ldrb	r0, [r5, #1]
 8006e42:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8006e44:	2600      	movs	r6, #0
 8006e46:	e03d      	b.n	8006ec4 <USBD_CDC_Setup+0x110>
      switch (req->bRequest)
 8006e48:	786f      	ldrb	r7, [r5, #1]
 8006e4a:	2f0b      	cmp	r7, #11
 8006e4c:	d831      	bhi.n	8006eb2 <USBD_CDC_Setup+0xfe>
 8006e4e:	e8df f007 	tbb	[pc, r7]
 8006e52:	3906      	.short	0x3906
 8006e54:	30303030 	.word	0x30303030
 8006e58:	30303030 	.word	0x30303030
 8006e5c:	2616      	.short	0x2616
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d004      	beq.n	8006e72 <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f000 fb5d 	bl	8007528 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e6e:	2603      	movs	r6, #3
 8006e70:	e028      	b.n	8006ec4 <USBD_CDC_Setup+0x110>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e72:	2202      	movs	r2, #2
 8006e74:	a901      	add	r1, sp, #4
 8006e76:	f000 fedb 	bl	8007c30 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006e7a:	463e      	mov	r6, r7
 8006e7c:	e022      	b.n	8006ec4 <USBD_CDC_Setup+0x110>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d004      	beq.n	8006e92 <USBD_CDC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f000 fb4d 	bl	8007528 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e8e:	2603      	movs	r6, #3
 8006e90:	e018      	b.n	8006ec4 <USBD_CDC_Setup+0x110>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e92:	2201      	movs	r2, #1
 8006e94:	f10d 0107 	add.w	r1, sp, #7
 8006e98:	f000 feca 	bl	8007c30 <USBD_CtlSendData>
 8006e9c:	e012      	b.n	8006ec4 <USBD_CDC_Setup+0x110>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e9e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d00d      	beq.n	8006ec4 <USBD_CDC_Setup+0x110>
            USBD_CtlError(pdev, req);
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	f000 fb3d 	bl	8007528 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eae:	2603      	movs	r6, #3
 8006eb0:	e008      	b.n	8006ec4 <USBD_CDC_Setup+0x110>
          USBD_CtlError(pdev, req);
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	f000 fb38 	bl	8007528 <USBD_CtlError>
          ret = USBD_FAIL;
 8006eb8:	2603      	movs	r6, #3
          break;
 8006eba:	e003      	b.n	8006ec4 <USBD_CDC_Setup+0x110>
      USBD_CtlError(pdev, req);
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	f000 fb33 	bl	8007528 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ec2:	2603      	movs	r6, #3
}
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	b003      	add	sp, #12
 8006ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8006eca:	2603      	movs	r6, #3
 8006ecc:	e7fa      	b.n	8006ec4 <USBD_CDC_Setup+0x110>

08006ece <USBD_CDC_DeInit>:
{
 8006ece:	b538      	push	{r3, r4, r5, lr}
 8006ed0:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ed2:	2181      	movs	r1, #129	; 0x81
 8006ed4:	f004 fb46 	bl	800b564 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006ed8:	2500      	movs	r5, #0
 8006eda:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006edc:	2101      	movs	r1, #1
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f004 fb40 	bl	800b564 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ee4:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006ee8:	2182      	movs	r1, #130	; 0x82
 8006eea:	4620      	mov	r0, r4
 8006eec:	f004 fb3a 	bl	800b564 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006ef0:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ef4:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ef8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006efc:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006f00:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f04:	b19a      	cbz	r2, 8006f2e <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f06:	33b0      	adds	r3, #176	; 0xb0
 8006f08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f12:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006f16:	33b0      	adds	r3, #176	; 0xb0
 8006f18:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8006f1c:	f004 fb04 	bl	800b528 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f20:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006f24:	33b0      	adds	r3, #176	; 0xb0
 8006f26:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8006f2a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8006f2e:	2000      	movs	r0, #0
 8006f30:	bd38      	pop	{r3, r4, r5, pc}

08006f32 <USBD_CDC_Init>:
{
 8006f32:	b570      	push	{r4, r5, r6, lr}
 8006f34:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f36:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006f3a:	f004 faf1 	bl	800b520 <USBD_static_malloc>
  if (hcdc == NULL)
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d049      	beq.n	8006fd6 <USBD_CDC_Init+0xa4>
 8006f42:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006f44:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006f48:	2100      	movs	r1, #0
 8006f4a:	f004 fb5b 	bl	800b604 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006f4e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006f52:	33b0      	adds	r3, #176	; 0xb0
 8006f54:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006f58:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f5c:	7c23      	ldrb	r3, [r4, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d141      	bne.n	8006fe6 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f66:	2202      	movs	r2, #2
 8006f68:	2181      	movs	r1, #129	; 0x81
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f004 faef 	bl	800b54e <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f70:	2601      	movs	r6, #1
 8006f72:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f78:	2202      	movs	r2, #2
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f004 fae6 	bl	800b54e <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f82:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f86:	2310      	movs	r3, #16
 8006f88:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	2203      	movs	r2, #3
 8006f90:	2182      	movs	r1, #130	; 0x82
 8006f92:	4620      	mov	r0, r4
 8006f94:	f004 fadb 	bl	800b54e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  hcdc->RxBuffer = NULL;
 8006f9e:	2600      	movs	r6, #0
 8006fa0:	f8c5 6204 	str.w	r6, [r5, #516]	; 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006fa4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006fa8:	33b0      	adds	r3, #176	; 0xb0
 8006faa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4798      	blx	r3
  hcdc->TxState = 0U;
 8006fb4:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8006fb8:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 8006fbc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8006fc0:	b362      	cbz	r2, 800701c <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fc2:	7c25      	ldrb	r5, [r4, #16]
 8006fc4:	bb1d      	cbnz	r5, 800700e <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fca:	2101      	movs	r1, #1
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f004 faf1 	bl	800b5b4 <USBD_LL_PrepareReceive>
}
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fd6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8006fda:	33b0      	adds	r3, #176	; 0xb0
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006fe2:	2502      	movs	r5, #2
 8006fe4:	e7f5      	b.n	8006fd2 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fe6:	2340      	movs	r3, #64	; 0x40
 8006fe8:	2202      	movs	r2, #2
 8006fea:	2181      	movs	r1, #129	; 0x81
 8006fec:	4620      	mov	r0, r4
 8006fee:	f004 faae 	bl	800b54e <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ff2:	2601      	movs	r6, #1
 8006ff4:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ff6:	2340      	movs	r3, #64	; 0x40
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f004 faa6 	bl	800b54e <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007002:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007006:	2310      	movs	r3, #16
 8007008:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800700c:	e7be      	b.n	8006f8c <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800700e:	2340      	movs	r3, #64	; 0x40
 8007010:	2101      	movs	r1, #1
 8007012:	4620      	mov	r0, r4
 8007014:	f004 face 	bl	800b5b4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8007018:	2500      	movs	r5, #0
 800701a:	e7da      	b.n	8006fd2 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 800701c:	2502      	movs	r5, #2
 800701e:	e7d8      	b.n	8006fd2 <USBD_CDC_Init+0xa0>

08007020 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8007020:	b139      	cbz	r1, 8007032 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8007022:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8007026:	33b0      	adds	r3, #176	; 0xb0
 8007028:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800702c:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 800702e:	2000      	movs	r0, #0
 8007030:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007032:	2003      	movs	r0, #3
}
 8007034:	4770      	bx	lr

08007036 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007036:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800703a:	33b0      	adds	r3, #176	; 0xb0
 800703c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8007040:	b12b      	cbz	r3, 800704e <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8007042:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007046:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800704a:	2000      	movs	r0, #0
 800704c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800704e:	2003      	movs	r0, #3
}
 8007050:	4770      	bx	lr

08007052 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007052:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8007056:	33b0      	adds	r3, #176	; 0xb0
 8007058:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 800705c:	b11b      	cbz	r3, 8007066 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800705e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007062:	2000      	movs	r0, #0
 8007064:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007066:	2003      	movs	r0, #3
}
 8007068:	4770      	bx	lr

0800706a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800706a:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800706c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8007070:	33b0      	adds	r3, #176	; 0xb0
 8007072:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007076:	b19a      	cbz	r2, 80070a0 <USBD_CDC_TransmitPacket+0x36>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8007078:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800707c:	b10b      	cbz	r3, 8007082 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800707e:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8007080:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8007082:	2301      	movs	r3, #1
 8007084:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007088:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800708c:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800708e:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8007092:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8007096:	2181      	movs	r1, #129	; 0x81
 8007098:	f004 fa84 	bl	800b5a4 <USBD_LL_Transmit>
    ret = USBD_OK;
 800709c:	2000      	movs	r0, #0
 800709e:	e7ef      	b.n	8007080 <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 80070a0:	2003      	movs	r0, #3
 80070a2:	e7ed      	b.n	8007080 <USBD_CDC_TransmitPacket+0x16>

080070a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070a4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070a6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80070aa:	33b0      	adds	r3, #176	; 0xb0
 80070ac:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070b0:	b192      	cbz	r2, 80070d8 <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070b2:	7c04      	ldrb	r4, [r0, #16]
 80070b4:	b944      	cbnz	r4, 80070c8 <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070ba:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80070be:	2101      	movs	r1, #1
 80070c0:	f004 fa78 	bl	800b5b4 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 80070c4:	4620      	mov	r0, r4
 80070c6:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070c8:	2340      	movs	r3, #64	; 0x40
 80070ca:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80070ce:	2101      	movs	r1, #1
 80070d0:	f004 fa70 	bl	800b5b4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80070d4:	2400      	movs	r4, #0
 80070d6:	e7f5      	b.n	80070c4 <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 80070d8:	2403      	movs	r4, #3
 80070da:	e7f3      	b.n	80070c4 <USBD_CDC_ReceivePacket+0x20>

080070dc <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070dc:	b198      	cbz	r0, 8007106 <USBD_Init+0x2a>
{
 80070de:	b508      	push	{r3, lr}
 80070e0:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80070e2:	2000      	movs	r0, #0
 80070e4:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80070e8:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80070ec:	f8c3 02d0 	str.w	r0, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070f0:	b109      	cbz	r1, 80070f6 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 80070f2:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070f6:	2101      	movs	r1, #1
 80070f8:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 80070fc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070fe:	4618      	mov	r0, r3
 8007100:	f004 f98a 	bl	800b418 <USBD_LL_Init>

  return ret;
}
 8007104:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007106:	2003      	movs	r0, #3
}
 8007108:	4770      	bx	lr

0800710a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800710a:	b510      	push	{r4, lr}
 800710c:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8007114:	b189      	cbz	r1, 800713a <USBD_RegisterClass+0x30>
 8007116:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007118:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800711c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800711e:	b123      	cbz	r3, 800712a <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007120:	f10d 0006 	add.w	r0, sp, #6
 8007124:	4798      	blx	r3
 8007126:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800712a:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
 800712e:	3301      	adds	r3, #1
 8007130:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 8007134:	2000      	movs	r0, #0
}
 8007136:	b002      	add	sp, #8
 8007138:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800713a:	2003      	movs	r0, #3
 800713c:	e7fb      	b.n	8007136 <USBD_RegisterClass+0x2c>

0800713e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800713e:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007140:	f004 f9fd 	bl	800b53e <USBD_LL_Start>
}
 8007144:	bd08      	pop	{r3, pc}

08007146 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007146:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007148:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800714c:	b113      	cbz	r3, 8007154 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8007152:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8007154:	2000      	movs	r0, #0
 8007156:	e7fc      	b.n	8007152 <USBD_SetClassConfig+0xc>

08007158 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007158:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800715a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4798      	blx	r3
 8007162:	b900      	cbnz	r0, 8007166 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8007164:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8007166:	2003      	movs	r0, #3
 8007168:	e7fc      	b.n	8007164 <USBD_ClrClassConfig+0xc>

0800716a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800716a:	b538      	push	{r3, r4, r5, lr}
 800716c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800716e:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8007172:	4628      	mov	r0, r5
 8007174:	f000 f9c4 	bl	8007500 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007178:	2301      	movs	r3, #1
 800717a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800717e:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8007182:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007186:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800718a:	f001 031f 	and.w	r3, r1, #31
 800718e:	2b01      	cmp	r3, #1
 8007190:	d00d      	beq.n	80071ae <USBD_LL_SetupStage+0x44>
 8007192:	2b02      	cmp	r3, #2
 8007194:	d010      	beq.n	80071b8 <USBD_LL_SetupStage+0x4e>
 8007196:	b12b      	cbz	r3, 80071a4 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007198:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800719c:	4620      	mov	r0, r4
 800719e:	f004 f9e9 	bl	800b574 <USBD_LL_StallEP>
      break;
 80071a2:	e003      	b.n	80071ac <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071a4:	4629      	mov	r1, r5
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 fb90 	bl	80078cc <USBD_StdDevReq>
  }

  return ret;
}
 80071ac:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071ae:	4629      	mov	r1, r5
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fbc6 	bl	8007942 <USBD_StdItfReq>
      break;
 80071b6:	e7f9      	b.n	80071ac <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071b8:	4629      	mov	r1, r5
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 fc03 	bl	80079c6 <USBD_StdEPReq>
      break;
 80071c0:	e7f4      	b.n	80071ac <USBD_LL_SetupStage+0x42>

080071c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c4:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071cc:	2300      	movs	r3, #0
 80071ce:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 80071d2:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 80071d4:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80071d8:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80071dc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80071e0:	b1db      	cbz	r3, 800721a <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	b1db      	cbz	r3, 800721e <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80071e6:	2100      	movs	r1, #0
 80071e8:	4798      	blx	r3
 80071ea:	4607      	mov	r7, r0
 80071ec:	b9c8      	cbnz	r0, 8007222 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071ee:	2340      	movs	r3, #64	; 0x40
 80071f0:	2200      	movs	r2, #0
 80071f2:	4611      	mov	r1, r2
 80071f4:	4620      	mov	r0, r4
 80071f6:	f004 f9aa 	bl	800b54e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071fa:	2601      	movs	r6, #1
 80071fc:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007200:	2540      	movs	r5, #64	; 0x40
 8007202:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007206:	462b      	mov	r3, r5
 8007208:	2200      	movs	r2, #0
 800720a:	2180      	movs	r1, #128	; 0x80
 800720c:	4620      	mov	r0, r4
 800720e:	f004 f99e 	bl	800b54e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007212:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007214:	6225      	str	r5, [r4, #32]

  return ret;
}
 8007216:	4638      	mov	r0, r7
 8007218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800721a:	2700      	movs	r7, #0
 800721c:	e7e7      	b.n	80071ee <USBD_LL_Reset+0x2c>
 800721e:	2700      	movs	r7, #0
 8007220:	e7e5      	b.n	80071ee <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8007222:	2703      	movs	r7, #3
 8007224:	e7e3      	b.n	80071ee <USBD_LL_Reset+0x2c>

08007226 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007226:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007228:	2000      	movs	r0, #0
 800722a:	4770      	bx	lr

0800722c <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800722c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007230:	b2db      	uxtb	r3, r3
 8007232:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007236:	2304      	movs	r3, #4
 8007238:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800723c:	2000      	movs	r0, #0
 800723e:	4770      	bx	lr

08007240 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007240:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b04      	cmp	r3, #4
 8007248:	d001      	beq.n	800724e <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800724a:	2000      	movs	r0, #0
 800724c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800724e:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8007258:	e7f7      	b.n	800724a <USBD_LL_Resume+0xa>

0800725a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800725a:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800725c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b03      	cmp	r3, #3
 8007264:	d001      	beq.n	800726a <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8007266:	2000      	movs	r0, #0
 8007268:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 800726a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0f9      	beq.n	8007266 <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0f6      	beq.n	8007266 <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 8007278:	4798      	blx	r3
 800727a:	e7f4      	b.n	8007266 <USBD_LL_SOF+0xc>

0800727c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800727c:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800727e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8007282:	33ae      	adds	r3, #174	; 0xae
 8007284:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8007288:	b15a      	cbz	r2, 80072a2 <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800728a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b03      	cmp	r3, #3
 8007292:	d001      	beq.n	8007298 <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8007294:	2000      	movs	r0, #0
}
 8007296:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007298:	6a13      	ldr	r3, [r2, #32]
 800729a:	b123      	cbz	r3, 80072a6 <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800729c:	4798      	blx	r3
  return USBD_OK;
 800729e:	2000      	movs	r0, #0
 80072a0:	e7f9      	b.n	8007296 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 80072a2:	2003      	movs	r0, #3
 80072a4:	e7f7      	b.n	8007296 <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 80072a6:	2000      	movs	r0, #0
 80072a8:	e7f5      	b.n	8007296 <USBD_LL_IsoINIncomplete+0x1a>

080072aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072aa:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 80072ac:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80072b0:	33ae      	adds	r3, #174	; 0xae
 80072b2:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80072b6:	b15a      	cbz	r2, 80072d0 <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d001      	beq.n	80072c6 <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80072c2:	2000      	movs	r0, #0
}
 80072c4:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80072c6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80072c8:	b123      	cbz	r3, 80072d4 <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80072ca:	4798      	blx	r3
  return USBD_OK;
 80072cc:	2000      	movs	r0, #0
 80072ce:	e7f9      	b.n	80072c4 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 80072d0:	2003      	movs	r0, #3
 80072d2:	e7f7      	b.n	80072c4 <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 80072d4:	2000      	movs	r0, #0
 80072d6:	e7f5      	b.n	80072c4 <USBD_LL_IsoOUTIncomplete+0x1a>

080072d8 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80072d8:	2000      	movs	r0, #0
 80072da:	4770      	bx	lr

080072dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80072dc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072de:	2301      	movs	r3, #1
 80072e0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072e4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80072e8:	b123      	cbz	r3, 80072f4 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	7901      	ldrb	r1, [r0, #4]
 80072ee:	4798      	blx	r3
 80072f0:	b910      	cbnz	r0, 80072f8 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80072f2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 80072f4:	2000      	movs	r0, #0
 80072f6:	e7fc      	b.n	80072f2 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 80072f8:	2003      	movs	r0, #3
 80072fa:	e7fa      	b.n	80072f2 <USBD_LL_DevDisconnected+0x16>

080072fc <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80072fc:	2000      	movs	r0, #0
 80072fe:	4770      	bx	lr

08007300 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8007300:	2000      	movs	r0, #0
 8007302:	4770      	bx	lr

08007304 <USBD_LL_DataOutStage>:
{
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4604      	mov	r4, r0
  if (epnum == 0U)
 8007308:	460d      	mov	r5, r1
 800730a:	2900      	cmp	r1, #0
 800730c:	d143      	bne.n	8007396 <USBD_LL_DataOutStage+0x92>
 800730e:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007310:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007314:	2a03      	cmp	r2, #3
 8007316:	d001      	beq.n	800731c <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8007318:	4608      	mov	r0, r1
}
 800731a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800731c:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8007320:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8007324:	4291      	cmp	r1, r2
 8007326:	d812      	bhi.n	800734e <USBD_LL_DataOutStage+0x4a>
        switch (pdev->request.bmRequest & 0x1FU)
 8007328:	f890 32aa 	ldrb.w	r3, [r0, #682]	; 0x2aa
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	2b01      	cmp	r3, #1
 8007332:	d017      	beq.n	8007364 <USBD_LL_DataOutStage+0x60>
 8007334:	2b02      	cmp	r3, #2
 8007336:	d01c      	beq.n	8007372 <USBD_LL_DataOutStage+0x6e>
 8007338:	4628      	mov	r0, r5
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b03      	cmp	r3, #3
 8007342:	d01b      	beq.n	800737c <USBD_LL_DataOutStage+0x78>
        (void)USBD_CtlSendStatus(pdev);
 8007344:	4620      	mov	r0, r4
 8007346:	f000 fc9f 	bl	8007c88 <USBD_CtlSendStatus>
  return USBD_OK;
 800734a:	4628      	mov	r0, r5
 800734c:	e7e5      	b.n	800731a <USBD_LL_DataOutStage+0x16>
        pep->rem_length -= pep->maxpacket;
 800734e:	1a89      	subs	r1, r1, r2
 8007350:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007354:	428a      	cmp	r2, r1
 8007356:	bf28      	it	cs
 8007358:	460a      	movcs	r2, r1
 800735a:	4619      	mov	r1, r3
 800735c:	f000 fc8c 	bl	8007c78 <USBD_CtlContinueRx>
  return USBD_OK;
 8007360:	4628      	mov	r0, r5
 8007362:	e7da      	b.n	800731a <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007364:	f890 12ae 	ldrb.w	r1, [r0, #686]	; 0x2ae
 8007368:	f7ff ffc8 	bl	80072fc <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800736c:	2800      	cmp	r0, #0
 800736e:	d1e9      	bne.n	8007344 <USBD_LL_DataOutStage+0x40>
 8007370:	e7e3      	b.n	800733a <USBD_LL_DataOutStage+0x36>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007372:	f890 12ae 	ldrb.w	r1, [r0, #686]	; 0x2ae
 8007376:	f7ff ffc3 	bl	8007300 <USBD_CoreFindEP>
            break;
 800737a:	e7f7      	b.n	800736c <USBD_LL_DataOutStage+0x68>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800737c:	f100 03ae 	add.w	r3, r0, #174	; 0xae
 8007380:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007384:	691a      	ldr	r2, [r3, #16]
 8007386:	2a00      	cmp	r2, #0
 8007388:	d0dc      	beq.n	8007344 <USBD_LL_DataOutStage+0x40>
              pdev->classId = idx;
 800738a:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	4620      	mov	r0, r4
 8007392:	4798      	blx	r3
 8007394:	e7d6      	b.n	8007344 <USBD_LL_DataOutStage+0x40>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007396:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800739a:	f7ff ffb1 	bl	8007300 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800739e:	b990      	cbnz	r0, 80073c6 <USBD_LL_DataOutStage+0xc2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d1b7      	bne.n	800731a <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 80073aa:	f100 03ae 	add.w	r3, r0, #174	; 0xae
 80073ae:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80073b2:	699a      	ldr	r2, [r3, #24]
 80073b4:	2a00      	cmp	r2, #0
 80073b6:	d0b0      	beq.n	800731a <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 80073b8:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	4629      	mov	r1, r5
 80073c0:	4620      	mov	r0, r4
 80073c2:	4798      	blx	r3
      if (ret != USBD_OK)
 80073c4:	e7a9      	b.n	800731a <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 80073c6:	2000      	movs	r0, #0
 80073c8:	e7a7      	b.n	800731a <USBD_LL_DataOutStage+0x16>

080073ca <USBD_LL_DataInStage>:
{
 80073ca:	b538      	push	{r3, r4, r5, lr}
 80073cc:	4604      	mov	r4, r0
  if (epnum == 0U)
 80073ce:	460d      	mov	r5, r1
 80073d0:	2900      	cmp	r1, #0
 80073d2:	d14b      	bne.n	800746c <USBD_LL_DataInStage+0xa2>
 80073d4:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073d6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80073da:	2a02      	cmp	r2, #2
 80073dc:	d007      	beq.n	80073ee <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 80073de:	f894 02a0 	ldrb.w	r0, [r4, #672]	; 0x2a0
 80073e2:	b118      	cbz	r0, 80073ec <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 80073ea:	4628      	mov	r0, r5
}
 80073ec:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80073ee:	69c2      	ldr	r2, [r0, #28]
 80073f0:	6a01      	ldr	r1, [r0, #32]
 80073f2:	428a      	cmp	r2, r1
 80073f4:	d80e      	bhi.n	8007414 <USBD_LL_DataInStage+0x4a>
        if ((pep->maxpacket == pep->rem_length) &&
 80073f6:	428a      	cmp	r2, r1
 80073f8:	d018      	beq.n	800742c <USBD_LL_DataInStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fa:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b03      	cmp	r3, #3
 8007402:	d027      	beq.n	8007454 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007404:	2180      	movs	r1, #128	; 0x80
 8007406:	4620      	mov	r0, r4
 8007408:	f004 f8b4 	bl	800b574 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800740c:	4620      	mov	r0, r4
 800740e:	f000 fc46 	bl	8007c9e <USBD_CtlReceiveStatus>
 8007412:	e7e4      	b.n	80073de <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8007414:	1a52      	subs	r2, r2, r1
 8007416:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007418:	4619      	mov	r1, r3
 800741a:	f000 fc16 	bl	8007c4a <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800741e:	2300      	movs	r3, #0
 8007420:	461a      	mov	r2, r3
 8007422:	4619      	mov	r1, r3
 8007424:	4620      	mov	r0, r4
 8007426:	f004 f8c5 	bl	800b5b4 <USBD_LL_PrepareReceive>
 800742a:	e7d8      	b.n	80073de <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800742c:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800742e:	4299      	cmp	r1, r3
 8007430:	d8e3      	bhi.n	80073fa <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8007432:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007436:	4293      	cmp	r3, r2
 8007438:	d2df      	bcs.n	80073fa <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800743a:	2200      	movs	r2, #0
 800743c:	4611      	mov	r1, r2
 800743e:	f000 fc04 	bl	8007c4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007442:	2100      	movs	r1, #0
 8007444:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007448:	460b      	mov	r3, r1
 800744a:	460a      	mov	r2, r1
 800744c:	4620      	mov	r0, r4
 800744e:	f004 f8b1 	bl	800b5b4 <USBD_LL_PrepareReceive>
 8007452:	e7c4      	b.n	80073de <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007454:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	2a00      	cmp	r2, #0
 800745c:	d0d2      	beq.n	8007404 <USBD_LL_DataInStage+0x3a>
              pdev->classId = 0U;
 800745e:	2200      	movs	r2, #0
 8007460:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	4620      	mov	r0, r4
 8007468:	4798      	blx	r3
 800746a:	e7cb      	b.n	8007404 <USBD_LL_DataInStage+0x3a>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800746c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007470:	f7ff ff46 	bl	8007300 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007474:	b990      	cbnz	r0, 800749c <USBD_LL_DataInStage+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007476:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b03      	cmp	r3, #3
 800747e:	d1b5      	bne.n	80073ec <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8007480:	f100 03ae 	add.w	r3, r0, #174	; 0xae
 8007484:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007488:	695a      	ldr	r2, [r3, #20]
 800748a:	2a00      	cmp	r2, #0
 800748c:	d0ae      	beq.n	80073ec <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 800748e:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	4629      	mov	r1, r5
 8007496:	4620      	mov	r0, r4
 8007498:	4798      	blx	r3
          if (ret != USBD_OK)
 800749a:	e7a7      	b.n	80073ec <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 800749c:	2000      	movs	r0, #0
 800749e:	e7a5      	b.n	80073ec <USBD_LL_DataInStage+0x22>

080074a0 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 80074a0:	7803      	ldrb	r3, [r0, #0]
 80074a2:	880a      	ldrh	r2, [r1, #0]
 80074a4:	4413      	add	r3, r2
 80074a6:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80074a8:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 80074aa:	4418      	add	r0, r3
 80074ac:	4770      	bx	lr

080074ae <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 80074ae:	8842      	ldrh	r2, [r0, #2]
 80074b0:	7803      	ldrb	r3, [r0, #0]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d918      	bls.n	80074e8 <USBD_GetEpDesc+0x3a>
{
 80074b6:	b530      	push	{r4, r5, lr}
 80074b8:	b083      	sub	sp, #12
 80074ba:	4604      	mov	r4, r0
 80074bc:	460d      	mov	r5, r1
    ptr = desc->bLength;
 80074be:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 80074c2:	8863      	ldrh	r3, [r4, #2]
 80074c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d20a      	bcs.n	80074e2 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80074cc:	f10d 0106 	add.w	r1, sp, #6
 80074d0:	f7ff ffe6 	bl	80074a0 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074d4:	7843      	ldrb	r3, [r0, #1]
 80074d6:	2b05      	cmp	r3, #5
 80074d8:	d1f3      	bne.n	80074c2 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 80074da:	7883      	ldrb	r3, [r0, #2]
 80074dc:	42ab      	cmp	r3, r5
 80074de:	d1f0      	bne.n	80074c2 <USBD_GetEpDesc+0x14>
 80074e0:	e000      	b.n	80074e4 <USBD_GetEpDesc+0x36>
 80074e2:	2000      	movs	r0, #0
}
 80074e4:	b003      	add	sp, #12
 80074e6:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80074e8:	2000      	movs	r0, #0
}
 80074ea:	4770      	bx	lr

080074ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074ec:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80074ee:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80074f0:	e002      	b.n	80074f8 <USBD_GetLen+0xc>
  {
    len++;
 80074f2:	3001      	adds	r0, #1
 80074f4:	b2c0      	uxtb	r0, r0
    pbuff++;
 80074f6:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 80074f8:	781a      	ldrb	r2, [r3, #0]
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	d1f9      	bne.n	80074f2 <USBD_GetLen+0x6>
  }

  return len;
}
 80074fe:	4770      	bx	lr

08007500 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8007500:	780b      	ldrb	r3, [r1, #0]
 8007502:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8007504:	784b      	ldrb	r3, [r1, #1]
 8007506:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8007508:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800750a:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800750c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8007510:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8007512:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8007514:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007516:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800751a:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800751c:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800751e:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007520:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8007524:	80c3      	strh	r3, [r0, #6]
}
 8007526:	4770      	bx	lr

08007528 <USBD_CtlError>:
{
 8007528:	b510      	push	{r4, lr}
 800752a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800752c:	2180      	movs	r1, #128	; 0x80
 800752e:	f004 f821 	bl	800b574 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007532:	2100      	movs	r1, #0
 8007534:	4620      	mov	r0, r4
 8007536:	f004 f81d 	bl	800b574 <USBD_LL_StallEP>
}
 800753a:	bd10      	pop	{r4, pc}

0800753c <USBD_GetDescriptor>:
{
 800753c:	b530      	push	{r4, r5, lr}
 800753e:	b083      	sub	sp, #12
 8007540:	4604      	mov	r4, r0
 8007542:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800754a:	884a      	ldrh	r2, [r1, #2]
 800754c:	0a13      	lsrs	r3, r2, #8
 800754e:	3b01      	subs	r3, #1
 8007550:	2b0e      	cmp	r3, #14
 8007552:	f200 80bc 	bhi.w	80076ce <USBD_GetDescriptor+0x192>
 8007556:	e8df f003 	tbb	[pc, r3]
 800755a:	3015      	.short	0x3015
 800755c:	9ebaba44 	.word	0x9ebaba44
 8007560:	bababaab 	.word	0xbababaab
 8007564:	babababa 	.word	0xbabababa
 8007568:	08          	.byte	0x08
 8007569:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800756a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	b123      	cbz	r3, 800757c <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007572:	f10d 0106 	add.w	r1, sp, #6
 8007576:	7c00      	ldrb	r0, [r0, #16]
 8007578:	4798      	blx	r3
  if (err != 0U)
 800757a:	e00a      	b.n	8007592 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 800757c:	4629      	mov	r1, r5
 800757e:	f7ff ffd3 	bl	8007528 <USBD_CtlError>
  if (err != 0U)
 8007582:	e018      	b.n	80075b6 <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007584:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f10d 0106 	add.w	r1, sp, #6
 800758e:	7c00      	ldrb	r0, [r0, #16]
 8007590:	4798      	blx	r3
  if (req->wLength != 0U)
 8007592:	88ea      	ldrh	r2, [r5, #6]
 8007594:	2a00      	cmp	r2, #0
 8007596:	f000 80a3 	beq.w	80076e0 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 800759a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 8099 	beq.w	80076d6 <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 80075a4:	429a      	cmp	r2, r3
 80075a6:	bf28      	it	cs
 80075a8:	461a      	movcs	r2, r3
 80075aa:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075ae:	4601      	mov	r1, r0
 80075b0:	4620      	mov	r0, r4
 80075b2:	f000 fb3d 	bl	8007c30 <USBD_CtlSendData>
}
 80075b6:	b003      	add	sp, #12
 80075b8:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ba:	7c03      	ldrb	r3, [r0, #16]
 80075bc:	b943      	cbnz	r3, 80075d0 <USBD_GetDescriptor+0x94>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80075be:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	f10d 0006 	add.w	r0, sp, #6
 80075c8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075ca:	2302      	movs	r3, #2
 80075cc:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80075ce:	e7e0      	b.n	8007592 <USBD_GetDescriptor+0x56>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80075d0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80075d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d6:	f10d 0006 	add.w	r0, sp, #6
 80075da:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075dc:	2302      	movs	r3, #2
 80075de:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80075e0:	e7d7      	b.n	8007592 <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	2a05      	cmp	r2, #5
 80075e6:	d852      	bhi.n	800768e <USBD_GetDescriptor+0x152>
 80075e8:	e8df f002 	tbb	[pc, r2]
 80075ec:	2a1d1003 	.word	0x2a1d1003
 80075f0:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	b123      	cbz	r3, 8007604 <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075fa:	f10d 0106 	add.w	r1, sp, #6
 80075fe:	7c00      	ldrb	r0, [r0, #16]
 8007600:	4798      	blx	r3
  if (err != 0U)
 8007602:	e7c6      	b.n	8007592 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007604:	4629      	mov	r1, r5
 8007606:	f7ff ff8f 	bl	8007528 <USBD_CtlError>
  if (err != 0U)
 800760a:	e7d4      	b.n	80075b6 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800760c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	b123      	cbz	r3, 800761e <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007614:	f10d 0106 	add.w	r1, sp, #6
 8007618:	7c00      	ldrb	r0, [r0, #16]
 800761a:	4798      	blx	r3
  if (err != 0U)
 800761c:	e7b9      	b.n	8007592 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800761e:	4629      	mov	r1, r5
 8007620:	f7ff ff82 	bl	8007528 <USBD_CtlError>
  if (err != 0U)
 8007624:	e7c7      	b.n	80075b6 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007626:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	b123      	cbz	r3, 8007638 <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800762e:	f10d 0106 	add.w	r1, sp, #6
 8007632:	7c00      	ldrb	r0, [r0, #16]
 8007634:	4798      	blx	r3
  if (err != 0U)
 8007636:	e7ac      	b.n	8007592 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007638:	4629      	mov	r1, r5
 800763a:	f7ff ff75 	bl	8007528 <USBD_CtlError>
  if (err != 0U)
 800763e:	e7ba      	b.n	80075b6 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007640:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	b123      	cbz	r3, 8007652 <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007648:	f10d 0106 	add.w	r1, sp, #6
 800764c:	7c00      	ldrb	r0, [r0, #16]
 800764e:	4798      	blx	r3
  if (err != 0U)
 8007650:	e79f      	b.n	8007592 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007652:	4629      	mov	r1, r5
 8007654:	f7ff ff68 	bl	8007528 <USBD_CtlError>
  if (err != 0U)
 8007658:	e7ad      	b.n	80075b6 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800765a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	b123      	cbz	r3, 800766c <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007662:	f10d 0106 	add.w	r1, sp, #6
 8007666:	7c00      	ldrb	r0, [r0, #16]
 8007668:	4798      	blx	r3
  if (err != 0U)
 800766a:	e792      	b.n	8007592 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 800766c:	4629      	mov	r1, r5
 800766e:	f7ff ff5b 	bl	8007528 <USBD_CtlError>
  if (err != 0U)
 8007672:	e7a0      	b.n	80075b6 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007674:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	b123      	cbz	r3, 8007686 <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800767c:	f10d 0106 	add.w	r1, sp, #6
 8007680:	7c00      	ldrb	r0, [r0, #16]
 8007682:	4798      	blx	r3
  if (err != 0U)
 8007684:	e785      	b.n	8007592 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8007686:	4629      	mov	r1, r5
 8007688:	f7ff ff4e 	bl	8007528 <USBD_CtlError>
  if (err != 0U)
 800768c:	e793      	b.n	80075b6 <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 800768e:	4629      	mov	r1, r5
 8007690:	f7ff ff4a 	bl	8007528 <USBD_CtlError>
  if (err != 0U)
 8007694:	e78f      	b.n	80075b6 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007696:	7c03      	ldrb	r3, [r0, #16]
 8007698:	b933      	cbnz	r3, 80076a8 <USBD_GetDescriptor+0x16c>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800769a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800769e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a0:	f10d 0006 	add.w	r0, sp, #6
 80076a4:	4798      	blx	r3
  if (err != 0U)
 80076a6:	e774      	b.n	8007592 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80076a8:	4629      	mov	r1, r5
 80076aa:	f7ff ff3d 	bl	8007528 <USBD_CtlError>
  if (err != 0U)
 80076ae:	e782      	b.n	80075b6 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076b0:	7c03      	ldrb	r3, [r0, #16]
 80076b2:	b943      	cbnz	r3, 80076c6 <USBD_GetDescriptor+0x18a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80076b4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	f10d 0006 	add.w	r0, sp, #6
 80076be:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076c0:	2307      	movs	r3, #7
 80076c2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80076c4:	e765      	b.n	8007592 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80076c6:	4629      	mov	r1, r5
 80076c8:	f7ff ff2e 	bl	8007528 <USBD_CtlError>
  if (err != 0U)
 80076cc:	e773      	b.n	80075b6 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7ff ff2a 	bl	8007528 <USBD_CtlError>
    return;
 80076d4:	e76f      	b.n	80075b6 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 80076d6:	4629      	mov	r1, r5
 80076d8:	4620      	mov	r0, r4
 80076da:	f7ff ff25 	bl	8007528 <USBD_CtlError>
 80076de:	e76a      	b.n	80075b6 <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fad1 	bl	8007c88 <USBD_CtlSendStatus>
 80076e6:	e766      	b.n	80075b6 <USBD_GetDescriptor+0x7a>

080076e8 <USBD_SetAddress>:
{
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076ec:	888b      	ldrh	r3, [r1, #4]
 80076ee:	b9fb      	cbnz	r3, 8007730 <USBD_SetAddress+0x48>
 80076f0:	88cb      	ldrh	r3, [r1, #6]
 80076f2:	b9eb      	cbnz	r3, 8007730 <USBD_SetAddress+0x48>
 80076f4:	884b      	ldrh	r3, [r1, #2]
 80076f6:	2b7f      	cmp	r3, #127	; 0x7f
 80076f8:	d81a      	bhi.n	8007730 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076fa:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b03      	cmp	r3, #3
 8007706:	d00c      	beq.n	8007722 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8007708:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800770c:	4629      	mov	r1, r5
 800770e:	f003 ff41 	bl	800b594 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007712:	4620      	mov	r0, r4
 8007714:	f000 fab8 	bl	8007c88 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007718:	b135      	cbz	r5, 8007728 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800771a:	2302      	movs	r3, #2
 800771c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007720:	e009      	b.n	8007736 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8007722:	f7ff ff01 	bl	8007528 <USBD_CtlError>
 8007726:	e006      	b.n	8007736 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007728:	2301      	movs	r3, #1
 800772a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800772e:	e002      	b.n	8007736 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8007730:	4620      	mov	r0, r4
 8007732:	f7ff fef9 	bl	8007528 <USBD_CtlError>
}
 8007736:	bd38      	pop	{r3, r4, r5, pc}

08007738 <USBD_SetConfig>:
{
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	4604      	mov	r4, r0
 800773c:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800773e:	788d      	ldrb	r5, [r1, #2]
 8007740:	4b2f      	ldr	r3, [pc, #188]	; (8007800 <USBD_SetConfig+0xc8>)
 8007742:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007744:	2d01      	cmp	r5, #1
 8007746:	d810      	bhi.n	800776a <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8007748:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d00f      	beq.n	8007772 <USBD_SetConfig+0x3a>
 8007752:	2b03      	cmp	r3, #3
 8007754:	d026      	beq.n	80077a4 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 8007756:	f7ff fee7 	bl	8007528 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800775a:	4b29      	ldr	r3, [pc, #164]	; (8007800 <USBD_SetConfig+0xc8>)
 800775c:	7819      	ldrb	r1, [r3, #0]
 800775e:	4620      	mov	r0, r4
 8007760:	f7ff fcfa 	bl	8007158 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007764:	2503      	movs	r5, #3
}
 8007766:	4628      	mov	r0, r5
 8007768:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800776a:	f7ff fedd 	bl	8007528 <USBD_CtlError>
    return USBD_FAIL;
 800776e:	2503      	movs	r5, #3
 8007770:	e7f9      	b.n	8007766 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8007772:	b1a5      	cbz	r5, 800779e <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8007774:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007776:	4629      	mov	r1, r5
 8007778:	f7ff fce5 	bl	8007146 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800777c:	4605      	mov	r5, r0
 800777e:	b138      	cbz	r0, 8007790 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 8007780:	4631      	mov	r1, r6
 8007782:	4620      	mov	r0, r4
 8007784:	f7ff fed0 	bl	8007528 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007788:	2302      	movs	r3, #2
 800778a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800778e:	e7ea      	b.n	8007766 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8007790:	4620      	mov	r0, r4
 8007792:	f000 fa79 	bl	8007c88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007796:	2303      	movs	r3, #3
 8007798:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800779c:	e7e3      	b.n	8007766 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800779e:	f000 fa73 	bl	8007c88 <USBD_CtlSendStatus>
 80077a2:	e7e0      	b.n	8007766 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 80077a4:	b1cd      	cbz	r5, 80077da <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 80077a6:	6841      	ldr	r1, [r0, #4]
 80077a8:	428d      	cmp	r5, r1
 80077aa:	d025      	beq.n	80077f8 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077ac:	b2c9      	uxtb	r1, r1
 80077ae:	f7ff fcd3 	bl	8007158 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80077b2:	4b13      	ldr	r3, [pc, #76]	; (8007800 <USBD_SetConfig+0xc8>)
 80077b4:	7819      	ldrb	r1, [r3, #0]
 80077b6:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077b8:	4620      	mov	r0, r4
 80077ba:	f7ff fcc4 	bl	8007146 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80077be:	4605      	mov	r5, r0
 80077c0:	b1b0      	cbz	r0, 80077f0 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 80077c2:	4631      	mov	r1, r6
 80077c4:	4620      	mov	r0, r4
 80077c6:	f7ff feaf 	bl	8007528 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077ca:	7921      	ldrb	r1, [r4, #4]
 80077cc:	4620      	mov	r0, r4
 80077ce:	f7ff fcc3 	bl	8007158 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077d2:	2302      	movs	r3, #2
 80077d4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80077d8:	e7c5      	b.n	8007766 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077da:	2302      	movs	r3, #2
 80077dc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80077e0:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7ff fcb8 	bl	8007158 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80077e8:	4620      	mov	r0, r4
 80077ea:	f000 fa4d 	bl	8007c88 <USBD_CtlSendStatus>
 80077ee:	e7ba      	b.n	8007766 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 fa49 	bl	8007c88 <USBD_CtlSendStatus>
 80077f6:	e7b6      	b.n	8007766 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80077f8:	f000 fa46 	bl	8007c88 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80077fc:	2500      	movs	r5, #0
 80077fe:	e7b2      	b.n	8007766 <USBD_SetConfig+0x2e>
 8007800:	20004a44 	.word	0x20004a44

08007804 <USBD_GetConfig>:
{
 8007804:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8007806:	88cb      	ldrh	r3, [r1, #6]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d10b      	bne.n	8007824 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800780c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d909      	bls.n	800782a <USBD_GetConfig+0x26>
 8007816:	2b03      	cmp	r3, #3
 8007818:	d109      	bne.n	800782e <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800781a:	2201      	movs	r2, #1
 800781c:	1d01      	adds	r1, r0, #4
 800781e:	f000 fa07 	bl	8007c30 <USBD_CtlSendData>
        break;
 8007822:	e001      	b.n	8007828 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8007824:	f7ff fe80 	bl	8007528 <USBD_CtlError>
}
 8007828:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800782a:	b25b      	sxtb	r3, r3
 800782c:	b913      	cbnz	r3, 8007834 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800782e:	f7ff fe7b 	bl	8007528 <USBD_CtlError>
}
 8007832:	e7f9      	b.n	8007828 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 8007834:	4601      	mov	r1, r0
 8007836:	2300      	movs	r3, #0
 8007838:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800783c:	2201      	movs	r2, #1
 800783e:	f000 f9f7 	bl	8007c30 <USBD_CtlSendData>
        break;
 8007842:	e7f1      	b.n	8007828 <USBD_GetConfig+0x24>

08007844 <USBD_GetStatus>:
{
 8007844:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8007846:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800784a:	3b01      	subs	r3, #1
 800784c:	2b02      	cmp	r3, #2
 800784e:	d812      	bhi.n	8007876 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8007850:	88cb      	ldrh	r3, [r1, #6]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d10c      	bne.n	8007870 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007856:	2301      	movs	r3, #1
 8007858:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800785a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800785e:	b10b      	cbz	r3, 8007864 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007860:	2303      	movs	r3, #3
 8007862:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007864:	2202      	movs	r2, #2
 8007866:	f100 010c 	add.w	r1, r0, #12
 800786a:	f000 f9e1 	bl	8007c30 <USBD_CtlSendData>
}
 800786e:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8007870:	f7ff fe5a 	bl	8007528 <USBD_CtlError>
        break;
 8007874:	e7fb      	b.n	800786e <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8007876:	f7ff fe57 	bl	8007528 <USBD_CtlError>
}
 800787a:	e7f8      	b.n	800786e <USBD_GetStatus+0x2a>

0800787c <USBD_SetFeature>:
{
 800787c:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800787e:	884b      	ldrh	r3, [r1, #2]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d004      	beq.n	800788e <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007884:	2b02      	cmp	r3, #2
 8007886:	d007      	beq.n	8007898 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 8007888:	f7ff fe4e 	bl	8007528 <USBD_CtlError>
}
 800788c:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800788e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007892:	f000 f9f9 	bl	8007c88 <USBD_CtlSendStatus>
 8007896:	e7f9      	b.n	800788c <USBD_SetFeature+0x10>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007898:	888b      	ldrh	r3, [r1, #4]
 800789a:	0a1b      	lsrs	r3, r3, #8
 800789c:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80078a0:	f000 f9f2 	bl	8007c88 <USBD_CtlSendStatus>
 80078a4:	e7f2      	b.n	800788c <USBD_SetFeature+0x10>

080078a6 <USBD_ClrFeature>:
{
 80078a6:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80078a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80078ac:	3b01      	subs	r3, #1
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d809      	bhi.n	80078c6 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078b2:	884b      	ldrh	r3, [r1, #2]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d000      	beq.n	80078ba <USBD_ClrFeature+0x14>
}
 80078b8:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80078c0:	f000 f9e2 	bl	8007c88 <USBD_CtlSendStatus>
 80078c4:	e7f8      	b.n	80078b8 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80078c6:	f7ff fe2f 	bl	8007528 <USBD_CtlError>
}
 80078ca:	e7f5      	b.n	80078b8 <USBD_ClrFeature+0x12>

080078cc <USBD_StdDevReq>:
{
 80078cc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ce:	780c      	ldrb	r4, [r1, #0]
 80078d0:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80078d4:	2c20      	cmp	r4, #32
 80078d6:	d006      	beq.n	80078e6 <USBD_StdDevReq+0x1a>
 80078d8:	2c40      	cmp	r4, #64	; 0x40
 80078da:	d004      	beq.n	80078e6 <USBD_StdDevReq+0x1a>
 80078dc:	b16c      	cbz	r4, 80078fa <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 80078de:	f7ff fe23 	bl	8007528 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80078e2:	2400      	movs	r4, #0
      break;
 80078e4:	e007      	b.n	80078f6 <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80078e6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 80078ea:	33ae      	adds	r3, #174	; 0xae
 80078ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	4798      	blx	r3
 80078f4:	4604      	mov	r4, r0
}
 80078f6:	4620      	mov	r0, r4
 80078f8:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 80078fa:	784d      	ldrb	r5, [r1, #1]
 80078fc:	2d09      	cmp	r5, #9
 80078fe:	d81d      	bhi.n	800793c <USBD_StdDevReq+0x70>
 8007900:	e8df f005 	tbb	[pc, r5]
 8007904:	161c1912 	.word	0x161c1912
 8007908:	1c05081c 	.word	0x1c05081c
 800790c:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800790e:	f7ff fe15 	bl	800753c <USBD_GetDescriptor>
          break;
 8007912:	e7f0      	b.n	80078f6 <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8007914:	f7ff fee8 	bl	80076e8 <USBD_SetAddress>
          break;
 8007918:	e7ed      	b.n	80078f6 <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800791a:	f7ff ff0d 	bl	8007738 <USBD_SetConfig>
 800791e:	4604      	mov	r4, r0
          break;
 8007920:	e7e9      	b.n	80078f6 <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 8007922:	f7ff ff6f 	bl	8007804 <USBD_GetConfig>
          break;
 8007926:	e7e6      	b.n	80078f6 <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 8007928:	f7ff ff8c 	bl	8007844 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800792c:	462c      	mov	r4, r5
          break;
 800792e:	e7e2      	b.n	80078f6 <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8007930:	f7ff ffa4 	bl	800787c <USBD_SetFeature>
          break;
 8007934:	e7df      	b.n	80078f6 <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 8007936:	f7ff ffb6 	bl	80078a6 <USBD_ClrFeature>
          break;
 800793a:	e7dc      	b.n	80078f6 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800793c:	f7ff fdf4 	bl	8007528 <USBD_CtlError>
          break;
 8007940:	e7d9      	b.n	80078f6 <USBD_StdDevReq+0x2a>

08007942 <USBD_StdItfReq>:
{
 8007942:	b570      	push	{r4, r5, r6, lr}
 8007944:	4605      	mov	r5, r0
 8007946:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007948:	780b      	ldrb	r3, [r1, #0]
 800794a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800794e:	2b20      	cmp	r3, #32
 8007950:	d007      	beq.n	8007962 <USBD_StdItfReq+0x20>
 8007952:	2b40      	cmp	r3, #64	; 0x40
 8007954:	d005      	beq.n	8007962 <USBD_StdItfReq+0x20>
 8007956:	b123      	cbz	r3, 8007962 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8007958:	f7ff fde6 	bl	8007528 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800795c:	2600      	movs	r6, #0
}
 800795e:	4630      	mov	r0, r6
 8007960:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8007962:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8007966:	3b01      	subs	r3, #1
 8007968:	2b02      	cmp	r3, #2
 800796a:	d826      	bhi.n	80079ba <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800796c:	7921      	ldrb	r1, [r4, #4]
 800796e:	2901      	cmp	r1, #1
 8007970:	d905      	bls.n	800797e <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 8007972:	4621      	mov	r1, r4
 8007974:	4628      	mov	r0, r5
 8007976:	f7ff fdd7 	bl	8007528 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800797a:	2600      	movs	r6, #0
 800797c:	e7ef      	b.n	800795e <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800797e:	4628      	mov	r0, r5
 8007980:	f7ff fcbc 	bl	80072fc <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007984:	b968      	cbnz	r0, 80079a2 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 8007986:	f100 02ae 	add.w	r2, r0, #174	; 0xae
 800798a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800798e:	6891      	ldr	r1, [r2, #8]
 8007990:	b189      	cbz	r1, 80079b6 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8007992:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007996:	6893      	ldr	r3, [r2, #8]
 8007998:	4621      	mov	r1, r4
 800799a:	4628      	mov	r0, r5
 800799c:	4798      	blx	r3
 800799e:	4606      	mov	r6, r0
 80079a0:	e000      	b.n	80079a4 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 80079a2:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079a4:	88e3      	ldrh	r3, [r4, #6]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1d9      	bne.n	800795e <USBD_StdItfReq+0x1c>
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	d1d7      	bne.n	800795e <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 f96a 	bl	8007c88 <USBD_CtlSendStatus>
 80079b4:	e7d3      	b.n	800795e <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 80079b6:	2603      	movs	r6, #3
 80079b8:	e7f4      	b.n	80079a4 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 80079ba:	4621      	mov	r1, r4
 80079bc:	4628      	mov	r0, r5
 80079be:	f7ff fdb3 	bl	8007528 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80079c2:	2600      	movs	r6, #0
          break;
 80079c4:	e7cb      	b.n	800795e <USBD_StdItfReq+0x1c>

080079c6 <USBD_StdEPReq>:
{
 80079c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	4606      	mov	r6, r0
 80079cc:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80079ce:	888b      	ldrh	r3, [r1, #4]
 80079d0:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d2:	780c      	ldrb	r4, [r1, #0]
 80079d4:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80079d8:	2c20      	cmp	r4, #32
 80079da:	d008      	beq.n	80079ee <USBD_StdEPReq+0x28>
 80079dc:	2c40      	cmp	r4, #64	; 0x40
 80079de:	d006      	beq.n	80079ee <USBD_StdEPReq+0x28>
 80079e0:	b1dc      	cbz	r4, 8007a1a <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 80079e2:	f7ff fda1 	bl	8007528 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80079e6:	2400      	movs	r4, #0
}
 80079e8:	4620      	mov	r0, r4
 80079ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079ee:	4639      	mov	r1, r7
 80079f0:	4630      	mov	r0, r6
 80079f2:	f7ff fc85 	bl	8007300 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079f6:	4604      	mov	r4, r0
 80079f8:	2800      	cmp	r0, #0
 80079fa:	f040 80f8 	bne.w	8007bee <USBD_StdEPReq+0x228>
        pdev->classId = idx;
 80079fe:	f8c6 02d4 	str.w	r0, [r6, #724]	; 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8007a02:	f100 03ae 	add.w	r3, r0, #174	; 0xae
 8007a06:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0eb      	beq.n	80079e8 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a10:	4629      	mov	r1, r5
 8007a12:	4630      	mov	r0, r6
 8007a14:	4798      	blx	r3
 8007a16:	4604      	mov	r4, r0
 8007a18:	e7e6      	b.n	80079e8 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 8007a1a:	f891 8001 	ldrb.w	r8, [r1, #1]
 8007a1e:	f1b8 0f01 	cmp.w	r8, #1
 8007a22:	d031      	beq.n	8007a88 <USBD_StdEPReq+0xc2>
 8007a24:	f1b8 0f03 	cmp.w	r8, #3
 8007a28:	d005      	beq.n	8007a36 <USBD_StdEPReq+0x70>
 8007a2a:	f1b8 0f00 	cmp.w	r8, #0
 8007a2e:	d067      	beq.n	8007b00 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8007a30:	f7ff fd7a 	bl	8007528 <USBD_CtlError>
          break;
 8007a34:	e7d8      	b.n	80079e8 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 8007a36:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d004      	beq.n	8007a4a <USBD_StdEPReq+0x84>
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d012      	beq.n	8007a6a <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 8007a44:	f7ff fd70 	bl	8007528 <USBD_CtlError>
              break;
 8007a48:	e7ce      	b.n	80079e8 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a4a:	b10f      	cbz	r7, 8007a50 <USBD_StdEPReq+0x8a>
 8007a4c:	2f80      	cmp	r7, #128	; 0x80
 8007a4e:	d104      	bne.n	8007a5a <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 8007a50:	4629      	mov	r1, r5
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7ff fd68 	bl	8007528 <USBD_CtlError>
 8007a58:	e7c6      	b.n	80079e8 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	f003 fd8a 	bl	800b574 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a60:	2180      	movs	r1, #128	; 0x80
 8007a62:	4630      	mov	r0, r6
 8007a64:	f003 fd86 	bl	800b574 <USBD_LL_StallEP>
 8007a68:	e7be      	b.n	80079e8 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a6a:	884b      	ldrh	r3, [r1, #2]
 8007a6c:	b923      	cbnz	r3, 8007a78 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a6e:	b11f      	cbz	r7, 8007a78 <USBD_StdEPReq+0xb2>
 8007a70:	2f80      	cmp	r7, #128	; 0x80
 8007a72:	d001      	beq.n	8007a78 <USBD_StdEPReq+0xb2>
 8007a74:	88cb      	ldrh	r3, [r1, #6]
 8007a76:	b11b      	cbz	r3, 8007a80 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f000 f905 	bl	8007c88 <USBD_CtlSendStatus>
              break;
 8007a7e:	e7b3      	b.n	80079e8 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a80:	4639      	mov	r1, r7
 8007a82:	f003 fd77 	bl	800b574 <USBD_LL_StallEP>
 8007a86:	e7f7      	b.n	8007a78 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 8007a88:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d004      	beq.n	8007a9c <USBD_StdEPReq+0xd6>
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d012      	beq.n	8007abc <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 8007a96:	f7ff fd47 	bl	8007528 <USBD_CtlError>
              break;
 8007a9a:	e7a5      	b.n	80079e8 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a9c:	b10f      	cbz	r7, 8007aa2 <USBD_StdEPReq+0xdc>
 8007a9e:	2f80      	cmp	r7, #128	; 0x80
 8007aa0:	d104      	bne.n	8007aac <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f7ff fd3f 	bl	8007528 <USBD_CtlError>
 8007aaa:	e79d      	b.n	80079e8 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007aac:	4639      	mov	r1, r7
 8007aae:	f003 fd61 	bl	800b574 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ab2:	2180      	movs	r1, #128	; 0x80
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f003 fd5d 	bl	800b574 <USBD_LL_StallEP>
 8007aba:	e795      	b.n	80079e8 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007abc:	884b      	ldrh	r3, [r1, #2]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d192      	bne.n	80079e8 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ac2:	f017 0f7f 	tst.w	r7, #127	; 0x7f
 8007ac6:	d117      	bne.n	8007af8 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f000 f8dd 	bl	8007c88 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ace:	4639      	mov	r1, r7
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f7ff fc15 	bl	8007300 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d186      	bne.n	80079e8 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 8007ada:	f8c6 02d4 	str.w	r0, [r6, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ade:	f100 02ae 	add.w	r2, r0, #174	; 0xae
 8007ae2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8007ae6:	6892      	ldr	r2, [r2, #8]
 8007ae8:	2a00      	cmp	r2, #0
 8007aea:	f000 8082 	beq.w	8007bf2 <USBD_StdEPReq+0x22c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007aee:	4629      	mov	r1, r5
 8007af0:	4630      	mov	r0, r6
 8007af2:	4790      	blx	r2
 8007af4:	4604      	mov	r4, r0
 8007af6:	e777      	b.n	80079e8 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007af8:	4639      	mov	r1, r7
 8007afa:	f003 fd43 	bl	800b584 <USBD_LL_ClearStallEP>
 8007afe:	e7e3      	b.n	8007ac8 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8007b00:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	2a02      	cmp	r2, #2
 8007b08:	d005      	beq.n	8007b16 <USBD_StdEPReq+0x150>
 8007b0a:	2a03      	cmp	r2, #3
 8007b0c:	d027      	beq.n	8007b5e <USBD_StdEPReq+0x198>
              USBD_CtlError(pdev, req);
 8007b0e:	f7ff fd0b 	bl	8007528 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007b12:	4644      	mov	r4, r8
              break;
 8007b14:	e768      	b.n	80079e8 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b16:	b10f      	cbz	r7, 8007b1c <USBD_StdEPReq+0x156>
 8007b18:	2f80      	cmp	r7, #128	; 0x80
 8007b1a:	d113      	bne.n	8007b44 <USBD_StdEPReq+0x17e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b20:	d114      	bne.n	8007b4c <USBD_StdEPReq+0x186>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b22:	f007 077f 	and.w	r7, r7, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b26:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8007b2a:	00b9      	lsls	r1, r7, #2
 8007b2c:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8007b30:	4431      	add	r1, r6
 8007b32:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b38:	2202      	movs	r2, #2
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f000 f878 	bl	8007c30 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007b40:	4644      	mov	r4, r8
              break;
 8007b42:	e751      	b.n	80079e8 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 8007b44:	f7ff fcf0 	bl	8007528 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007b48:	4644      	mov	r4, r8
                break;
 8007b4a:	e74d      	b.n	80079e8 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b4c:	f007 077f 	and.w	r7, r7, #127	; 0x7f
 8007b50:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8007b54:	00b9      	lsls	r1, r7, #2
 8007b56:	3110      	adds	r1, #16
 8007b58:	4431      	add	r1, r6
 8007b5a:	3104      	adds	r1, #4
 8007b5c:	e7ea      	b.n	8007b34 <USBD_StdEPReq+0x16e>
              if ((ep_addr & 0x80U) == 0x80U)
 8007b5e:	b25b      	sxtb	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	db1f      	blt.n	8007ba4 <USBD_StdEPReq+0x1de>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b64:	f007 020f 	and.w	r2, r7, #15
 8007b68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007b6c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007b70:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8007b74:	b31a      	cbz	r2, 8007bbe <USBD_StdEPReq+0x1f8>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	db25      	blt.n	8007bc6 <USBD_StdEPReq+0x200>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b7a:	f007 037f 	and.w	r3, r7, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007b82:	009c      	lsls	r4, r3, #2
 8007b84:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8007b88:	4434      	add	r4, r6
 8007b8a:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b8c:	b10f      	cbz	r7, 8007b92 <USBD_StdEPReq+0x1cc>
 8007b8e:	2f80      	cmp	r7, #128	; 0x80
 8007b90:	d122      	bne.n	8007bd8 <USBD_StdEPReq+0x212>
                pep->status = 0x0000U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b96:	2202      	movs	r2, #2
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f000 f848 	bl	8007c30 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007ba0:	4644      	mov	r4, r8
              break;
 8007ba2:	e721      	b.n	80079e8 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ba4:	f007 020f 	and.w	r2, r7, #15
 8007ba8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007bac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007bb0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007bb2:	2a00      	cmp	r2, #0
 8007bb4:	d1df      	bne.n	8007b76 <USBD_StdEPReq+0x1b0>
                  USBD_CtlError(pdev, req);
 8007bb6:	f7ff fcb7 	bl	8007528 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007bba:	4644      	mov	r4, r8
                  break;
 8007bbc:	e714      	b.n	80079e8 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8007bbe:	f7ff fcb3 	bl	8007528 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8007bc2:	4644      	mov	r4, r8
                  break;
 8007bc4:	e710      	b.n	80079e8 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bc6:	f007 037f 	and.w	r3, r7, #127	; 0x7f
 8007bca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007bce:	009c      	lsls	r4, r3, #2
 8007bd0:	3410      	adds	r4, #16
 8007bd2:	4434      	add	r4, r6
 8007bd4:	3404      	adds	r4, #4
 8007bd6:	e7d9      	b.n	8007b8c <USBD_StdEPReq+0x1c6>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007bd8:	4639      	mov	r1, r7
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f003 fc50 	bl	800b480 <USBD_LL_IsStallEP>
 8007be0:	b110      	cbz	r0, 8007be8 <USBD_StdEPReq+0x222>
                pep->status = 0x0001U;
 8007be2:	2301      	movs	r3, #1
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	e7d6      	b.n	8007b96 <USBD_StdEPReq+0x1d0>
                pep->status = 0x0000U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	6023      	str	r3, [r4, #0]
 8007bec:	e7d3      	b.n	8007b96 <USBD_StdEPReq+0x1d0>
  USBD_StatusTypeDef ret = USBD_OK;
 8007bee:	2400      	movs	r4, #0
 8007bf0:	e6fa      	b.n	80079e8 <USBD_StdEPReq+0x22>
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	e6f8      	b.n	80079e8 <USBD_StdEPReq+0x22>

08007bf6 <USBD_GetString>:
  if (desc == NULL)
 8007bf6:	b1d0      	cbz	r0, 8007c2e <USBD_GetString+0x38>
{
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	4616      	mov	r6, r2
 8007bfe:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c00:	f7ff fc74 	bl	80074ec <USBD_GetLen>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8007c0c:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	706b      	strb	r3, [r5, #1]
  idx++;
 8007c12:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8007c14:	e007      	b.n	8007c26 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 8007c16:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8007c18:	3401      	adds	r4, #1
    idx++;
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8007c1e:	2100      	movs	r1, #0
 8007c20:	54a9      	strb	r1, [r5, r2]
    idx++;
 8007c22:	3302      	adds	r3, #2
 8007c24:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8007c26:	7822      	ldrb	r2, [r4, #0]
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	d1f4      	bne.n	8007c16 <USBD_GetString+0x20>
}
 8007c2c:	bd70      	pop	{r4, r5, r6, pc}
 8007c2e:	4770      	bx	lr

08007c30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c30:	b508      	push	{r3, lr}
 8007c32:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c34:	2202      	movs	r2, #2
 8007c36:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c3a:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c3c:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c3e:	460a      	mov	r2, r1
 8007c40:	2100      	movs	r1, #0
 8007c42:	f003 fcaf 	bl	800b5a4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007c46:	2000      	movs	r0, #0
 8007c48:	bd08      	pop	{r3, pc}

08007c4a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c4a:	b508      	push	{r3, lr}
 8007c4c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c4e:	460a      	mov	r2, r1
 8007c50:	2100      	movs	r1, #0
 8007c52:	f003 fca7 	bl	800b5a4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007c56:	2000      	movs	r0, #0
 8007c58:	bd08      	pop	{r3, pc}

08007c5a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c5a:	b508      	push	{r3, lr}
 8007c5c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c5e:	2203      	movs	r2, #3
 8007c60:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c64:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c68:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c6c:	460a      	mov	r2, r1
 8007c6e:	2100      	movs	r1, #0
 8007c70:	f003 fca0 	bl	800b5b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007c74:	2000      	movs	r0, #0
 8007c76:	bd08      	pop	{r3, pc}

08007c78 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c78:	b508      	push	{r3, lr}
 8007c7a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c7c:	460a      	mov	r2, r1
 8007c7e:	2100      	movs	r1, #0
 8007c80:	f003 fc98 	bl	800b5b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007c84:	2000      	movs	r0, #0
 8007c86:	bd08      	pop	{r3, pc}

08007c88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c88:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c8a:	2204      	movs	r2, #4
 8007c8c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c90:	2300      	movs	r3, #0
 8007c92:	461a      	mov	r2, r3
 8007c94:	4619      	mov	r1, r3
 8007c96:	f003 fc85 	bl	800b5a4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	bd08      	pop	{r3, pc}

08007c9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c9e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ca0:	2205      	movs	r2, #5
 8007ca2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4619      	mov	r1, r3
 8007cac:	f003 fc82 	bl	800b5b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	bd08      	pop	{r3, pc}

08007cb4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007cb4:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007cb6:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <disk_status+0x14>)
 8007cb8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007cbc:	6852      	ldr	r2, [r2, #4]
 8007cbe:	6852      	ldr	r2, [r2, #4]
 8007cc0:	4403      	add	r3, r0
 8007cc2:	7a18      	ldrb	r0, [r3, #8]
 8007cc4:	4790      	blx	r2
  return stat;
}
 8007cc6:	bd08      	pop	{r3, pc}
 8007cc8:	20004ec0 	.word	0x20004ec0

08007ccc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007ccc:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8007cce:	4b08      	ldr	r3, [pc, #32]	; (8007cf0 <disk_initialize+0x24>)
 8007cd0:	5c1b      	ldrb	r3, [r3, r0]
 8007cd2:	b953      	cbnz	r3, 8007cea <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8007cd4:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <disk_initialize+0x24>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007cda:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007cde:	6852      	ldr	r2, [r2, #4]
 8007ce0:	6812      	ldr	r2, [r2, #0]
 8007ce2:	4403      	add	r3, r0
 8007ce4:	7a18      	ldrb	r0, [r3, #8]
 8007ce6:	4790      	blx	r2
  }
  return stat;
}
 8007ce8:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8007cea:	2000      	movs	r0, #0
 8007cec:	e7fc      	b.n	8007ce8 <disk_initialize+0x1c>
 8007cee:	bf00      	nop
 8007cf0:	20004ec0 	.word	0x20004ec0

08007cf4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007cf4:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007cf6:	4c04      	ldr	r4, [pc, #16]	; (8007d08 <disk_read+0x14>)
 8007cf8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007cfc:	686d      	ldr	r5, [r5, #4]
 8007cfe:	68ad      	ldr	r5, [r5, #8]
 8007d00:	4404      	add	r4, r0
 8007d02:	7a20      	ldrb	r0, [r4, #8]
 8007d04:	47a8      	blx	r5
  return res;
}
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	20004ec0 	.word	0x20004ec0

08007d0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007d0c:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007d0e:	4c04      	ldr	r4, [pc, #16]	; (8007d20 <disk_write+0x14>)
 8007d10:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007d14:	686d      	ldr	r5, [r5, #4]
 8007d16:	68ed      	ldr	r5, [r5, #12]
 8007d18:	4404      	add	r4, r0
 8007d1a:	7a20      	ldrb	r0, [r4, #8]
 8007d1c:	47a8      	blx	r5
  return res;
}
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	20004ec0 	.word	0x20004ec0

08007d24 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007d24:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007d26:	4b04      	ldr	r3, [pc, #16]	; (8007d38 <disk_ioctl+0x14>)
 8007d28:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8007d2c:	6864      	ldr	r4, [r4, #4]
 8007d2e:	6924      	ldr	r4, [r4, #16]
 8007d30:	4403      	add	r3, r0
 8007d32:	7a18      	ldrb	r0, [r3, #8]
 8007d34:	47a0      	blx	r4
  return res;
}
 8007d36:	bd10      	pop	{r4, pc}
 8007d38:	20004ec0 	.word	0x20004ec0

08007d3c <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8007d3c:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8007d3e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8007d40:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8007d44:	4770      	bx	lr

08007d46 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8007d46:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 8007d48:	7882      	ldrb	r2, [r0, #2]
 8007d4a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 8007d4e:	7843      	ldrb	r3, [r0, #1]
 8007d50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8007d54:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8007d56:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8007d5a:	4770      	bx	lr

08007d5c <ld_qword>:
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
	QWORD rv;

	rv = ptr[7];
 8007d5c:	79c3      	ldrb	r3, [r0, #7]
	rv = rv << 8 | ptr[6];
 8007d5e:	7982      	ldrb	r2, [r0, #6]
 8007d60:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[5];
 8007d64:	7943      	ldrb	r3, [r0, #5]
 8007d66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[4];
 8007d6a:	7902      	ldrb	r2, [r0, #4]
 8007d6c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[3];
 8007d70:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007d74:	78c1      	ldrb	r1, [r0, #3]
 8007d76:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	rv = rv << 8 | ptr[2];
 8007d7a:	021b      	lsls	r3, r3, #8
 8007d7c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8007d80:	7882      	ldrb	r2, [r0, #2]
 8007d82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[1];
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007d8c:	7841      	ldrb	r1, [r0, #1]
 8007d8e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8007d96:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8007d9a:	ea43 6111 	orr.w	r1, r3, r1, lsr #24
 8007d9e:	4770      	bx	lr

08007da0 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8007da0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8007da2:	0a09      	lsrs	r1, r1, #8
 8007da4:	7041      	strb	r1, [r0, #1]
}
 8007da6:	4770      	bx	lr

08007da8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8007da8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007daa:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007dae:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8007db0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8007db4:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8007db6:	0e09      	lsrs	r1, r1, #24
 8007db8:	70c1      	strb	r1, [r0, #3]
}
 8007dba:	4770      	bx	lr

08007dbc <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8007dbc:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dbe:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8007dc2:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dc4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8007dc8:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dca:	0e12      	lsrs	r2, r2, #24
 8007dcc:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dce:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dd0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007dd4:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dd6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007dda:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
 8007ddc:	0e1b      	lsrs	r3, r3, #24
 8007dde:	71c3      	strb	r3, [r0, #7]
}
 8007de0:	4770      	bx	lr

08007de2 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8007de2:	4694      	mov	ip, r2
 8007de4:	b132      	cbz	r2, 8007df4 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8007de6:	780a      	ldrb	r2, [r1, #0]
 8007de8:	3101      	adds	r1, #1
 8007dea:	7002      	strb	r2, [r0, #0]
 8007dec:	3001      	adds	r0, #1
		} while (--cnt);
 8007dee:	f1bc 0c01 	subs.w	ip, ip, #1
 8007df2:	d1f8      	bne.n	8007de6 <mem_cpy+0x4>
	}
}
 8007df4:	4770      	bx	lr

08007df6 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8007df6:	7001      	strb	r1, [r0, #0]
 8007df8:	3001      	adds	r0, #1
	} while (--cnt);
 8007dfa:	3a01      	subs	r2, #1
 8007dfc:	d1fb      	bne.n	8007df6 <mem_set>
}
 8007dfe:	4770      	bx	lr

08007e00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007e00:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8007e02:	f89c 0000 	ldrb.w	r0, [ip]
 8007e06:	f10c 0c01 	add.w	ip, ip, #1
 8007e0a:	780b      	ldrb	r3, [r1, #0]
 8007e0c:	3101      	adds	r1, #1
 8007e0e:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8007e10:	3a01      	subs	r2, #1
 8007e12:	d001      	beq.n	8007e18 <mem_cmp+0x18>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d0f4      	beq.n	8007e02 <mem_cmp+0x2>

	return r;
}
 8007e18:	4770      	bx	lr

08007e1a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007e1a:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8007e1c:	e000      	b.n	8007e20 <chk_chr+0x6>
 8007e1e:	3301      	adds	r3, #1
 8007e20:	7818      	ldrb	r0, [r3, #0]
 8007e22:	b108      	cbz	r0, 8007e28 <chk_chr+0xe>
 8007e24:	4288      	cmp	r0, r1
 8007e26:	d1fa      	bne.n	8007e1e <chk_chr+0x4>
	return *str;
}
 8007e28:	4770      	bx	lr
	...

08007e2c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e2c:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007e2e:	2400      	movs	r4, #0
 8007e30:	4623      	mov	r3, r4
 8007e32:	b163      	cbz	r3, 8007e4e <chk_lock+0x22>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d024      	beq.n	8007e82 <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007e38:	bb71      	cbnz	r1, 8007e98 <chk_lock+0x6c>
 8007e3a:	4a18      	ldr	r2, [pc, #96]	; (8007e9c <chk_lock+0x70>)
 8007e3c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007e40:	899b      	ldrh	r3, [r3, #12]
 8007e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e46:	d025      	beq.n	8007e94 <chk_lock+0x68>
 8007e48:	2000      	movs	r0, #0
}
 8007e4a:	bc30      	pop	{r4, r5}
 8007e4c:	4770      	bx	lr
		if (Files[i].fs) {	/* Existing entry */
 8007e4e:	011a      	lsls	r2, r3, #4
 8007e50:	4d12      	ldr	r5, [pc, #72]	; (8007e9c <chk_lock+0x70>)
 8007e52:	58aa      	ldr	r2, [r5, r2]
 8007e54:	b19a      	cbz	r2, 8007e7e <chk_lock+0x52>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007e56:	6805      	ldr	r5, [r0, #0]
 8007e58:	42aa      	cmp	r2, r5
 8007e5a:	d001      	beq.n	8007e60 <chk_lock+0x34>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	e7e8      	b.n	8007e32 <chk_lock+0x6>
				Files[i].clu == dp->obj.sclust &&
 8007e60:	4a0e      	ldr	r2, [pc, #56]	; (8007e9c <chk_lock+0x70>)
 8007e62:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007e66:	6855      	ldr	r5, [r2, #4]
 8007e68:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007e6a:	4295      	cmp	r5, r2
 8007e6c:	d1f6      	bne.n	8007e5c <chk_lock+0x30>
				Files[i].ofs == dp->dptr) break;
 8007e6e:	4a0b      	ldr	r2, [pc, #44]	; (8007e9c <chk_lock+0x70>)
 8007e70:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007e74:	6895      	ldr	r5, [r2, #8]
 8007e76:	6b02      	ldr	r2, [r0, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8007e78:	4295      	cmp	r5, r2
 8007e7a:	d1ef      	bne.n	8007e5c <chk_lock+0x30>
 8007e7c:	e7da      	b.n	8007e34 <chk_lock+0x8>
			be = 1;
 8007e7e:	2401      	movs	r4, #1
 8007e80:	e7ec      	b.n	8007e5c <chk_lock+0x30>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007e82:	b92c      	cbnz	r4, 8007e90 <chk_lock+0x64>
 8007e84:	2902      	cmp	r1, #2
 8007e86:	d001      	beq.n	8007e8c <chk_lock+0x60>
 8007e88:	2012      	movs	r0, #18
 8007e8a:	e7de      	b.n	8007e4a <chk_lock+0x1e>
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	e7dc      	b.n	8007e4a <chk_lock+0x1e>
 8007e90:	2000      	movs	r0, #0
 8007e92:	e7da      	b.n	8007e4a <chk_lock+0x1e>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007e94:	2010      	movs	r0, #16
 8007e96:	e7d8      	b.n	8007e4a <chk_lock+0x1e>
 8007e98:	2010      	movs	r0, #16
 8007e9a:	e7d6      	b.n	8007e4a <chk_lock+0x1e>
 8007e9c:	20004cac 	.word	0x20004cac

08007ea0 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	b928      	cbnz	r0, 8007eb0 <enq_lock+0x10>
 8007ea4:	0103      	lsls	r3, r0, #4
 8007ea6:	4a04      	ldr	r2, [pc, #16]	; (8007eb8 <enq_lock+0x18>)
 8007ea8:	58d3      	ldr	r3, [r2, r3]
 8007eaa:	b10b      	cbz	r3, 8007eb0 <enq_lock+0x10>
 8007eac:	3001      	adds	r0, #1
 8007eae:	e7f8      	b.n	8007ea2 <enq_lock+0x2>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8007eb0:	3801      	subs	r0, #1
 8007eb2:	bf18      	it	ne
 8007eb4:	2001      	movne	r0, #1
 8007eb6:	4770      	bx	lr
 8007eb8:	20004cac 	.word	0x20004cac

08007ebc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ebc:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	b1bb      	cbz	r3, 8007ef2 <inc_lock+0x36>
		if (Files[i].fs == dp->obj.fs &&
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d02c      	beq.n	8007f20 <inc_lock+0x64>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007ec6:	b129      	cbz	r1, 8007ed4 <inc_lock+0x18>
 8007ec8:	4a24      	ldr	r2, [pc, #144]	; (8007f5c <inc_lock+0xa0>)
 8007eca:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007ece:	8992      	ldrh	r2, [r2, #12]
 8007ed0:	2a00      	cmp	r2, #0
 8007ed2:	d141      	bne.n	8007f58 <inc_lock+0x9c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007ed4:	2900      	cmp	r1, #0
 8007ed6:	d13a      	bne.n	8007f4e <inc_lock+0x92>
 8007ed8:	4a20      	ldr	r2, [pc, #128]	; (8007f5c <inc_lock+0xa0>)
 8007eda:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007ede:	8991      	ldrh	r1, [r2, #12]
 8007ee0:	3101      	adds	r1, #1
 8007ee2:	b289      	uxth	r1, r1
 8007ee4:	4a1d      	ldr	r2, [pc, #116]	; (8007f5c <inc_lock+0xa0>)
 8007ee6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007eea:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8007eec:	1c58      	adds	r0, r3, #1
}
 8007eee:	bc70      	pop	{r4, r5, r6}
 8007ef0:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 8007ef2:	011a      	lsls	r2, r3, #4
 8007ef4:	4c19      	ldr	r4, [pc, #100]	; (8007f5c <inc_lock+0xa0>)
 8007ef6:	58a4      	ldr	r4, [r4, r2]
 8007ef8:	6802      	ldr	r2, [r0, #0]
 8007efa:	4294      	cmp	r4, r2
 8007efc:	d001      	beq.n	8007f02 <inc_lock+0x46>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007efe:	3301      	adds	r3, #1
 8007f00:	e7de      	b.n	8007ec0 <inc_lock+0x4>
			Files[i].clu == dp->obj.sclust &&
 8007f02:	4a16      	ldr	r2, [pc, #88]	; (8007f5c <inc_lock+0xa0>)
 8007f04:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007f08:	6854      	ldr	r4, [r2, #4]
 8007f0a:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007f0c:	4294      	cmp	r4, r2
 8007f0e:	d1f6      	bne.n	8007efe <inc_lock+0x42>
			Files[i].ofs == dp->dptr) break;
 8007f10:	4a12      	ldr	r2, [pc, #72]	; (8007f5c <inc_lock+0xa0>)
 8007f12:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007f16:	6894      	ldr	r4, [r2, #8]
 8007f18:	6b02      	ldr	r2, [r0, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 8007f1a:	4294      	cmp	r4, r2
 8007f1c:	d1ef      	bne.n	8007efe <inc_lock+0x42>
 8007f1e:	e7d0      	b.n	8007ec2 <inc_lock+0x6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f20:	2300      	movs	r3, #0
 8007f22:	b92b      	cbnz	r3, 8007f30 <inc_lock+0x74>
 8007f24:	011a      	lsls	r2, r3, #4
 8007f26:	4c0d      	ldr	r4, [pc, #52]	; (8007f5c <inc_lock+0xa0>)
 8007f28:	58a2      	ldr	r2, [r4, r2]
 8007f2a:	b10a      	cbz	r2, 8007f30 <inc_lock+0x74>
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	e7f8      	b.n	8007f22 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d00f      	beq.n	8007f54 <inc_lock+0x98>
		Files[i].fs = dp->obj.fs;
 8007f34:	4d09      	ldr	r5, [pc, #36]	; (8007f5c <inc_lock+0xa0>)
 8007f36:	011c      	lsls	r4, r3, #4
 8007f38:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8007f3c:	6806      	ldr	r6, [r0, #0]
 8007f3e:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8007f40:	6884      	ldr	r4, [r0, #8]
 8007f42:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 8007f44:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007f46:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8007f48:	2000      	movs	r0, #0
 8007f4a:	8190      	strh	r0, [r2, #12]
 8007f4c:	e7bb      	b.n	8007ec6 <inc_lock+0xa>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007f52:	e7c7      	b.n	8007ee4 <inc_lock+0x28>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007f54:	2000      	movs	r0, #0
 8007f56:	e7ca      	b.n	8007eee <inc_lock+0x32>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e7c8      	b.n	8007eee <inc_lock+0x32>
 8007f5c:	20004cac 	.word	0x20004cac

08007f60 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007f60:	3801      	subs	r0, #1
 8007f62:	d115      	bne.n	8007f90 <dec_lock+0x30>
		n = Files[i].ctr;
 8007f64:	4b0c      	ldr	r3, [pc, #48]	; (8007f98 <dec_lock+0x38>)
 8007f66:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007f6a:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f70:	d003      	beq.n	8007f7a <dec_lock+0x1a>
		if (n > 0) n--;				/* Decrement read mode open count */
 8007f72:	b11b      	cbz	r3, 8007f7c <dec_lock+0x1c>
 8007f74:	3b01      	subs	r3, #1
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	e000      	b.n	8007f7c <dec_lock+0x1c>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007f7a:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8007f7c:	4a06      	ldr	r2, [pc, #24]	; (8007f98 <dec_lock+0x38>)
 8007f7e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8007f82:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007f84:	b933      	cbnz	r3, 8007f94 <dec_lock+0x34>
 8007f86:	0103      	lsls	r3, r0, #4
 8007f88:	2000      	movs	r0, #0
 8007f8a:	4a03      	ldr	r2, [pc, #12]	; (8007f98 <dec_lock+0x38>)
 8007f8c:	50d0      	str	r0, [r2, r3]
 8007f8e:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007f90:	2002      	movs	r0, #2
 8007f92:	4770      	bx	lr
		res = FR_OK;
 8007f94:	2000      	movs	r0, #0
	}
	return res;
}
 8007f96:	4770      	bx	lr
 8007f98:	20004cac 	.word	0x20004cac

08007f9c <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	b133      	cbz	r3, 8007fae <clear_lock+0x12>
 8007fa0:	4770      	bx	lr
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007fa2:	011a      	lsls	r2, r3, #4
 8007fa4:	490a      	ldr	r1, [pc, #40]	; (8007fd0 <clear_lock+0x34>)
 8007fa6:	588a      	ldr	r2, [r1, r2]
 8007fa8:	4282      	cmp	r2, r0
 8007faa:	d10b      	bne.n	8007fc4 <clear_lock+0x28>
 8007fac:	e007      	b.n	8007fbe <clear_lock+0x22>
 8007fae:	011a      	lsls	r2, r3, #4
 8007fb0:	4907      	ldr	r1, [pc, #28]	; (8007fd0 <clear_lock+0x34>)
 8007fb2:	588a      	ldr	r2, [r1, r2]
 8007fb4:	4282      	cmp	r2, r0
 8007fb6:	d001      	beq.n	8007fbc <clear_lock+0x20>
	for (i = 0; i < _FS_LOCK; i++) {
 8007fb8:	3301      	adds	r3, #1
 8007fba:	e7f0      	b.n	8007f9e <clear_lock+0x2>
{
 8007fbc:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007fbe:	011a      	lsls	r2, r3, #4
 8007fc0:	2400      	movs	r4, #0
 8007fc2:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0eb      	beq.n	8007fa2 <clear_lock+0x6>
	}
}
 8007fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20004cac 	.word	0x20004cac

08007fd4 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8007fd4:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007fd6:	6a03      	ldr	r3, [r0, #32]
 8007fd8:	3b02      	subs	r3, #2
 8007fda:	428b      	cmp	r3, r1
 8007fdc:	d904      	bls.n	8007fe8 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8007fde:	8943      	ldrh	r3, [r0, #10]
 8007fe0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007fe2:	fb01 0003 	mla	r0, r1, r3, r0
 8007fe6:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007fe8:	2000      	movs	r0, #0
}
 8007fea:	4770      	bx	lr

08007fec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff0:	4616      	mov	r6, r2
 8007ff2:	461f      	mov	r7, r3
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007ff4:	f8d0 8000 	ldr.w	r8, [r0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007ff8:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8007ffa:	3404      	adds	r4, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8008002:	462b      	mov	r3, r5
 8008004:	4630      	mov	r0, r6
 8008006:	4639      	mov	r1, r7
 8008008:	f7f8 f95a 	bl	80002c0 <__aeabi_uldivmod>
 800800c:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8008010:	462b      	mov	r3, r5
 8008012:	f7f8 f955 	bl	80002c0 <__aeabi_uldivmod>
 8008016:	4602      	mov	r2, r0
 8008018:	e001      	b.n	800801e <clmt_clust+0x32>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 800801a:	1a12      	subs	r2, r2, r0
 800801c:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800801e:	6820      	ldr	r0, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008020:	b118      	cbz	r0, 800802a <clmt_clust+0x3e>
		if (cl < ncl) break;	/* In this fragment? */
 8008022:	4282      	cmp	r2, r0
 8008024:	d2f9      	bcs.n	800801a <clmt_clust+0x2e>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008026:	6860      	ldr	r0, [r4, #4]
 8008028:	4410      	add	r0, r2
}
 800802a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800802e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800802e:	b570      	push	{r4, r5, r6, lr}
 8008030:	4606      	mov	r6, r0
 8008032:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008034:	f101 001a 	add.w	r0, r1, #26
 8008038:	f7ff fe80 	bl	8007d3c <ld_word>
	if (fs->fs_type == FS_FAT32) {
 800803c:	7833      	ldrb	r3, [r6, #0]
 800803e:	2b03      	cmp	r3, #3
 8008040:	d000      	beq.n	8008044 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8008042:	bd70      	pop	{r4, r5, r6, pc}
 8008044:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008046:	f105 0014 	add.w	r0, r5, #20
 800804a:	f7ff fe77 	bl	8007d3c <ld_word>
 800804e:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8008052:	e7f6      	b.n	8008042 <ld_clust+0x14>

08008054 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	4606      	mov	r6, r0
 8008058:	460c      	mov	r4, r1
 800805a:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800805c:	b291      	uxth	r1, r2
 800805e:	f104 001a 	add.w	r0, r4, #26
 8008062:	f7ff fe9d 	bl	8007da0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008066:	7833      	ldrb	r3, [r6, #0]
 8008068:	2b03      	cmp	r3, #3
 800806a:	d000      	beq.n	800806e <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 800806c:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800806e:	0c29      	lsrs	r1, r5, #16
 8008070:	f104 0014 	add.w	r0, r4, #20
 8008074:	f7ff fe94 	bl	8007da0 <st_word>
}
 8008078:	e7f8      	b.n	800806c <st_clust+0x18>
	...

0800807c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800807c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008080:	4680      	mov	r8, r0
 8008082:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008084:	f101 001a 	add.w	r0, r1, #26
 8008088:	f7ff fe58 	bl	8007d3c <ld_word>
 800808c:	bb50      	cbnz	r0, 80080e4 <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800808e:	7835      	ldrb	r5, [r6, #0]
 8008090:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8008094:	3d01      	subs	r5, #1
 8008096:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800809a:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800809e:	2701      	movs	r7, #1
 80080a0:	2400      	movs	r4, #0
 80080a2:	e004      	b.n	80080ae <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80080a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080a8:	4298      	cmp	r0, r3
 80080aa:	d120      	bne.n	80080ee <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80080ac:	3401      	adds	r4, #1
 80080ae:	2c0c      	cmp	r4, #12
 80080b0:	d80d      	bhi.n	80080ce <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80080b2:	4b12      	ldr	r3, [pc, #72]	; (80080fc <pick_lfn+0x80>)
 80080b4:	5d18      	ldrb	r0, [r3, r4]
 80080b6:	4430      	add	r0, r6
 80080b8:	f7ff fe40 	bl	8007d3c <ld_word>
		if (wc) {
 80080bc:	2f00      	cmp	r7, #0
 80080be:	d0f1      	beq.n	80080a4 <pick_lfn+0x28>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80080c0:	2dfe      	cmp	r5, #254	; 0xfe
 80080c2:	d812      	bhi.n	80080ea <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80080c4:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
 80080c8:	4607      	mov	r7, r0
 80080ca:	3501      	adds	r5, #1
 80080cc:	e7ee      	b.n	80080ac <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80080ce:	7833      	ldrb	r3, [r6, #0]
 80080d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80080d4:	d00d      	beq.n	80080f2 <pick_lfn+0x76>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80080d6:	2dfe      	cmp	r5, #254	; 0xfe
 80080d8:	d80d      	bhi.n	80080f6 <pick_lfn+0x7a>
		lfnbuf[i] = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 80080e0:	2001      	movs	r0, #1
 80080e2:	e000      	b.n	80080e6 <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80080e4:	2000      	movs	r0, #0
}
 80080e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80080ea:	2000      	movs	r0, #0
 80080ec:	e7fb      	b.n	80080e6 <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80080ee:	2000      	movs	r0, #0
 80080f0:	e7f9      	b.n	80080e6 <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
 80080f2:	2001      	movs	r0, #1
 80080f4:	e7f7      	b.n	80080e6 <pick_lfn+0x6a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80080f6:	2000      	movs	r0, #0
 80080f8:	e7f5      	b.n	80080e6 <pick_lfn+0x6a>
 80080fa:	bf00      	nop
 80080fc:	0800c3b4 	.word	0x0800c3b4

08008100 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008104:	4680      	mov	r8, r0
 8008106:	460f      	mov	r7, r1
 8008108:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800810a:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800810c:	230f      	movs	r3, #15
 800810e:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8008110:	2400      	movs	r4, #0
 8008112:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 8008114:	4621      	mov	r1, r4
 8008116:	f107 001a 	add.w	r0, r7, #26
 800811a:	f7ff fe41 	bl	8007da0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800811e:	f109 36ff 	add.w	r6, r9, #4294967295
 8008122:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8008126:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 800812a:	4625      	mov	r5, r4
 800812c:	e002      	b.n	8008134 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800812e:	3401      	adds	r4, #1
 8008130:	2c0c      	cmp	r4, #12
 8008132:	d811      	bhi.n	8008158 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008138:	429d      	cmp	r5, r3
 800813a:	d002      	beq.n	8008142 <put_lfn+0x42>
 800813c:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8008140:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008142:	4b0c      	ldr	r3, [pc, #48]	; (8008174 <put_lfn+0x74>)
 8008144:	5d18      	ldrb	r0, [r3, r4]
 8008146:	4629      	mov	r1, r5
 8008148:	4438      	add	r0, r7
 800814a:	f7ff fe29 	bl	8007da0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800814e:	2d00      	cmp	r5, #0
 8008150:	d1ed      	bne.n	800812e <put_lfn+0x2e>
 8008152:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8008156:	e7ea      	b.n	800812e <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800815c:	429d      	cmp	r5, r3
 800815e:	d002      	beq.n	8008166 <put_lfn+0x66>
 8008160:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8008164:	b90b      	cbnz	r3, 800816a <put_lfn+0x6a>
 8008166:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800816a:	f887 9000 	strb.w	r9, [r7]
}
 800816e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008172:	bf00      	nop
 8008174:	0800c3b4 	.word	0x0800c3b4

08008178 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	4605      	mov	r5, r0
 800817e:	4616      	mov	r6, r2
 8008180:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008182:	220b      	movs	r2, #11
 8008184:	f7ff fe2d 	bl	8007de2 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008188:	2c05      	cmp	r4, #5
 800818a:	d811      	bhi.n	80081b0 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 800818c:	2307      	movs	r3, #7
 800818e:	e01f      	b.n	80081d0 <gen_numname+0x58>
 8008190:	3101      	adds	r1, #1
 8008192:	290f      	cmp	r1, #15
 8008194:	d80c      	bhi.n	80081b0 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 8008196:	f003 0c01 	and.w	ip, r3, #1
 800819a:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 800819e:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80081a0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80081a4:	d0f4      	beq.n	8008190 <gen_numname+0x18>
 80081a6:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 80081aa:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 80081ae:	e7ef      	b.n	8008190 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 80081b0:	8833      	ldrh	r3, [r6, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0ea      	beq.n	800818c <gen_numname+0x14>
			wc = *lfn++;
 80081b6:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 80081b8:	2100      	movs	r1, #0
 80081ba:	e7ea      	b.n	8008192 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 80081bc:	1e5a      	subs	r2, r3, #1
 80081be:	3308      	adds	r3, #8
 80081c0:	446b      	add	r3, sp
 80081c2:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 80081c6:	0921      	lsrs	r1, r4, #4
	} while (seq);
 80081c8:	2c0f      	cmp	r4, #15
 80081ca:	d90a      	bls.n	80081e2 <gen_numname+0x6a>
		ns[i--] = c;
 80081cc:	4613      	mov	r3, r2
		seq /= 16;
 80081ce:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 80081d0:	f004 020f 	and.w	r2, r4, #15
 80081d4:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 80081d8:	2939      	cmp	r1, #57	; 0x39
 80081da:	d9ef      	bls.n	80081bc <gen_numname+0x44>
 80081dc:	f102 0137 	add.w	r1, r2, #55	; 0x37
 80081e0:	e7ec      	b.n	80081bc <gen_numname+0x44>
	ns[i] = '~';
 80081e2:	217e      	movs	r1, #126	; 0x7e
 80081e4:	f102 0308 	add.w	r3, r2, #8
 80081e8:	446b      	add	r3, sp
 80081ea:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80081ee:	2300      	movs	r3, #0
 80081f0:	e000      	b.n	80081f4 <gen_numname+0x7c>
 80081f2:	3301      	adds	r3, #1
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d209      	bcs.n	800820c <gen_numname+0x94>
 80081f8:	5ce9      	ldrb	r1, [r5, r3]
 80081fa:	2920      	cmp	r1, #32
 80081fc:	d1f9      	bne.n	80081f2 <gen_numname+0x7a>
 80081fe:	e005      	b.n	800820c <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008200:	2020      	movs	r0, #32
 8008202:	1c59      	adds	r1, r3, #1
 8008204:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 8008206:	2907      	cmp	r1, #7
 8008208:	d809      	bhi.n	800821e <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800820a:	460b      	mov	r3, r1
 800820c:	2a07      	cmp	r2, #7
 800820e:	d8f7      	bhi.n	8008200 <gen_numname+0x88>
 8008210:	f102 0108 	add.w	r1, r2, #8
 8008214:	4469      	add	r1, sp
 8008216:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 800821a:	3201      	adds	r2, #1
 800821c:	e7f1      	b.n	8008202 <gen_numname+0x8a>
}
 800821e:	b002      	add	sp, #8
 8008220:	bd70      	pop	{r4, r5, r6, pc}

08008222 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008222:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8008224:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 8008228:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800822a:	01c3      	lsls	r3, r0, #7
 800822c:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8008230:	780a      	ldrb	r2, [r1, #0]
 8008232:	3101      	adds	r1, #1
 8008234:	fa52 f383 	uxtab	r3, r2, r3
 8008238:	b2d8      	uxtb	r0, r3
	} while (--n);
 800823a:	f1bc 0c01 	subs.w	ip, ip, #1
 800823e:	d1f4      	bne.n	800822a <sum_sfn+0x8>
	return sum;
}
 8008240:	4770      	bx	lr

08008242 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8008242:	b500      	push	{lr}
 8008244:	4686      	mov	lr, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8008246:	7841      	ldrb	r1, [r0, #1]
 8008248:	3101      	adds	r1, #1
 800824a:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
 800824c:	2000      	movs	r0, #0
 800824e:	4603      	mov	r3, r0
 8008250:	e001      	b.n	8008256 <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip sum field */
			i++;
 8008252:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
 8008254:	3301      	adds	r3, #1
 8008256:	428b      	cmp	r3, r1
 8008258:	d20a      	bcs.n	8008270 <xdir_sum+0x2e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800825a:	2b02      	cmp	r3, #2
 800825c:	d0f9      	beq.n	8008252 <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800825e:	0842      	lsrs	r2, r0, #1
 8008260:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
 8008264:	f81e c003 	ldrb.w	ip, [lr, r3]
 8008268:	fa1c f282 	uxtah	r2, ip, r2
 800826c:	b290      	uxth	r0, r2
 800826e:	e7f1      	b.n	8008254 <xdir_sum+0x12>
		}
	}
	return sum;
}
 8008270:	f85d fb04 	ldr.w	pc, [sp], #4

08008274 <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8008274:	6803      	ldr	r3, [r0, #0]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	6002      	str	r2, [r0, #0]
 800827a:	7818      	ldrb	r0, [r3, #0]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800827c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008280:	b29b      	uxth	r3, r3
 8008282:	2b19      	cmp	r3, #25
 8008284:	d801      	bhi.n	800828a <get_achar+0x16>
 8008286:	3820      	subs	r0, #32
 8008288:	b280      	uxth	r0, r0
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800828a:	287f      	cmp	r0, #127	; 0x7f
 800828c:	d902      	bls.n	8008294 <get_achar+0x20>
 800828e:	3880      	subs	r0, #128	; 0x80
 8008290:	4b01      	ldr	r3, [pc, #4]	; (8008298 <get_achar+0x24>)
 8008292:	5c18      	ldrb	r0, [r3, r0]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	0800c334 	.word	0x0800c334

0800829c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800829c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	4607      	mov	r7, r0
 80082a4:	9101      	str	r1, [sp, #4]
 80082a6:	4614      	mov	r4, r2
 80082a8:	4698      	mov	r8, r3
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 80082aa:	4626      	mov	r6, r4
 80082ac:	3c01      	subs	r4, #1
 80082ae:	b14e      	cbz	r6, 80082c4 <pattern_matching+0x28>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 80082b0:	a801      	add	r0, sp, #4
 80082b2:	f7ff ffdf 	bl	8008274 <get_achar>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d1f7      	bne.n	80082aa <pattern_matching+0xe>
 80082ba:	2600      	movs	r6, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 80082bc:	4630      	mov	r0, r6
 80082be:	b004      	add	sp, #16
 80082c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 80082c4:	783b      	ldrb	r3, [r7, #0]
 80082c6:	bb1b      	cbnz	r3, 8008310 <pattern_matching+0x74>
 80082c8:	f1b8 0f00 	cmp.w	r8, #0
 80082cc:	d020      	beq.n	8008310 <pattern_matching+0x74>
 80082ce:	2601      	movs	r6, #1
 80082d0:	e7f4      	b.n	80082bc <pattern_matching+0x20>
 80082d2:	4633      	mov	r3, r6
 80082d4:	4632      	mov	r2, r6
 80082d6:	e001      	b.n	80082dc <pattern_matching+0x40>
 80082d8:	4633      	mov	r3, r6
 80082da:	4632      	mov	r2, r6
					if (*pp++ == '?') nm++; else nx = 1;
 80082dc:	9903      	ldr	r1, [sp, #12]
 80082de:	1c48      	adds	r0, r1, #1
 80082e0:	9003      	str	r0, [sp, #12]
 80082e2:	780c      	ldrb	r4, [r1, #0]
 80082e4:	2c3f      	cmp	r4, #63	; 0x3f
 80082e6:	d02a      	beq.n	800833e <pattern_matching+0xa2>
 80082e8:	2301      	movs	r3, #1
				} while (*pp == '?' || *pp == '*');
 80082ea:	7849      	ldrb	r1, [r1, #1]
 80082ec:	293f      	cmp	r1, #63	; 0x3f
 80082ee:	d0f5      	beq.n	80082dc <pattern_matching+0x40>
 80082f0:	292a      	cmp	r1, #42	; 0x2a
 80082f2:	d0f3      	beq.n	80082dc <pattern_matching+0x40>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80082f4:	9902      	ldr	r1, [sp, #8]
 80082f6:	f7ff ffd1 	bl	800829c <pattern_matching>
 80082fa:	bb10      	cbnz	r0, 8008342 <pattern_matching+0xa6>
				nc = *np; break;	/* Branch mismatched */
 80082fc:	9b02      	ldr	r3, [sp, #8]
 80082fe:	781d      	ldrb	r5, [r3, #0]
		get_achar(&nam);			/* nam++ */
 8008300:	a801      	add	r0, sp, #4
 8008302:	f7ff ffb7 	bl	8008274 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8008306:	f1b8 0f00 	cmp.w	r8, #0
 800830a:	d01c      	beq.n	8008346 <pattern_matching+0xaa>
 800830c:	2d00      	cmp	r5, #0
 800830e:	d0d5      	beq.n	80082bc <pattern_matching+0x20>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8008310:	9703      	str	r7, [sp, #12]
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	9302      	str	r3, [sp, #8]
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8008316:	9b03      	ldr	r3, [sp, #12]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b3f      	cmp	r3, #63	; 0x3f
 800831c:	d0dc      	beq.n	80082d8 <pattern_matching+0x3c>
 800831e:	2b2a      	cmp	r3, #42	; 0x2a
 8008320:	d0d7      	beq.n	80082d2 <pattern_matching+0x36>
			pc = get_achar(&pp);	/* Get a pattern char */
 8008322:	a803      	add	r0, sp, #12
 8008324:	f7ff ffa6 	bl	8008274 <get_achar>
 8008328:	4604      	mov	r4, r0
			nc = get_achar(&np);	/* Get a name char */
 800832a:	a802      	add	r0, sp, #8
 800832c:	f7ff ffa2 	bl	8008274 <get_achar>
 8008330:	4605      	mov	r5, r0
			if (pc != nc) break;	/* Branch mismatched? */
 8008332:	4284      	cmp	r4, r0
 8008334:	d1e4      	bne.n	8008300 <pattern_matching+0x64>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8008336:	2c00      	cmp	r4, #0
 8008338:	d1ed      	bne.n	8008316 <pattern_matching+0x7a>
 800833a:	2601      	movs	r6, #1
 800833c:	e7be      	b.n	80082bc <pattern_matching+0x20>
					if (*pp++ == '?') nm++; else nx = 1;
 800833e:	3201      	adds	r2, #1
 8008340:	e7d3      	b.n	80082ea <pattern_matching+0x4e>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8008342:	2601      	movs	r6, #1
 8008344:	e7ba      	b.n	80082bc <pattern_matching+0x20>
	return 0;
 8008346:	4646      	mov	r6, r8
 8008348:	e7b8      	b.n	80082bc <pattern_matching+0x20>

0800834a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800834a:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800834c:	6800      	ldr	r0, [r0, #0]
 800834e:	b138      	cbz	r0, 8008360 <get_ldnumber+0x16>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008350:	4602      	mov	r2, r0
 8008352:	7813      	ldrb	r3, [r2, #0]
 8008354:	2b1f      	cmp	r3, #31
 8008356:	d906      	bls.n	8008366 <get_ldnumber+0x1c>
 8008358:	2b3a      	cmp	r3, #58	; 0x3a
 800835a:	d004      	beq.n	8008366 <get_ldnumber+0x1c>
 800835c:	3201      	adds	r2, #1
 800835e:	e7f8      	b.n	8008352 <get_ldnumber+0x8>
	int vol = -1;
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008366:	2b3a      	cmp	r3, #58	; 0x3a
 8008368:	d001      	beq.n	800836e <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800836a:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800836c:	4770      	bx	lr
{
 800836e:	b410      	push	{r4}
			i = *tp++ - '0';
 8008370:	4603      	mov	r3, r0
 8008372:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008376:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008378:	2809      	cmp	r0, #9
 800837a:	d808      	bhi.n	800838e <get_ldnumber+0x44>
 800837c:	429a      	cmp	r2, r3
 800837e:	d002      	beq.n	8008386 <get_ldnumber+0x3c>
	int vol = -1;
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	e005      	b.n	8008392 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008386:	b938      	cbnz	r0, 8008398 <get_ldnumber+0x4e>
					*path = ++tt;
 8008388:	3201      	adds	r2, #1
 800838a:	600a      	str	r2, [r1, #0]
 800838c:	e001      	b.n	8008392 <get_ldnumber+0x48>
	int vol = -1;
 800838e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008396:	4770      	bx	lr
	int vol = -1;
 8008398:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 800839c:	e7f9      	b.n	8008392 <get_ldnumber+0x48>

0800839e <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800839e:	b538      	push	{r3, r4, r5, lr}
 80083a0:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80083a2:	4604      	mov	r4, r0
 80083a4:	b198      	cbz	r0, 80083ce <validate+0x30>
 80083a6:	6803      	ldr	r3, [r0, #0]
 80083a8:	b19b      	cbz	r3, 80083d2 <validate+0x34>
 80083aa:	781a      	ldrb	r2, [r3, #0]
 80083ac:	b1a2      	cbz	r2, 80083d8 <validate+0x3a>
 80083ae:	8881      	ldrh	r1, [r0, #4]
 80083b0:	88da      	ldrh	r2, [r3, #6]
 80083b2:	4291      	cmp	r1, r2
 80083b4:	d003      	beq.n	80083be <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 80083b6:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80083b8:	2400      	movs	r4, #0
 80083ba:	602c      	str	r4, [r5, #0]
	return res;
}
 80083bc:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80083be:	7858      	ldrb	r0, [r3, #1]
 80083c0:	f7ff fc78 	bl	8007cb4 <disk_status>
 80083c4:	f010 0001 	ands.w	r0, r0, #1
 80083c8:	d109      	bne.n	80083de <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80083ca:	6824      	ldr	r4, [r4, #0]
 80083cc:	e7f5      	b.n	80083ba <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80083ce:	2009      	movs	r0, #9
 80083d0:	e7f3      	b.n	80083ba <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80083d2:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 80083d4:	2009      	movs	r0, #9
 80083d6:	e7f0      	b.n	80083ba <validate+0x1c>
 80083d8:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80083da:	2400      	movs	r4, #0
 80083dc:	e7ed      	b.n	80083ba <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80083de:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80083e0:	2400      	movs	r4, #0
 80083e2:	e7ea      	b.n	80083ba <validate+0x1c>

080083e4 <sync_window>:
{
 80083e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80083e8:	78c5      	ldrb	r5, [r0, #3]
 80083ea:	b915      	cbnz	r5, 80083f2 <sync_window+0xe>
}
 80083ec:	4628      	mov	r0, r5
 80083ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f2:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 80083f4:	6b87      	ldr	r7, [r0, #56]	; 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80083f6:	f100 083c 	add.w	r8, r0, #60	; 0x3c
 80083fa:	2301      	movs	r3, #1
 80083fc:	463a      	mov	r2, r7
 80083fe:	4641      	mov	r1, r8
 8008400:	7840      	ldrb	r0, [r0, #1]
 8008402:	f7ff fc83 	bl	8007d0c <disk_write>
 8008406:	4605      	mov	r5, r0
 8008408:	b9a0      	cbnz	r0, 8008434 <sync_window+0x50>
			fs->wflag = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800840e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008410:	1afb      	subs	r3, r7, r3
 8008412:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008414:	4293      	cmp	r3, r2
 8008416:	d2e9      	bcs.n	80083ec <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008418:	78a6      	ldrb	r6, [r4, #2]
 800841a:	e008      	b.n	800842e <sync_window+0x4a>
					wsect += fs->fsize;
 800841c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800841e:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008420:	2301      	movs	r3, #1
 8008422:	463a      	mov	r2, r7
 8008424:	4641      	mov	r1, r8
 8008426:	7860      	ldrb	r0, [r4, #1]
 8008428:	f7ff fc70 	bl	8007d0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800842c:	3e01      	subs	r6, #1
 800842e:	2e01      	cmp	r6, #1
 8008430:	d8f4      	bhi.n	800841c <sync_window+0x38>
 8008432:	e7db      	b.n	80083ec <sync_window+0x8>
			res = FR_DISK_ERR;
 8008434:	2501      	movs	r5, #1
 8008436:	e7d9      	b.n	80083ec <sync_window+0x8>

08008438 <move_window>:
{
 8008438:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800843a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800843c:	428b      	cmp	r3, r1
 800843e:	d102      	bne.n	8008446 <move_window+0xe>
	FRESULT res = FR_OK;
 8008440:	2600      	movs	r6, #0
}
 8008442:	4630      	mov	r0, r6
 8008444:	bd70      	pop	{r4, r5, r6, pc}
 8008446:	4604      	mov	r4, r0
 8008448:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800844a:	f7ff ffcb 	bl	80083e4 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800844e:	4606      	mov	r6, r0
 8008450:	2800      	cmp	r0, #0
 8008452:	d1f6      	bne.n	8008442 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008454:	2301      	movs	r3, #1
 8008456:	462a      	mov	r2, r5
 8008458:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800845c:	7860      	ldrb	r0, [r4, #1]
 800845e:	f7ff fc49 	bl	8007cf4 <disk_read>
 8008462:	b110      	cbz	r0, 800846a <move_window+0x32>
				res = FR_DISK_ERR;
 8008464:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008466:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800846a:	63a5      	str	r5, [r4, #56]	; 0x38
 800846c:	e7e9      	b.n	8008442 <move_window+0xa>
	...

08008470 <check_fs>:
{
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008474:	2300      	movs	r3, #0
 8008476:	70c3      	strb	r3, [r0, #3]
 8008478:	f04f 33ff 	mov.w	r3, #4294967295
 800847c:	6383      	str	r3, [r0, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800847e:	f7ff ffdb 	bl	8008438 <move_window>
 8008482:	bb60      	cbnz	r0, 80084de <check_fs+0x6e>
 8008484:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008486:	f204 203a 	addw	r0, r4, #570	; 0x23a
 800848a:	f7ff fc57 	bl	8007d3c <ld_word>
 800848e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008492:	4298      	cmp	r0, r3
 8008494:	d125      	bne.n	80084e2 <check_fs+0x72>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008496:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800849a:	2be9      	cmp	r3, #233	; 0xe9
 800849c:	d00e      	beq.n	80084bc <check_fs+0x4c>
 800849e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80084a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80084a4:	4a11      	ldr	r2, [pc, #68]	; (80084ec <check_fs+0x7c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d008      	beq.n	80084bc <check_fs+0x4c>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 80084aa:	220b      	movs	r2, #11
 80084ac:	4910      	ldr	r1, [pc, #64]	; (80084f0 <check_fs+0x80>)
 80084ae:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80084b2:	f7ff fca5 	bl	8007e00 <mem_cmp>
 80084b6:	b1b8      	cbz	r0, 80084e8 <check_fs+0x78>
	return 2;
 80084b8:	2502      	movs	r5, #2
 80084ba:	e013      	b.n	80084e4 <check_fs+0x74>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80084bc:	f104 0072 	add.w	r0, r4, #114	; 0x72
 80084c0:	f7ff fc41 	bl	8007d46 <ld_dword>
 80084c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80084c8:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <check_fs+0x84>)
 80084ca:	4298      	cmp	r0, r3
 80084cc:	d00a      	beq.n	80084e4 <check_fs+0x74>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80084ce:	f104 008e 	add.w	r0, r4, #142	; 0x8e
 80084d2:	f7ff fc38 	bl	8007d46 <ld_dword>
 80084d6:	4b08      	ldr	r3, [pc, #32]	; (80084f8 <check_fs+0x88>)
 80084d8:	4298      	cmp	r0, r3
 80084da:	d1e6      	bne.n	80084aa <check_fs+0x3a>
 80084dc:	e002      	b.n	80084e4 <check_fs+0x74>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80084de:	2504      	movs	r5, #4
 80084e0:	e000      	b.n	80084e4 <check_fs+0x74>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80084e2:	2503      	movs	r5, #3
}
 80084e4:	4628      	mov	r0, r5
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 80084e8:	2501      	movs	r5, #1
 80084ea:	e7fb      	b.n	80084e4 <check_fs+0x74>
 80084ec:	009000eb 	.word	0x009000eb
 80084f0:	0800c314 	.word	0x0800c314
 80084f4:	00544146 	.word	0x00544146
 80084f8:	33544146 	.word	0x33544146

080084fc <find_volume>:
{
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	b087      	sub	sp, #28
 8008502:	460d      	mov	r5, r1
 8008504:	4616      	mov	r6, r2
	*rfs = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800850a:	f7ff ff1e 	bl	800834a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800850e:	1e07      	subs	r7, r0, #0
 8008510:	f2c0 8219 	blt.w	8008946 <find_volume+0x44a>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008514:	4b95      	ldr	r3, [pc, #596]	; (800876c <find_volume+0x270>)
 8008516:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800851a:	2c00      	cmp	r4, #0
 800851c:	f000 8218 	beq.w	8008950 <find_volume+0x454>
	*rfs = fs;							/* Return pointer to the file system object */
 8008520:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008522:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008526:	7823      	ldrb	r3, [r4, #0]
 8008528:	b173      	cbz	r3, 8008548 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800852a:	7860      	ldrb	r0, [r4, #1]
 800852c:	f7ff fbc2 	bl	8007cb4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008530:	f010 0501 	ands.w	r5, r0, #1
 8008534:	d108      	bne.n	8008548 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008536:	2e00      	cmp	r6, #0
 8008538:	f000 8206 	beq.w	8008948 <find_volume+0x44c>
 800853c:	f010 0f04 	tst.w	r0, #4
 8008540:	f000 8202 	beq.w	8008948 <find_volume+0x44c>
				return FR_WRITE_PROTECTED;
 8008544:	250a      	movs	r5, #10
 8008546:	e1ff      	b.n	8008948 <find_volume+0x44c>
	fs->fs_type = 0;					/* Clear the file system object */
 8008548:	2300      	movs	r3, #0
 800854a:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800854c:	b2f8      	uxtb	r0, r7
 800854e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008550:	f7ff fbbc 	bl	8007ccc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008554:	f010 0f01 	tst.w	r0, #1
 8008558:	f040 81fc 	bne.w	8008954 <find_volume+0x458>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800855c:	b11e      	cbz	r6, 8008566 <find_volume+0x6a>
 800855e:	f010 0f04 	tst.w	r0, #4
 8008562:	f040 81f9 	bne.w	8008958 <find_volume+0x45c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008566:	f104 020c 	add.w	r2, r4, #12
 800856a:	2102      	movs	r1, #2
 800856c:	7860      	ldrb	r0, [r4, #1]
 800856e:	f7ff fbd9 	bl	8007d24 <disk_ioctl>
 8008572:	4605      	mov	r5, r0
 8008574:	2800      	cmp	r0, #0
 8008576:	f040 81f1 	bne.w	800895c <find_volume+0x460>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800857a:	89a2      	ldrh	r2, [r4, #12]
 800857c:	f5a2 7300 	sub.w	r3, r2, #512	; 0x200
 8008580:	b29b      	uxth	r3, r3
 8008582:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008586:	f200 81eb 	bhi.w	8008960 <find_volume+0x464>
 800858a:	1e53      	subs	r3, r2, #1
 800858c:	421a      	tst	r2, r3
 800858e:	d001      	beq.n	8008594 <find_volume+0x98>
 8008590:	2501      	movs	r5, #1
 8008592:	e1d9      	b.n	8008948 <find_volume+0x44c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008594:	2100      	movs	r1, #0
 8008596:	4620      	mov	r0, r4
 8008598:	f7ff ff6a 	bl	8008470 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800859c:	2802      	cmp	r0, #2
 800859e:	f000 80cc 	beq.w	800873a <find_volume+0x23e>
	bsect = 0;
 80085a2:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80085a4:	2804      	cmp	r0, #4
 80085a6:	f000 81dd 	beq.w	8008964 <find_volume+0x468>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80085aa:	2801      	cmp	r0, #1
 80085ac:	f200 81dc 	bhi.w	8008968 <find_volume+0x46c>
	if (fmt == 1) {
 80085b0:	f000 8161 	beq.w	8008876 <find_volume+0x37a>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80085b4:	f104 0047 	add.w	r0, r4, #71	; 0x47
 80085b8:	f7ff fbc0 	bl	8007d3c <ld_word>
 80085bc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 80085c0:	4540      	cmp	r0, r8
 80085c2:	f040 81e7 	bne.w	8008994 <find_volume+0x498>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80085c6:	f104 0052 	add.w	r0, r4, #82	; 0x52
 80085ca:	f7ff fbb7 	bl	8007d3c <ld_word>
 80085ce:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80085d0:	b920      	cbnz	r0, 80085dc <find_volume+0xe0>
 80085d2:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80085d6:	f7ff fbb6 	bl	8007d46 <ld_dword>
 80085da:	4607      	mov	r7, r0
		fs->fsize = fasize;
 80085dc:	6267      	str	r7, [r4, #36]	; 0x24
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80085de:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 80085e2:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80085e4:	1e53      	subs	r3, r2, #1
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	f200 81d5 	bhi.w	8008998 <find_volume+0x49c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80085ee:	fb07 f302 	mul.w	r3, r7, r2
 80085f2:	9300      	str	r3, [sp, #0]
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80085f4:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80085f8:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80085fc:	f1b9 0f00 	cmp.w	r9, #0
 8008600:	f000 81cc 	beq.w	800899c <find_volume+0x4a0>
 8008604:	f109 33ff 	add.w	r3, r9, #4294967295
 8008608:	ea19 0f03 	tst.w	r9, r3
 800860c:	f040 81c8 	bne.w	80089a0 <find_volume+0x4a4>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008610:	f104 004d 	add.w	r0, r4, #77	; 0x4d
 8008614:	f7ff fb92 	bl	8007d3c <ld_word>
 8008618:	4682      	mov	sl, r0
 800861a:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800861c:	ea4f 1b58 	mov.w	fp, r8, lsr #5
 8008620:	fbb0 f3fb 	udiv	r3, r0, fp
 8008624:	fb0b 0313 	mls	r3, fp, r3, r0
 8008628:	b29b      	uxth	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	f040 81ba 	bne.w	80089a4 <find_volume+0x4a8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008630:	f104 004f 	add.w	r0, r4, #79	; 0x4f
 8008634:	f7ff fb82 	bl	8007d3c <ld_word>
 8008638:	9001      	str	r0, [sp, #4]
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800863a:	b920      	cbnz	r0, 8008646 <find_volume+0x14a>
 800863c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008640:	f7ff fb81 	bl	8007d46 <ld_dword>
 8008644:	9001      	str	r0, [sp, #4]
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008646:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 800864a:	f7ff fb77 	bl	8007d3c <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800864e:	4601      	mov	r1, r0
 8008650:	2800      	cmp	r0, #0
 8008652:	f000 81a9 	beq.w	80089a8 <find_volume+0x4ac>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008656:	9b00      	ldr	r3, [sp, #0]
 8008658:	18c3      	adds	r3, r0, r3
 800865a:	fbba fbfb 	udiv	fp, sl, fp
 800865e:	445b      	add	r3, fp
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008660:	9a01      	ldr	r2, [sp, #4]
 8008662:	429a      	cmp	r2, r3
 8008664:	f0c0 81a2 	bcc.w	80089ac <find_volume+0x4b0>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008668:	1ad2      	subs	r2, r2, r3
 800866a:	fbb2 f0f9 	udiv	r0, r2, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800866e:	454a      	cmp	r2, r9
 8008670:	f0c0 819e 	bcc.w	80089b0 <find_volume+0x4b4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008674:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008678:	4290      	cmp	r0, r2
 800867a:	f240 8119 	bls.w	80088b0 <find_volume+0x3b4>
		fmt = FS_FAT32;
 800867e:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008682:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008686:	4290      	cmp	r0, r2
 8008688:	d801      	bhi.n	800868e <find_volume+0x192>
 800868a:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800868e:	f100 0902 	add.w	r9, r0, #2
 8008692:	f8c4 9020 	str.w	r9, [r4, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8008696:	62a6      	str	r6, [r4, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008698:	198a      	adds	r2, r1, r6
 800869a:	62e2      	str	r2, [r4, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800869c:	4433      	add	r3, r6
 800869e:	6363      	str	r3, [r4, #52]	; 0x34
		if (fmt == FS_FAT32) {
 80086a0:	f1bb 0f03 	cmp.w	fp, #3
 80086a4:	f000 8107 	beq.w	80088b6 <find_volume+0x3ba>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80086a8:	f1ba 0f00 	cmp.w	sl, #0
 80086ac:	f000 8186 	beq.w	80089bc <find_volume+0x4c0>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80086b0:	9b00      	ldr	r3, [sp, #0]
 80086b2:	441a      	add	r2, r3
 80086b4:	6322      	str	r2, [r4, #48]	; 0x30
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80086b6:	f1bb 0f02 	cmp.w	fp, #2
 80086ba:	f000 810d 	beq.w	80088d8 <find_volume+0x3dc>
 80086be:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80086c2:	f009 0901 	and.w	r9, r9, #1
 80086c6:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80086ca:	eb08 0309 	add.w	r3, r8, r9
 80086ce:	3b01      	subs	r3, #1
 80086d0:	fbb3 f3f8 	udiv	r3, r3, r8
 80086d4:	42bb      	cmp	r3, r7
 80086d6:	f200 8173 	bhi.w	80089c0 <find_volume+0x4c4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80086da:	f04f 33ff 	mov.w	r3, #4294967295
 80086de:	61e3      	str	r3, [r4, #28]
 80086e0:	61a3      	str	r3, [r4, #24]
		fs->fsi_flag = 0x80;
 80086e2:	2380      	movs	r3, #128	; 0x80
 80086e4:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80086e6:	f1bb 0f03 	cmp.w	fp, #3
 80086ea:	f000 80f8 	beq.w	80088de <find_volume+0x3e2>
	fs->fs_type = fmt;		/* FAT sub-type */
 80086ee:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 80086f2:	4a1f      	ldr	r2, [pc, #124]	; (8008770 <find_volume+0x274>)
 80086f4:	8813      	ldrh	r3, [r2, #0]
 80086f6:	3301      	adds	r3, #1
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	8013      	strh	r3, [r2, #0]
 80086fc:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80086fe:	4b1d      	ldr	r3, [pc, #116]	; (8008774 <find_volume+0x278>)
 8008700:	6123      	str	r3, [r4, #16]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8008702:	4b1d      	ldr	r3, [pc, #116]	; (8008778 <find_volume+0x27c>)
 8008704:	6163      	str	r3, [r4, #20]
	clear_lock(fs);
 8008706:	4620      	mov	r0, r4
 8008708:	f7ff fc48 	bl	8007f9c <clear_lock>
	return FR_OK;
 800870c:	e11c      	b.n	8008948 <find_volume+0x44c>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800870e:	2000      	movs	r0, #0
 8008710:	ab06      	add	r3, sp, #24
 8008712:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8008716:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800871a:	3601      	adds	r6, #1
 800871c:	2e03      	cmp	r6, #3
 800871e:	d80e      	bhi.n	800873e <find_volume+0x242>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008720:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8008724:	0133      	lsls	r3, r6, #4
 8008726:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800872a:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800872c:	7903      	ldrb	r3, [r0, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0ed      	beq.n	800870e <find_volume+0x212>
 8008732:	3008      	adds	r0, #8
 8008734:	f7ff fb07 	bl	8007d46 <ld_dword>
 8008738:	e7ea      	b.n	8008710 <find_volume+0x214>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800873a:	2600      	movs	r6, #0
 800873c:	e7ee      	b.n	800871c <find_volume+0x220>
 800873e:	2700      	movs	r7, #0
 8008740:	e00a      	b.n	8008758 <find_volume+0x25c>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008742:	4631      	mov	r1, r6
 8008744:	4620      	mov	r0, r4
 8008746:	f7ff fe93 	bl	8008470 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800874a:	2801      	cmp	r0, #1
 800874c:	f67f af2a 	bls.w	80085a4 <find_volume+0xa8>
 8008750:	3701      	adds	r7, #1
 8008752:	2f03      	cmp	r7, #3
 8008754:	f63f af26 	bhi.w	80085a4 <find_volume+0xa8>
			bsect = br[i];
 8008758:	ab06      	add	r3, sp, #24
 800875a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800875e:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008762:	2e00      	cmp	r6, #0
 8008764:	d1ed      	bne.n	8008742 <find_volume+0x246>
 8008766:	2003      	movs	r0, #3
 8008768:	e7f2      	b.n	8008750 <find_volume+0x254>
 800876a:	bf00      	nop
 800876c:	20004ca8 	.word	0x20004ca8
 8008770:	20004cbc 	.word	0x20004cbc
 8008774:	20004cc0 	.word	0x20004cc0
 8008778:	20004a48 	.word	0x20004a48
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800877c:	3301      	adds	r3, #1
 800877e:	2b3f      	cmp	r3, #63	; 0x3f
 8008780:	d804      	bhi.n	800878c <find_volume+0x290>
 8008782:	18e2      	adds	r2, r4, r3
 8008784:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8008788:	2a00      	cmp	r2, #0
 800878a:	d0f7      	beq.n	800877c <find_volume+0x280>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800878c:	2b3f      	cmp	r3, #63	; 0x3f
 800878e:	f240 80ed 	bls.w	800896c <find_volume+0x470>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8008792:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8008796:	f7ff fad1 	bl	8007d3c <ld_word>
 800879a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800879e:	f040 80e7 	bne.w	8008970 <find_volume+0x474>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80087a2:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
 80087a6:	2301      	movs	r3, #1
 80087a8:	4093      	lsls	r3, r2
 80087aa:	89a2      	ldrh	r2, [r4, #12]
 80087ac:	4293      	cmp	r3, r2
 80087ae:	f040 80e1 	bne.w	8008974 <find_volume+0x478>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80087b2:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80087b6:	f7ff fad1 	bl	8007d5c <ld_qword>
 80087ba:	1987      	adds	r7, r0, r6
 80087bc:	f141 0800 	adc.w	r8, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80087c0:	f04f 33ff 	mov.w	r3, #4294967295
 80087c4:	42bb      	cmp	r3, r7
 80087c6:	f04f 0300 	mov.w	r3, #0
 80087ca:	eb73 0308 	sbcs.w	r3, r3, r8
 80087ce:	f0c0 80d3 	bcc.w	8008978 <find_volume+0x47c>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80087d2:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80087d6:	f7ff fab6 	bl	8007d46 <ld_dword>
 80087da:	6260      	str	r0, [r4, #36]	; 0x24
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80087dc:	f894 a0aa 	ldrb.w	sl, [r4, #170]	; 0xaa
 80087e0:	f884 a002 	strb.w	sl, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80087e4:	f1ba 0f01 	cmp.w	sl, #1
 80087e8:	f040 80c8 	bne.w	800897c <find_volume+0x480>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80087ec:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 80087f0:	f04f 0901 	mov.w	r9, #1
 80087f4:	fa09 f903 	lsl.w	r9, r9, r3
 80087f8:	fa1f f989 	uxth.w	r9, r9
 80087fc:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8008800:	f1b9 0f00 	cmp.w	r9, #0
 8008804:	f000 80bc 	beq.w	8008980 <find_volume+0x484>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8008808:	f104 0098 	add.w	r0, r4, #152	; 0x98
 800880c:	f7ff fa9b 	bl	8007d46 <ld_dword>
 8008810:	4683      	mov	fp, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8008812:	4b6c      	ldr	r3, [pc, #432]	; (80089c4 <find_volume+0x4c8>)
 8008814:	4298      	cmp	r0, r3
 8008816:	f200 80b5 	bhi.w	8008984 <find_volume+0x488>
		fs->n_fatent = nclst + 2;
 800881a:	1c83      	adds	r3, r0, #2
 800881c:	6223      	str	r3, [r4, #32]
		fs->volbase = bsect;
 800881e:	62a6      	str	r6, [r4, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8008820:	f104 0094 	add.w	r0, r4, #148	; 0x94
 8008824:	f7ff fa8f 	bl	8007d46 <ld_dword>
 8008828:	1983      	adds	r3, r0, r6
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	6363      	str	r3, [r4, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800882e:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8008832:	f7ff fa88 	bl	8007d46 <ld_dword>
 8008836:	4430      	add	r0, r6
 8008838:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800883a:	2200      	movs	r2, #0
 800883c:	fb0b f909 	mul.w	r9, fp, r9
 8008840:	9b00      	ldr	r3, [sp, #0]
 8008842:	eb13 0309 	adds.w	r3, r3, r9
 8008846:	4152      	adcs	r2, r2
 8008848:	429f      	cmp	r7, r3
 800884a:	eb78 0202 	sbcs.w	r2, r8, r2
 800884e:	f0c0 809b 	bcc.w	8008988 <find_volume+0x48c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8008852:	f104 009c 	add.w	r0, r4, #156	; 0x9c
 8008856:	f7ff fa76 	bl	8007d46 <ld_dword>
 800885a:	4601      	mov	r1, r0
 800885c:	6320      	str	r0, [r4, #48]	; 0x30
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800885e:	4620      	mov	r0, r4
 8008860:	f7ff fbb8 	bl	8007fd4 <clust2sect>
 8008864:	4601      	mov	r1, r0
 8008866:	4620      	mov	r0, r4
 8008868:	f7ff fde6 	bl	8008438 <move_window>
 800886c:	2800      	cmp	r0, #0
 800886e:	f040 808d 	bne.w	800898c <find_volume+0x490>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8008872:	2600      	movs	r6, #0
 8008874:	e002      	b.n	800887c <find_volume+0x380>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8008876:	230b      	movs	r3, #11
 8008878:	e781      	b.n	800877e <find_volume+0x282>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800887a:	3620      	adds	r6, #32
 800887c:	89a7      	ldrh	r7, [r4, #12]
 800887e:	42b7      	cmp	r7, r6
 8008880:	d90d      	bls.n	800889e <find_volume+0x3a2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8008882:	19a3      	adds	r3, r4, r6
 8008884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008888:	2b81      	cmp	r3, #129	; 0x81
 800888a:	d1f6      	bne.n	800887a <find_volume+0x37e>
 800888c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8008890:	f106 0014 	add.w	r0, r6, #20
 8008894:	4418      	add	r0, r3
 8008896:	f7ff fa56 	bl	8007d46 <ld_dword>
 800889a:	2802      	cmp	r0, #2
 800889c:	d1ed      	bne.n	800887a <find_volume+0x37e>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800889e:	42b7      	cmp	r7, r6
 80088a0:	d076      	beq.n	8008990 <find_volume+0x494>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80088a2:	f04f 33ff 	mov.w	r3, #4294967295
 80088a6:	61e3      	str	r3, [r4, #28]
 80088a8:	61a3      	str	r3, [r4, #24]
		fmt = FS_EXFAT;			/* FAT sub-type */
 80088aa:	f04f 0b04 	mov.w	fp, #4
 80088ae:	e71e      	b.n	80086ee <find_volume+0x1f2>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80088b0:	f04f 0b02 	mov.w	fp, #2
 80088b4:	e6e5      	b.n	8008682 <find_volume+0x186>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80088b6:	f104 0066 	add.w	r0, r4, #102	; 0x66
 80088ba:	f7ff fa3f 	bl	8007d3c <ld_word>
 80088be:	2800      	cmp	r0, #0
 80088c0:	d178      	bne.n	80089b4 <find_volume+0x4b8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80088c2:	f1ba 0f00 	cmp.w	sl, #0
 80088c6:	d177      	bne.n	80089b8 <find_volume+0x4bc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80088c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80088cc:	f7ff fa3b 	bl	8007d46 <ld_dword>
 80088d0:	6320      	str	r0, [r4, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80088d2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80088d6:	e6f8      	b.n	80086ca <find_volume+0x1ce>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80088d8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80088dc:	e6f5      	b.n	80086ca <find_volume+0x1ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80088de:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80088e2:	f7ff fa2b 	bl	8007d3c <ld_word>
 80088e6:	2801      	cmp	r0, #1
 80088e8:	f47f af01 	bne.w	80086ee <find_volume+0x1f2>
			&& move_window(fs, bsect + 1) == FR_OK)
 80088ec:	1c71      	adds	r1, r6, #1
 80088ee:	4620      	mov	r0, r4
 80088f0:	f7ff fda2 	bl	8008438 <move_window>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f47f aefa 	bne.w	80086ee <find_volume+0x1f2>
			fs->fsi_flag = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80088fe:	f204 203a 	addw	r0, r4, #570	; 0x23a
 8008902:	f7ff fa1b 	bl	8007d3c <ld_word>
 8008906:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800890a:	4298      	cmp	r0, r3
 800890c:	f47f aeef 	bne.w	80086ee <find_volume+0x1f2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008910:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8008914:	f7ff fa17 	bl	8007d46 <ld_dword>
 8008918:	4b2b      	ldr	r3, [pc, #172]	; (80089c8 <find_volume+0x4cc>)
 800891a:	4298      	cmp	r0, r3
 800891c:	f47f aee7 	bne.w	80086ee <find_volume+0x1f2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008920:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008924:	f7ff fa0f 	bl	8007d46 <ld_dword>
 8008928:	4b28      	ldr	r3, [pc, #160]	; (80089cc <find_volume+0x4d0>)
 800892a:	4298      	cmp	r0, r3
 800892c:	f47f aedf 	bne.w	80086ee <find_volume+0x1f2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008930:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8008934:	f7ff fa07 	bl	8007d46 <ld_dword>
 8008938:	61e0      	str	r0, [r4, #28]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800893a:	f504 700a 	add.w	r0, r4, #552	; 0x228
 800893e:	f7ff fa02 	bl	8007d46 <ld_dword>
 8008942:	61a0      	str	r0, [r4, #24]
 8008944:	e6d3      	b.n	80086ee <find_volume+0x1f2>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008946:	250b      	movs	r5, #11
}
 8008948:	4628      	mov	r0, r5
 800894a:	b007      	add	sp, #28
 800894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008950:	250c      	movs	r5, #12
 8008952:	e7f9      	b.n	8008948 <find_volume+0x44c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008954:	2503      	movs	r5, #3
 8008956:	e7f7      	b.n	8008948 <find_volume+0x44c>
		return FR_WRITE_PROTECTED;
 8008958:	250a      	movs	r5, #10
 800895a:	e7f5      	b.n	8008948 <find_volume+0x44c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800895c:	2501      	movs	r5, #1
 800895e:	e7f3      	b.n	8008948 <find_volume+0x44c>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008960:	2501      	movs	r5, #1
 8008962:	e7f1      	b.n	8008948 <find_volume+0x44c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008964:	2501      	movs	r5, #1
 8008966:	e7ef      	b.n	8008948 <find_volume+0x44c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008968:	250d      	movs	r5, #13
 800896a:	e7ed      	b.n	8008948 <find_volume+0x44c>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800896c:	250d      	movs	r5, #13
 800896e:	e7eb      	b.n	8008948 <find_volume+0x44c>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8008970:	250d      	movs	r5, #13
 8008972:	e7e9      	b.n	8008948 <find_volume+0x44c>
			return FR_NO_FILESYSTEM;
 8008974:	250d      	movs	r5, #13
 8008976:	e7e7      	b.n	8008948 <find_volume+0x44c>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8008978:	250d      	movs	r5, #13
 800897a:	e7e5      	b.n	8008948 <find_volume+0x44c>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800897c:	250d      	movs	r5, #13
 800897e:	e7e3      	b.n	8008948 <find_volume+0x44c>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8008980:	250d      	movs	r5, #13
 8008982:	e7e1      	b.n	8008948 <find_volume+0x44c>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8008984:	250d      	movs	r5, #13
 8008986:	e7df      	b.n	8008948 <find_volume+0x44c>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8008988:	250d      	movs	r5, #13
 800898a:	e7dd      	b.n	8008948 <find_volume+0x44c>
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800898c:	4655      	mov	r5, sl
 800898e:	e7db      	b.n	8008948 <find_volume+0x44c>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8008990:	250d      	movs	r5, #13
 8008992:	e7d9      	b.n	8008948 <find_volume+0x44c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008994:	250d      	movs	r5, #13
 8008996:	e7d7      	b.n	8008948 <find_volume+0x44c>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008998:	250d      	movs	r5, #13
 800899a:	e7d5      	b.n	8008948 <find_volume+0x44c>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800899c:	250d      	movs	r5, #13
 800899e:	e7d3      	b.n	8008948 <find_volume+0x44c>
 80089a0:	250d      	movs	r5, #13
 80089a2:	e7d1      	b.n	8008948 <find_volume+0x44c>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80089a4:	250d      	movs	r5, #13
 80089a6:	e7cf      	b.n	8008948 <find_volume+0x44c>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80089a8:	250d      	movs	r5, #13
 80089aa:	e7cd      	b.n	8008948 <find_volume+0x44c>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80089ac:	250d      	movs	r5, #13
 80089ae:	e7cb      	b.n	8008948 <find_volume+0x44c>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80089b0:	250d      	movs	r5, #13
 80089b2:	e7c9      	b.n	8008948 <find_volume+0x44c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80089b4:	250d      	movs	r5, #13
 80089b6:	e7c7      	b.n	8008948 <find_volume+0x44c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80089b8:	250d      	movs	r5, #13
 80089ba:	e7c5      	b.n	8008948 <find_volume+0x44c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80089bc:	250d      	movs	r5, #13
 80089be:	e7c3      	b.n	8008948 <find_volume+0x44c>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80089c0:	250d      	movs	r5, #13
 80089c2:	e7c1      	b.n	8008948 <find_volume+0x44c>
 80089c4:	7ffffffd 	.word	0x7ffffffd
 80089c8:	41615252 	.word	0x41615252
 80089cc:	61417272 	.word	0x61417272

080089d0 <find_bitmap>:
{
 80089d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d4:	4605      	mov	r5, r0
 80089d6:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80089d8:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 80089da:	6a03      	ldr	r3, [r0, #32]
 80089dc:	3b02      	subs	r3, #2
 80089de:	42bb      	cmp	r3, r7
 80089e0:	d800      	bhi.n	80089e4 <find_bitmap+0x14>
 80089e2:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
 80089e4:	46b8      	mov	r8, r7
 80089e6:	463c      	mov	r4, r7
 80089e8:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80089ea:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80089ec:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
 80089f0:	89ab      	ldrh	r3, [r5, #12]
 80089f2:	fbba f3f3 	udiv	r3, sl, r3
 80089f6:	4419      	add	r1, r3
 80089f8:	4628      	mov	r0, r5
 80089fa:	f7ff fd1d 	bl	8008438 <move_window>
 80089fe:	4684      	mov	ip, r0
 8008a00:	bb58      	cbnz	r0, 8008a5a <find_bitmap+0x8a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8008a02:	89a8      	ldrh	r0, [r5, #12]
 8008a04:	fbba fef0 	udiv	lr, sl, r0
 8008a08:	fb00 ae1e 	mls	lr, r0, lr, sl
 8008a0c:	f004 0207 	and.w	r2, r4, #7
 8008a10:	2301      	movs	r3, #1
 8008a12:	4093      	lsls	r3, r2
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	e009      	b.n	8008a2c <find_bitmap+0x5c>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8008a18:	46a0      	mov	r8, r4
 8008a1a:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
 8008a1c:	42a7      	cmp	r7, r4
 8008a1e:	d01f      	beq.n	8008a60 <find_bitmap+0x90>
			} while (bm);
 8008a20:	b923      	cbnz	r3, 8008a2c <find_bitmap+0x5c>
		} while (++i < SS(fs));
 8008a22:	f10e 0e01 	add.w	lr, lr, #1
 8008a26:	4570      	cmp	r0, lr
 8008a28:	d9df      	bls.n	80089ea <find_bitmap+0x1a>
			bm = 1;
 8008a2a:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8008a2c:	eb05 020e 	add.w	r2, r5, lr
 8008a30:	f892 103c 	ldrb.w	r1, [r2, #60]	; 0x3c
 8008a34:	4019      	ands	r1, r3
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8008a3a:	3401      	adds	r4, #1
 8008a3c:	6a2a      	ldr	r2, [r5, #32]
 8008a3e:	3a02      	subs	r2, #2
 8008a40:	42a2      	cmp	r2, r4
 8008a42:	d802      	bhi.n	8008a4a <find_bitmap+0x7a>
					val = 0; bm = 0; i = SS(fs);
 8008a44:	4686      	mov	lr, r0
 8008a46:	4663      	mov	r3, ip
 8008a48:	2400      	movs	r4, #0
				if (!bv) {	/* Is it a free cluster? */
 8008a4a:	2900      	cmp	r1, #0
 8008a4c:	d1e4      	bne.n	8008a18 <find_bitmap+0x48>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8008a4e:	3601      	adds	r6, #1
 8008a50:	454e      	cmp	r6, r9
 8008a52:	d1e3      	bne.n	8008a1c <find_bitmap+0x4c>
 8008a54:	f108 0002 	add.w	r0, r8, #2
 8008a58:	e003      	b.n	8008a62 <find_bitmap+0x92>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5e:	e000      	b.n	8008a62 <find_bitmap+0x92>
				if (val == clst) return 0;	/* All cluster scanned? */
 8008a60:	2000      	movs	r0, #0
}
 8008a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008a66 <change_bitmap>:
{
 8008a66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	4617      	mov	r7, r2
 8008a6e:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8008a70:	1e8b      	subs	r3, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8008a72:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008a74:	08de      	lsrs	r6, r3, #3
 8008a76:	8980      	ldrh	r0, [r0, #12]
 8008a78:	fbb6 f2f0 	udiv	r2, r6, r0
 8008a7c:	4411      	add	r1, r2
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8008a7e:	fb00 6612 	mls	r6, r0, r2, r6
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	2401      	movs	r4, #1
 8008a88:	409c      	lsls	r4, r3
 8008a8a:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008a8c:	f101 0901 	add.w	r9, r1, #1
 8008a90:	4628      	mov	r0, r5
 8008a92:	f7ff fcd1 	bl	8008438 <move_window>
 8008a96:	4602      	mov	r2, r0
 8008a98:	b110      	cbz	r0, 8008aa0 <change_bitmap+0x3a>
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	e01e      	b.n	8008adc <change_bitmap+0x76>
			bm = 1;
 8008a9e:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8008aa0:	19ab      	adds	r3, r5, r6
 8008aa2:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8008aa6:	4221      	tst	r1, r4
 8008aa8:	bf14      	ite	ne
 8008aaa:	2301      	movne	r3, #1
 8008aac:	2300      	moveq	r3, #0
 8008aae:	4543      	cmp	r3, r8
 8008ab0:	d013      	beq.n	8008ada <change_bitmap+0x74>
				fs->win[i] ^= bm;	/* Flip the bit */
 8008ab2:	19ab      	adds	r3, r5, r6
 8008ab4:	4061      	eors	r1, r4
 8008ab6:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
				fs->wflag = 1;
 8008aba:	2301      	movs	r3, #1
 8008abc:	70eb      	strb	r3, [r5, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8008abe:	3f01      	subs	r7, #1
 8008ac0:	d00c      	beq.n	8008adc <change_bitmap+0x76>
			} while (bm <<= 1);		/* Next bit */
 8008ac2:	409c      	lsls	r4, r3
 8008ac4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8008ac8:	d1ea      	bne.n	8008aa0 <change_bitmap+0x3a>
		} while (++i < SS(fs));		/* Next byte */
 8008aca:	441e      	add	r6, r3
 8008acc:	89ab      	ldrh	r3, [r5, #12]
			bm = 1;
 8008ace:	2401      	movs	r4, #1
		} while (++i < SS(fs));		/* Next byte */
 8008ad0:	42b3      	cmp	r3, r6
 8008ad2:	d8e4      	bhi.n	8008a9e <change_bitmap+0x38>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008ad4:	4649      	mov	r1, r9
		i = 0;
 8008ad6:	2600      	movs	r6, #0
 8008ad8:	e7d8      	b.n	8008a8c <change_bitmap+0x26>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8008ada:	2202      	movs	r2, #2
}
 8008adc:	4610      	mov	r0, r2
 8008ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008ae2 <put_fat>:
{
 8008ae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008ae6:	2901      	cmp	r1, #1
 8008ae8:	f240 80a3 	bls.w	8008c32 <put_fat+0x150>
 8008aec:	4604      	mov	r4, r0
 8008aee:	460d      	mov	r5, r1
 8008af0:	4616      	mov	r6, r2
 8008af2:	6a03      	ldr	r3, [r0, #32]
 8008af4:	428b      	cmp	r3, r1
 8008af6:	f240 80a0 	bls.w	8008c3a <put_fat+0x158>
		switch (fs->fs_type) {
 8008afa:	7803      	ldrb	r3, [r0, #0]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d07f      	beq.n	8008c00 <put_fat+0x11e>
 8008b00:	d842      	bhi.n	8008b88 <put_fat+0xa6>
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d13e      	bne.n	8008b84 <put_fat+0xa2>
			bc = (UINT)clst; bc += bc / 2;
 8008b06:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b0a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008b0c:	8983      	ldrh	r3, [r0, #12]
 8008b0e:	fbb8 f3f3 	udiv	r3, r8, r3
 8008b12:	4419      	add	r1, r3
 8008b14:	f7ff fc90 	bl	8008438 <move_window>
			if (res != FR_OK) break;
 8008b18:	4607      	mov	r7, r0
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	f040 808a 	bne.w	8008c34 <put_fat+0x152>
			p = fs->win + bc++ % SS(fs);
 8008b20:	f104 0a3c 	add.w	sl, r4, #60	; 0x3c
 8008b24:	f108 0901 	add.w	r9, r8, #1
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	fbb8 f2f3 	udiv	r2, r8, r3
 8008b2e:	fb03 8812 	mls	r8, r3, r2, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008b32:	f015 0501 	ands.w	r5, r5, #1
 8008b36:	d058      	beq.n	8008bea <put_fat+0x108>
 8008b38:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8008b3c:	f003 030f 	and.w	r3, r3, #15
 8008b40:	0132      	lsls	r2, r6, #4
 8008b42:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8008b46:	4313      	orrs	r3, r2
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008b54:	89a3      	ldrh	r3, [r4, #12]
 8008b56:	fbb9 f3f3 	udiv	r3, r9, r3
 8008b5a:	4419      	add	r1, r3
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f7ff fc6b 	bl	8008438 <move_window>
			if (res != FR_OK) break;
 8008b62:	4607      	mov	r7, r0
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d165      	bne.n	8008c34 <put_fat+0x152>
			p = fs->win + bc % SS(fs);
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	fbb9 f2f3 	udiv	r2, r9, r3
 8008b6e:	fb03 9912 	mls	r9, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008b72:	2d00      	cmp	r5, #0
 8008b74:	d03b      	beq.n	8008bee <put_fat+0x10c>
 8008b76:	f3c6 1307 	ubfx	r3, r6, #4, #8
 8008b7a:	f80a 3009 	strb.w	r3, [sl, r9]
			fs->wflag = 1;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	70e3      	strb	r3, [r4, #3]
			break;
 8008b82:	e057      	b.n	8008c34 <put_fat+0x152>
		switch (fs->fs_type) {
 8008b84:	2702      	movs	r7, #2
 8008b86:	e055      	b.n	8008c34 <put_fat+0x152>
 8008b88:	3b03      	subs	r3, #3
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d856      	bhi.n	8008c3e <put_fat+0x15c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008b90:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008b92:	8983      	ldrh	r3, [r0, #12]
 8008b94:	089b      	lsrs	r3, r3, #2
 8008b96:	fbb5 f3f3 	udiv	r3, r5, r3
 8008b9a:	4419      	add	r1, r3
 8008b9c:	f7ff fc4c 	bl	8008438 <move_window>
			if (res != FR_OK) break;
 8008ba0:	4607      	mov	r7, r0
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d146      	bne.n	8008c34 <put_fat+0x152>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8008ba6:	7823      	ldrb	r3, [r4, #0]
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	d00f      	beq.n	8008bcc <put_fat+0xea>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008bac:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8008bb0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8008bb4:	00ab      	lsls	r3, r5, #2
 8008bb6:	89a2      	ldrh	r2, [r4, #12]
 8008bb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bbc:	fb02 3311 	mls	r3, r2, r1, r3
 8008bc0:	4418      	add	r0, r3
 8008bc2:	f7ff f8c0 	bl	8007d46 <ld_dword>
 8008bc6:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8008bca:	4306      	orrs	r6, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008bcc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8008bd0:	00ad      	lsls	r5, r5, #2
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	fbb5 f2f3 	udiv	r2, r5, r3
 8008bd8:	fb03 5512 	mls	r5, r3, r2, r5
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4428      	add	r0, r5
 8008be0:	f7ff f8e2 	bl	8007da8 <st_dword>
			fs->wflag = 1;
 8008be4:	2301      	movs	r3, #1
 8008be6:	70e3      	strb	r3, [r4, #3]
			break;
 8008be8:	e024      	b.n	8008c34 <put_fat+0x152>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008bea:	b2f3      	uxtb	r3, r6
 8008bec:	e7ad      	b.n	8008b4a <put_fat+0x68>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008bee:	f91a 3009 	ldrsb.w	r3, [sl, r9]
 8008bf2:	f023 030f 	bic.w	r3, r3, #15
 8008bf6:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8008bfa:	4333      	orrs	r3, r6
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	e7bc      	b.n	8008b7a <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008c00:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008c02:	8983      	ldrh	r3, [r0, #12]
 8008c04:	085b      	lsrs	r3, r3, #1
 8008c06:	fbb5 f3f3 	udiv	r3, r5, r3
 8008c0a:	4419      	add	r1, r3
 8008c0c:	f7ff fc14 	bl	8008438 <move_window>
			if (res != FR_OK) break;
 8008c10:	4607      	mov	r7, r0
 8008c12:	b978      	cbnz	r0, 8008c34 <put_fat+0x152>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008c14:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8008c18:	006d      	lsls	r5, r5, #1
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	fbb5 f2f3 	udiv	r2, r5, r3
 8008c20:	fb03 5512 	mls	r5, r3, r2, r5
 8008c24:	b2b1      	uxth	r1, r6
 8008c26:	4428      	add	r0, r5
 8008c28:	f7ff f8ba 	bl	8007da0 <st_word>
			fs->wflag = 1;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	70e3      	strb	r3, [r4, #3]
			break;
 8008c30:	e000      	b.n	8008c34 <put_fat+0x152>
	FRESULT res = FR_INT_ERR;
 8008c32:	2702      	movs	r7, #2
}
 8008c34:	4638      	mov	r0, r7
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
 8008c3a:	2702      	movs	r7, #2
 8008c3c:	e7fa      	b.n	8008c34 <put_fat+0x152>
		switch (fs->fs_type) {
 8008c3e:	2702      	movs	r7, #2
 8008c40:	e7f8      	b.n	8008c34 <put_fat+0x152>

08008c42 <fill_last_frag>:
{
 8008c42:	b570      	push	{r4, r5, r6, lr}
 8008c44:	4604      	mov	r4, r0
 8008c46:	460d      	mov	r5, r1
 8008c48:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008c4a:	e007      	b.n	8008c5c <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	f7ff ff48 	bl	8008ae2 <put_fat>
		if (res != FR_OK) return res;
 8008c52:	4603      	mov	r3, r0
 8008c54:	b958      	cbnz	r0, 8008c6e <fill_last_frag+0x2c>
		obj->n_frag--;
 8008c56:	69e3      	ldr	r3, [r4, #28]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008c5c:	69e3      	ldr	r3, [r4, #28]
 8008c5e:	b133      	cbz	r3, 8008c6e <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8008c60:	6820      	ldr	r0, [r4, #0]
 8008c62:	1aea      	subs	r2, r5, r3
 8008c64:	1c51      	adds	r1, r2, #1
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d9f0      	bls.n	8008c4c <fill_last_frag+0xa>
 8008c6a:	3202      	adds	r2, #2
 8008c6c:	e7ef      	b.n	8008c4e <fill_last_frag+0xc>
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	bd70      	pop	{r4, r5, r6, pc}

08008c72 <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8008c72:	79c3      	ldrb	r3, [r0, #7]
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d002      	beq.n	8008c7e <fill_first_frag+0xc>
	return FR_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	4770      	bx	lr
{
 8008c7e:	b570      	push	{r4, r5, r6, lr}
 8008c80:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008c82:	6881      	ldr	r1, [r0, #8]
 8008c84:	6984      	ldr	r4, [r0, #24]
 8008c86:	b14c      	cbz	r4, 8008c9c <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
 8008c88:	1c4d      	adds	r5, r1, #1
 8008c8a:	462a      	mov	r2, r5
 8008c8c:	6830      	ldr	r0, [r6, #0]
 8008c8e:	f7ff ff28 	bl	8008ae2 <put_fat>
			if (res != FR_OK) return res;
 8008c92:	4603      	mov	r3, r0
 8008c94:	b920      	cbnz	r0, 8008ca0 <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008c96:	3c01      	subs	r4, #1
 8008c98:	4629      	mov	r1, r5
 8008c9a:	e7f4      	b.n	8008c86 <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	71f3      	strb	r3, [r6, #7]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}

08008ca4 <get_fat>:
{
 8008ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = obj->fs;
 8008ca8:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008caa:	2901      	cmp	r1, #1
 8008cac:	f240 80b4 	bls.w	8008e18 <get_fat+0x174>
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	6a33      	ldr	r3, [r6, #32]
 8008cb6:	428b      	cmp	r3, r1
 8008cb8:	f240 80b1 	bls.w	8008e1e <get_fat+0x17a>
		switch (fs->fs_type) {
 8008cbc:	7833      	ldrb	r3, [r6, #0]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	f200 80ae 	bhi.w	8008e22 <get_fat+0x17e>
 8008cc6:	e8df f003 	tbb	[pc, r3]
 8008cca:	3502      	.short	0x3502
 8008ccc:	654c      	.short	0x654c
			bc = (UINT)clst; bc += bc / 2;
 8008cce:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cd2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8008cd4:	89b3      	ldrh	r3, [r6, #12]
 8008cd6:	fbb5 f3f3 	udiv	r3, r5, r3
 8008cda:	4419      	add	r1, r3
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f7ff fbab 	bl	8008438 <move_window>
 8008ce2:	b110      	cbz	r0, 8008cea <get_fat+0x46>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce8:	e097      	b.n	8008e1a <get_fat+0x176>
			wc = fs->win[bc++ % SS(fs)];
 8008cea:	1c6f      	adds	r7, r5, #1
 8008cec:	89b3      	ldrh	r3, [r6, #12]
 8008cee:	fbb5 f2f3 	udiv	r2, r5, r3
 8008cf2:	fb03 5512 	mls	r5, r3, r2, r5
 8008cf6:	4435      	add	r5, r6
 8008cf8:	f895 503c 	ldrb.w	r5, [r5, #60]	; 0x3c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cfc:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8008cfe:	fbb7 f3f3 	udiv	r3, r7, r3
 8008d02:	4419      	add	r1, r3
 8008d04:	4630      	mov	r0, r6
 8008d06:	f7ff fb97 	bl	8008438 <move_window>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	f040 808b 	bne.w	8008e26 <get_fat+0x182>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008d10:	89b3      	ldrh	r3, [r6, #12]
 8008d12:	fbb7 f2f3 	udiv	r2, r7, r3
 8008d16:	fb03 7712 	mls	r7, r3, r2, r7
 8008d1a:	4437      	add	r7, r6
 8008d1c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008d20:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008d24:	f014 0f01 	tst.w	r4, #1
 8008d28:	d001      	beq.n	8008d2e <get_fat+0x8a>
 8008d2a:	0928      	lsrs	r0, r5, #4
 8008d2c:	e075      	b.n	8008e1a <get_fat+0x176>
 8008d2e:	f3c5 000b 	ubfx	r0, r5, #0, #12
 8008d32:	e072      	b.n	8008e1a <get_fat+0x176>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d34:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8008d36:	89b3      	ldrh	r3, [r6, #12]
 8008d38:	085b      	lsrs	r3, r3, #1
 8008d3a:	fbb4 f3f3 	udiv	r3, r4, r3
 8008d3e:	4419      	add	r1, r3
 8008d40:	4630      	mov	r0, r6
 8008d42:	f7ff fb79 	bl	8008438 <move_window>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d170      	bne.n	8008e2c <get_fat+0x188>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008d4a:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 8008d4e:	0064      	lsls	r4, r4, #1
 8008d50:	89b3      	ldrh	r3, [r6, #12]
 8008d52:	fbb4 f2f3 	udiv	r2, r4, r3
 8008d56:	fb03 4412 	mls	r4, r3, r2, r4
 8008d5a:	4420      	add	r0, r4
 8008d5c:	f7fe ffee 	bl	8007d3c <ld_word>
			break;
 8008d60:	e05b      	b.n	8008e1a <get_fat+0x176>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d62:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8008d64:	89b3      	ldrh	r3, [r6, #12]
 8008d66:	089b      	lsrs	r3, r3, #2
 8008d68:	fbb4 f3f3 	udiv	r3, r4, r3
 8008d6c:	4419      	add	r1, r3
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f7ff fb62 	bl	8008438 <move_window>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d15c      	bne.n	8008e32 <get_fat+0x18e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008d78:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 8008d7c:	00a4      	lsls	r4, r4, #2
 8008d7e:	89b3      	ldrh	r3, [r6, #12]
 8008d80:	fbb4 f2f3 	udiv	r2, r4, r3
 8008d84:	fb03 4412 	mls	r4, r3, r2, r4
 8008d88:	4420      	add	r0, r4
 8008d8a:	f7fe ffdc 	bl	8007d46 <ld_dword>
 8008d8e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8008d92:	e042      	b.n	8008e1a <get_fat+0x176>
			if (obj->objsize) {
 8008d94:	6900      	ldr	r0, [r0, #16]
 8008d96:	6969      	ldr	r1, [r5, #20]
 8008d98:	ea50 0301 	orrs.w	r3, r0, r1
 8008d9c:	d04c      	beq.n	8008e38 <get_fat+0x194>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8008d9e:	68af      	ldr	r7, [r5, #8]
 8008da0:	1be7      	subs	r7, r4, r7
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8008da2:	3801      	subs	r0, #1
 8008da4:	f8b6 800c 	ldrh.w	r8, [r6, #12]
 8008da8:	4642      	mov	r2, r8
 8008daa:	f04f 0300 	mov.w	r3, #0
 8008dae:	f141 31ff 	adc.w	r1, r1, #4294967295
 8008db2:	f7f7 fa85 	bl	80002c0 <__aeabi_uldivmod>
 8008db6:	8973      	ldrh	r3, [r6, #10]
 8008db8:	fbb0 f0f3 	udiv	r0, r0, r3
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8008dbc:	79eb      	ldrb	r3, [r5, #7]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d008      	beq.n	8008dd4 <get_fat+0x130>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d00b      	beq.n	8008dde <get_fat+0x13a>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d03b      	beq.n	8008e42 <get_fat+0x19e>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8008dca:	69eb      	ldr	r3, [r5, #28]
 8008dcc:	b163      	cbz	r3, 8008de8 <get_fat+0x144>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8008dce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008dd2:	e022      	b.n	8008e1a <get_fat+0x176>
					if (cofs <= clen) {
 8008dd4:	4287      	cmp	r7, r0
 8008dd6:	d8f4      	bhi.n	8008dc2 <get_fat+0x11e>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8008dd8:	d030      	beq.n	8008e3c <get_fat+0x198>
 8008dda:	1c60      	adds	r0, r4, #1
 8008ddc:	e01d      	b.n	8008e1a <get_fat+0x176>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8008dde:	69aa      	ldr	r2, [r5, #24]
 8008de0:	42ba      	cmp	r2, r7
 8008de2:	d9f0      	bls.n	8008dc6 <get_fat+0x122>
					val = clst + 1; 	/* Generate the value */
 8008de4:	1c60      	adds	r0, r4, #1
					break;
 8008de6:	e018      	b.n	8008e1a <get_fat+0x176>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008de8:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8008dea:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8008dee:	fbb4 f3f3 	udiv	r3, r4, r3
 8008df2:	4419      	add	r1, r3
 8008df4:	4630      	mov	r0, r6
 8008df6:	f7ff fb1f 	bl	8008438 <move_window>
 8008dfa:	bb20      	cbnz	r0, 8008e46 <get_fat+0x1a2>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8008dfc:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 8008e00:	00a4      	lsls	r4, r4, #2
 8008e02:	89b3      	ldrh	r3, [r6, #12]
 8008e04:	fbb4 f2f3 	udiv	r2, r4, r3
 8008e08:	fb03 4412 	mls	r4, r3, r2, r4
 8008e0c:	4420      	add	r0, r4
 8008e0e:	f7fe ff9a 	bl	8007d46 <ld_dword>
 8008e12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008e16:	e000      	b.n	8008e1a <get_fat+0x176>
		val = 1;	/* Internal error */
 8008e18:	2001      	movs	r0, #1
}
 8008e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		val = 1;	/* Internal error */
 8008e1e:	2001      	movs	r0, #1
 8008e20:	e7fb      	b.n	8008e1a <get_fat+0x176>
		switch (fs->fs_type) {
 8008e22:	2001      	movs	r0, #1
 8008e24:	e7f9      	b.n	8008e1a <get_fat+0x176>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008e26:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2a:	e7f6      	b.n	8008e1a <get_fat+0x176>
 8008e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e30:	e7f3      	b.n	8008e1a <get_fat+0x176>
 8008e32:	f04f 30ff 	mov.w	r0, #4294967295
 8008e36:	e7f0      	b.n	8008e1a <get_fat+0x176>
			val = 1;	/* Internal error */
 8008e38:	2001      	movs	r0, #1
 8008e3a:	e7ee      	b.n	8008e1a <get_fat+0x176>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8008e3c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008e40:	e7eb      	b.n	8008e1a <get_fat+0x176>
			val = 1;	/* Internal error */
 8008e42:	2001      	movs	r0, #1
 8008e44:	e7e9      	b.n	8008e1a <get_fat+0x176>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008e46:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8008e4a:	e7e6      	b.n	8008e1a <get_fat+0x176>

08008e4c <dir_sdi>:
{
 8008e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e50:	4607      	mov	r7, r0
 8008e52:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 8008e54:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008e58:	f898 3000 	ldrb.w	r3, [r8]
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d031      	beq.n	8008ec4 <dir_sdi+0x78>
 8008e60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e64:	42b3      	cmp	r3, r6
 8008e66:	d94e      	bls.n	8008f06 <dir_sdi+0xba>
 8008e68:	f016 0f1f 	tst.w	r6, #31
 8008e6c:	d14d      	bne.n	8008f0a <dir_sdi+0xbe>
	dp->dptr = ofs;				/* Set current offset */
 8008e6e:	633e      	str	r6, [r7, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008e70:	68bc      	ldr	r4, [r7, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008e72:	b93c      	cbnz	r4, 8008e84 <dir_sdi+0x38>
 8008e74:	f898 3000 	ldrb.w	r3, [r8]
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d903      	bls.n	8008e84 <dir_sdi+0x38>
		clst = fs->dirbase;
 8008e7c:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8008e80:	2300      	movs	r3, #0
 8008e82:	71fb      	strb	r3, [r7, #7]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008e84:	bb0c      	cbnz	r4, 8008eca <dir_sdi+0x7e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008e86:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008e8a:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 8008e8e:	d93e      	bls.n	8008f0e <dir_sdi+0xc2>
		dp->sect = fs->dirbase;
 8008e90:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8008e94:	63bb      	str	r3, [r7, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 8008e96:	637c      	str	r4, [r7, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d03f      	beq.n	8008f1e <dir_sdi+0xd2>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008e9e:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8008ea2:	fbb6 f2f2 	udiv	r2, r6, r2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	63bb      	str	r3, [r7, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008eaa:	f108 033c 	add.w	r3, r8, #60	; 0x3c
 8008eae:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8008eb2:	fbb6 f1f2 	udiv	r1, r6, r2
 8008eb6:	fb02 6111 	mls	r1, r2, r1, r6
 8008eba:	440b      	add	r3, r1
 8008ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
	return FR_OK;
 8008ebe:	2000      	movs	r0, #0
}
 8008ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ec8:	e7cc      	b.n	8008e64 <dir_sdi+0x18>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008eca:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8008ece:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008ed2:	fb03 f505 	mul.w	r5, r3, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ed6:	42ae      	cmp	r6, r5
 8008ed8:	d30f      	bcc.n	8008efa <dir_sdi+0xae>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008eda:	4621      	mov	r1, r4
 8008edc:	4638      	mov	r0, r7
 8008ede:	f7ff fee1 	bl	8008ca4 <get_fat>
 8008ee2:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ee4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ee8:	d013      	beq.n	8008f12 <dir_sdi+0xc6>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008eea:	2801      	cmp	r0, #1
 8008eec:	d913      	bls.n	8008f16 <dir_sdi+0xca>
 8008eee:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8008ef2:	4283      	cmp	r3, r0
 8008ef4:	d911      	bls.n	8008f1a <dir_sdi+0xce>
			ofs -= csz;
 8008ef6:	1b76      	subs	r6, r6, r5
 8008ef8:	e7ed      	b.n	8008ed6 <dir_sdi+0x8a>
		dp->sect = clust2sect(fs, clst);
 8008efa:	4621      	mov	r1, r4
 8008efc:	4640      	mov	r0, r8
 8008efe:	f7ff f869 	bl	8007fd4 <clust2sect>
 8008f02:	63b8      	str	r0, [r7, #56]	; 0x38
 8008f04:	e7c7      	b.n	8008e96 <dir_sdi+0x4a>
		return FR_INT_ERR;
 8008f06:	2002      	movs	r0, #2
 8008f08:	e7da      	b.n	8008ec0 <dir_sdi+0x74>
 8008f0a:	2002      	movs	r0, #2
 8008f0c:	e7d8      	b.n	8008ec0 <dir_sdi+0x74>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008f0e:	2002      	movs	r0, #2
 8008f10:	e7d6      	b.n	8008ec0 <dir_sdi+0x74>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f12:	2001      	movs	r0, #1
 8008f14:	e7d4      	b.n	8008ec0 <dir_sdi+0x74>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f16:	2002      	movs	r0, #2
 8008f18:	e7d2      	b.n	8008ec0 <dir_sdi+0x74>
 8008f1a:	2002      	movs	r0, #2
 8008f1c:	e7d0      	b.n	8008ec0 <dir_sdi+0x74>
	if (!dp->sect) return FR_INT_ERR;
 8008f1e:	2002      	movs	r0, #2
 8008f20:	e7ce      	b.n	8008ec0 <dir_sdi+0x74>

08008f22 <create_chain>:
{
 8008f22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f26:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 8008f28:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 8008f2c:	4689      	mov	r9, r1
 8008f2e:	b941      	cbnz	r1, 8008f42 <create_chain+0x20>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008f30:	f8d8 6018 	ldr.w	r6, [r8, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008f34:	b1b6      	cbz	r6, 8008f64 <create_chain+0x42>
 8008f36:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8008f3a:	42b3      	cmp	r3, r6
 8008f3c:	d813      	bhi.n	8008f66 <create_chain+0x44>
 8008f3e:	2601      	movs	r6, #1
 8008f40:	e011      	b.n	8008f66 <create_chain+0x44>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008f42:	f7ff feaf 	bl	8008ca4 <get_fat>
 8008f46:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008f48:	2801      	cmp	r0, #1
 8008f4a:	f240 80a0 	bls.w	800908e <create_chain+0x16c>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008f4e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008f52:	f000 80a6 	beq.w	80090a2 <create_chain+0x180>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008f56:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8008f5a:	4283      	cmp	r3, r0
 8008f5c:	f200 80a1 	bhi.w	80090a2 <create_chain+0x180>
		scl = clst;
 8008f60:	464e      	mov	r6, r9
 8008f62:	e000      	b.n	8008f66 <create_chain+0x44>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008f64:	2601      	movs	r6, #1
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008f66:	f898 3000 	ldrb.w	r3, [r8]
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d001      	beq.n	8008f72 <create_chain+0x50>
		ncl = scl;	/* Start cluster */
 8008f6e:	4634      	mov	r4, r6
 8008f70:	e052      	b.n	8009018 <create_chain+0xf6>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8008f72:	2201      	movs	r2, #1
 8008f74:	4631      	mov	r1, r6
 8008f76:	4640      	mov	r0, r8
 8008f78:	f7ff fd2a 	bl	80089d0 <find_bitmap>
 8008f7c:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8008f7e:	1e43      	subs	r3, r0, #1
 8008f80:	f113 0f03 	cmn.w	r3, #3
 8008f84:	f200 808d 	bhi.w	80090a2 <create_chain+0x180>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8008f88:	2301      	movs	r3, #1
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	4601      	mov	r1, r0
 8008f8e:	4640      	mov	r0, r8
 8008f90:	f7ff fd69 	bl	8008a66 <change_bitmap>
 8008f94:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
 8008f96:	2802      	cmp	r0, #2
 8008f98:	d07b      	beq.n	8009092 <create_chain+0x170>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8008f9a:	2801      	cmp	r0, #1
 8008f9c:	d07b      	beq.n	8009096 <create_chain+0x174>
		if (clst == 0) {							/* Is it a new chain? */
 8008f9e:	f1b9 0f00 	cmp.w	r9, #0
 8008fa2:	d118      	bne.n	8008fd6 <create_chain+0xb4>
			obj->stat = 2;							/* Set status 'contiguous' */
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	71fa      	strb	r2, [r7, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8008fa8:	79fa      	ldrb	r2, [r7, #7]
 8008faa:	2a02      	cmp	r2, #2
 8008fac:	d064      	beq.n	8009078 <create_chain+0x156>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8008fae:	f109 0201 	add.w	r2, r9, #1
 8008fb2:	42aa      	cmp	r2, r5
 8008fb4:	d01b      	beq.n	8008fee <create_chain+0xcc>
				if (obj->n_frag == 0) obj->n_frag = 1;
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	b90b      	cbnz	r3, 8008fbe <create_chain+0x9c>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	61fb      	str	r3, [r7, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8008fbe:	462a      	mov	r2, r5
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	f7ff fe3d 	bl	8008c42 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d156      	bne.n	800907c <create_chain+0x15a>
 8008fce:	2201      	movs	r2, #1
 8008fd0:	61fa      	str	r2, [r7, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8008fd2:	462c      	mov	r4, r5
 8008fd4:	e034      	b.n	8009040 <create_chain+0x11e>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8008fd6:	79fa      	ldrb	r2, [r7, #7]
 8008fd8:	2a02      	cmp	r2, #2
 8008fda:	d1e5      	bne.n	8008fa8 <create_chain+0x86>
 8008fdc:	1c72      	adds	r2, r6, #1
 8008fde:	42aa      	cmp	r2, r5
 8008fe0:	d0e2      	beq.n	8008fa8 <create_chain+0x86>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	1ab2      	subs	r2, r6, r2
 8008fe6:	61ba      	str	r2, [r7, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8008fe8:	2203      	movs	r2, #3
 8008fea:	71fa      	strb	r2, [r7, #7]
 8008fec:	e7dc      	b.n	8008fa8 <create_chain+0x86>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	b10a      	cbz	r2, 8008ff6 <create_chain+0xd4>
 8008ff2:	3201      	adds	r2, #1
 8008ff4:	e000      	b.n	8008ff8 <create_chain+0xd6>
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	61fa      	str	r2, [r7, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8008ffa:	462c      	mov	r4, r5
 8008ffc:	e020      	b.n	8009040 <create_chain+0x11e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008ffe:	4621      	mov	r1, r4
 8009000:	4638      	mov	r0, r7
 8009002:	f7ff fe4f 	bl	8008ca4 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8009006:	4605      	mov	r5, r0
 8009008:	b178      	cbz	r0, 800902a <create_chain+0x108>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800900a:	2801      	cmp	r0, #1
 800900c:	d049      	beq.n	80090a2 <create_chain+0x180>
 800900e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009012:	d046      	beq.n	80090a2 <create_chain+0x180>
			if (ncl == scl) return 0;		/* No free cluster */
 8009014:	42b4      	cmp	r4, r6
 8009016:	d043      	beq.n	80090a0 <create_chain+0x17e>
			ncl++;							/* Next cluster */
 8009018:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800901a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800901e:	42a3      	cmp	r3, r4
 8009020:	d8ed      	bhi.n	8008ffe <create_chain+0xdc>
				if (ncl > scl) return 0;	/* No free cluster */
 8009022:	2e01      	cmp	r6, #1
 8009024:	d93a      	bls.n	800909c <create_chain+0x17a>
				ncl = 2;
 8009026:	2402      	movs	r4, #2
 8009028:	e7e9      	b.n	8008ffe <create_chain+0xdc>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800902a:	f04f 32ff 	mov.w	r2, #4294967295
 800902e:	4621      	mov	r1, r4
 8009030:	4640      	mov	r0, r8
 8009032:	f7ff fd56 	bl	8008ae2 <put_fat>
		if (res == FR_OK && clst != 0) {
 8009036:	4603      	mov	r3, r0
 8009038:	b910      	cbnz	r0, 8009040 <create_chain+0x11e>
 800903a:	f1b9 0f00 	cmp.w	r9, #0
 800903e:	d114      	bne.n	800906a <create_chain+0x148>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009040:	b9f3      	cbnz	r3, 8009080 <create_chain+0x15e>
		fs->last_clst = ncl;
 8009042:	f8c8 4018 	str.w	r4, [r8, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009046:	f8d8 201c 	ldr.w	r2, [r8, #28]
 800904a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800904e:	3b02      	subs	r3, #2
 8009050:	429a      	cmp	r2, r3
 8009052:	d802      	bhi.n	800905a <create_chain+0x138>
 8009054:	3a01      	subs	r2, #1
 8009056:	f8c8 201c 	str.w	r2, [r8, #28]
		fs->fsi_flag |= 1;
 800905a:	f898 3004 	ldrb.w	r3, [r8, #4]
 800905e:	f043 0301 	orr.w	r3, r3, #1
 8009062:	f888 3004 	strb.w	r3, [r8, #4]
 8009066:	4625      	mov	r5, r4
 8009068:	e01b      	b.n	80090a2 <create_chain+0x180>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800906a:	4622      	mov	r2, r4
 800906c:	4649      	mov	r1, r9
 800906e:	4640      	mov	r0, r8
 8009070:	f7ff fd37 	bl	8008ae2 <put_fat>
 8009074:	4603      	mov	r3, r0
 8009076:	e7e3      	b.n	8009040 <create_chain+0x11e>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8009078:	462c      	mov	r4, r5
 800907a:	e7e1      	b.n	8009040 <create_chain+0x11e>
 800907c:	462c      	mov	r4, r5
 800907e:	e7df      	b.n	8009040 <create_chain+0x11e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009080:	2b01      	cmp	r3, #1
 8009082:	d001      	beq.n	8009088 <create_chain+0x166>
 8009084:	2501      	movs	r5, #1
 8009086:	e00c      	b.n	80090a2 <create_chain+0x180>
 8009088:	f04f 35ff 	mov.w	r5, #4294967295
 800908c:	e009      	b.n	80090a2 <create_chain+0x180>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800908e:	2501      	movs	r5, #1
 8009090:	e007      	b.n	80090a2 <create_chain+0x180>
		if (res == FR_INT_ERR) return 1;
 8009092:	2501      	movs	r5, #1
 8009094:	e005      	b.n	80090a2 <create_chain+0x180>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009096:	f04f 35ff 	mov.w	r5, #4294967295
 800909a:	e002      	b.n	80090a2 <create_chain+0x180>
				if (ncl > scl) return 0;	/* No free cluster */
 800909c:	2500      	movs	r5, #0
 800909e:	e000      	b.n	80090a2 <create_chain+0x180>
			if (ncl == scl) return 0;		/* No free cluster */
 80090a0:	2500      	movs	r5, #0
}
 80090a2:	4628      	mov	r0, r5
 80090a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080090a8 <remove_chain>:
{
 80090a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 80090ac:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80090ae:	2901      	cmp	r1, #1
 80090b0:	d96b      	bls.n	800918a <remove_chain+0xe2>
 80090b2:	4607      	mov	r7, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	4691      	mov	r9, r2
 80090b8:	6a2b      	ldr	r3, [r5, #32]
 80090ba:	428b      	cmp	r3, r1
 80090bc:	d967      	bls.n	800918e <remove_chain+0xe6>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80090be:	b172      	cbz	r2, 80090de <remove_chain+0x36>
 80090c0:	782b      	ldrb	r3, [r5, #0]
 80090c2:	2b04      	cmp	r3, #4
 80090c4:	d102      	bne.n	80090cc <remove_chain+0x24>
 80090c6:	79c3      	ldrb	r3, [r0, #7]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d008      	beq.n	80090de <remove_chain+0x36>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80090cc:	f04f 32ff 	mov.w	r2, #4294967295
 80090d0:	4649      	mov	r1, r9
 80090d2:	4628      	mov	r0, r5
 80090d4:	f7ff fd05 	bl	8008ae2 <put_fat>
		if (res != FR_OK) return res;
 80090d8:	4603      	mov	r3, r0
 80090da:	2800      	cmp	r0, #0
 80090dc:	d158      	bne.n	8009190 <remove_chain+0xe8>
{
 80090de:	46a0      	mov	r8, r4
 80090e0:	e011      	b.n	8009106 <remove_chain+0x5e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80090e2:	2200      	movs	r2, #0
 80090e4:	4631      	mov	r1, r6
 80090e6:	4628      	mov	r0, r5
 80090e8:	f7ff fcfb 	bl	8008ae2 <put_fat>
			if (res != FR_OK) return res;
 80090ec:	4603      	mov	r3, r0
 80090ee:	b1c8      	cbz	r0, 8009124 <remove_chain+0x7c>
 80090f0:	e04e      	b.n	8009190 <remove_chain+0xe8>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80090f2:	1c73      	adds	r3, r6, #1
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	d003      	beq.n	8009100 <remove_chain+0x58>
			if (fs->fs_type == FS_EXFAT) {
 80090f8:	782b      	ldrb	r3, [r5, #0]
 80090fa:	2b04      	cmp	r3, #4
 80090fc:	d01e      	beq.n	800913c <remove_chain+0x94>
			scl = ecl = nxt;
 80090fe:	46a0      	mov	r8, r4
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009100:	6a2b      	ldr	r3, [r5, #32]
 8009102:	42a3      	cmp	r3, r4
 8009104:	d926      	bls.n	8009154 <remove_chain+0xac>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009106:	4626      	mov	r6, r4
 8009108:	4621      	mov	r1, r4
 800910a:	4638      	mov	r0, r7
 800910c:	f7ff fdca 	bl	8008ca4 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8009110:	4604      	mov	r4, r0
 8009112:	b1f8      	cbz	r0, 8009154 <remove_chain+0xac>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009114:	2801      	cmp	r0, #1
 8009116:	d03e      	beq.n	8009196 <remove_chain+0xee>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009118:	f1b0 3fff 	cmp.w	r0, #4294967295
 800911c:	d03d      	beq.n	800919a <remove_chain+0xf2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800911e:	782b      	ldrb	r3, [r5, #0]
 8009120:	2b04      	cmp	r3, #4
 8009122:	d1de      	bne.n	80090e2 <remove_chain+0x3a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009124:	69ea      	ldr	r2, [r5, #28]
 8009126:	6a2b      	ldr	r3, [r5, #32]
 8009128:	3b02      	subs	r3, #2
 800912a:	429a      	cmp	r2, r3
 800912c:	d2e1      	bcs.n	80090f2 <remove_chain+0x4a>
			fs->free_clst++;
 800912e:	3201      	adds	r2, #1
 8009130:	61ea      	str	r2, [r5, #28]
			fs->fsi_flag |= 1;
 8009132:	792b      	ldrb	r3, [r5, #4]
 8009134:	f043 0301 	orr.w	r3, r3, #1
 8009138:	712b      	strb	r3, [r5, #4]
 800913a:	e7da      	b.n	80090f2 <remove_chain+0x4a>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800913c:	eba6 0208 	sub.w	r2, r6, r8
 8009140:	2300      	movs	r3, #0
 8009142:	3201      	adds	r2, #1
 8009144:	4641      	mov	r1, r8
 8009146:	4628      	mov	r0, r5
 8009148:	f7ff fc8d 	bl	8008a66 <change_bitmap>
				if (res != FR_OK) return res;
 800914c:	4603      	mov	r3, r0
 800914e:	b9f8      	cbnz	r0, 8009190 <remove_chain+0xe8>
			scl = ecl = nxt;
 8009150:	46a0      	mov	r8, r4
 8009152:	e7d5      	b.n	8009100 <remove_chain+0x58>
	if (fs->fs_type == FS_EXFAT) {
 8009154:	782b      	ldrb	r3, [r5, #0]
 8009156:	2b04      	cmp	r3, #4
 8009158:	d001      	beq.n	800915e <remove_chain+0xb6>
	return FR_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	e018      	b.n	8009190 <remove_chain+0xe8>
		if (pclst == 0) {	/* Does the object have no chain? */
 800915e:	f1b9 0f00 	cmp.w	r9, #0
 8009162:	d102      	bne.n	800916a <remove_chain+0xc2>
			obj->stat = 0;		/* Change the object status 'initial' */
 8009164:	2300      	movs	r3, #0
 8009166:	71fb      	strb	r3, [r7, #7]
 8009168:	e012      	b.n	8009190 <remove_chain+0xe8>
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800916a:	79fb      	ldrb	r3, [r7, #7]
 800916c:	2b03      	cmp	r3, #3
 800916e:	d001      	beq.n	8009174 <remove_chain+0xcc>
	return FR_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	e00d      	b.n	8009190 <remove_chain+0xe8>
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	454b      	cmp	r3, r9
 8009178:	d811      	bhi.n	800919e <remove_chain+0xf6>
 800917a:	69ba      	ldr	r2, [r7, #24]
 800917c:	4413      	add	r3, r2
 800917e:	454b      	cmp	r3, r9
 8009180:	d30f      	bcc.n	80091a2 <remove_chain+0xfa>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8009182:	2302      	movs	r3, #2
 8009184:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	e002      	b.n	8009190 <remove_chain+0xe8>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800918a:	2302      	movs	r3, #2
 800918c:	e000      	b.n	8009190 <remove_chain+0xe8>
 800918e:	2302      	movs	r3, #2
}
 8009190:	4618      	mov	r0, r3
 8009192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009196:	2302      	movs	r3, #2
 8009198:	e7fa      	b.n	8009190 <remove_chain+0xe8>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800919a:	2301      	movs	r3, #1
 800919c:	e7f8      	b.n	8009190 <remove_chain+0xe8>
	return FR_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	e7f6      	b.n	8009190 <remove_chain+0xe8>
 80091a2:	2300      	movs	r3, #0
 80091a4:	e7f4      	b.n	8009190 <remove_chain+0xe8>

080091a6 <dir_next>:
{
 80091a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 80091aa:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80091ac:	6b04      	ldr	r4, [r0, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80091ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 8081 	beq.w	80092b8 <dir_next+0x112>
 80091b6:	4605      	mov	r5, r0
 80091b8:	460f      	mov	r7, r1
 80091ba:	3420      	adds	r4, #32
 80091bc:	7832      	ldrb	r2, [r6, #0]
 80091be:	2a04      	cmp	r2, #4
 80091c0:	d01e      	beq.n	8009200 <dir_next+0x5a>
 80091c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80091c6:	42a2      	cmp	r2, r4
 80091c8:	d978      	bls.n	80092bc <dir_next+0x116>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80091ca:	89b1      	ldrh	r1, [r6, #12]
 80091cc:	fbb4 f2f1 	udiv	r2, r4, r1
 80091d0:	fb01 4212 	mls	r2, r1, r2, r4
 80091d4:	b93a      	cbnz	r2, 80091e6 <dir_next+0x40>
		dp->sect++;				/* Next sector */
 80091d6:	3301      	adds	r3, #1
 80091d8:	63ab      	str	r3, [r5, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 80091da:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80091dc:	b9b9      	cbnz	r1, 800920e <dir_next+0x68>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80091de:	8933      	ldrh	r3, [r6, #8]
 80091e0:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80091e4:	d90f      	bls.n	8009206 <dir_next+0x60>
	dp->dptr = ofs;						/* Current entry */
 80091e6:	632c      	str	r4, [r5, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80091e8:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 80091ec:	89b2      	ldrh	r2, [r6, #12]
 80091ee:	fbb4 f1f2 	udiv	r1, r4, r2
 80091f2:	fb02 4411 	mls	r4, r2, r1, r4
 80091f6:	4423      	add	r3, r4
 80091f8:	63eb      	str	r3, [r5, #60]	; 0x3c
	return FR_OK;
 80091fa:	2000      	movs	r0, #0
}
 80091fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009204:	e7df      	b.n	80091c6 <dir_next+0x20>
				dp->sect = 0; return FR_NO_FILE;
 8009206:	2300      	movs	r3, #0
 8009208:	63ab      	str	r3, [r5, #56]	; 0x38
 800920a:	2004      	movs	r0, #4
 800920c:	e7f6      	b.n	80091fc <dir_next+0x56>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800920e:	89b2      	ldrh	r2, [r6, #12]
 8009210:	fbb4 f2f2 	udiv	r2, r4, r2
 8009214:	8973      	ldrh	r3, [r6, #10]
 8009216:	3b01      	subs	r3, #1
 8009218:	ea12 0803 	ands.w	r8, r2, r3
 800921c:	d1e3      	bne.n	80091e6 <dir_next+0x40>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800921e:	4628      	mov	r0, r5
 8009220:	f7ff fd40 	bl	8008ca4 <get_fat>
 8009224:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009226:	2801      	cmp	r0, #1
 8009228:	d94a      	bls.n	80092c0 <dir_next+0x11a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800922a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800922e:	d049      	beq.n	80092c4 <dir_next+0x11e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009230:	6a33      	ldr	r3, [r6, #32]
 8009232:	4283      	cmp	r3, r0
 8009234:	d838      	bhi.n	80092a8 <dir_next+0x102>
					if (!stretch) {								/* If no stretch, report EOT */
 8009236:	b1af      	cbz	r7, 8009264 <dir_next+0xbe>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009238:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800923a:	4628      	mov	r0, r5
 800923c:	f7ff fe71 	bl	8008f22 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009240:	4681      	mov	r9, r0
 8009242:	2800      	cmp	r0, #0
 8009244:	d040      	beq.n	80092c8 <dir_next+0x122>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009246:	2801      	cmp	r0, #1
 8009248:	d040      	beq.n	80092cc <dir_next+0x126>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800924a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800924e:	d03f      	beq.n	80092d0 <dir_next+0x12a>
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8009250:	79eb      	ldrb	r3, [r5, #7]
 8009252:	f043 0304 	orr.w	r3, r3, #4
 8009256:	71eb      	strb	r3, [r5, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009258:	4630      	mov	r0, r6
 800925a:	f7ff f8c3 	bl	80083e4 <sync_window>
 800925e:	b128      	cbz	r0, 800926c <dir_next+0xc6>
 8009260:	2001      	movs	r0, #1
 8009262:	e7cb      	b.n	80091fc <dir_next+0x56>
						dp->sect = 0; return FR_NO_FILE;
 8009264:	2300      	movs	r3, #0
 8009266:	63ab      	str	r3, [r5, #56]	; 0x38
 8009268:	2004      	movs	r0, #4
 800926a:	e7c7      	b.n	80091fc <dir_next+0x56>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800926c:	89b2      	ldrh	r2, [r6, #12]
 800926e:	2100      	movs	r1, #0
 8009270:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 8009274:	f7fe fdbf 	bl	8007df6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009278:	4649      	mov	r1, r9
 800927a:	4630      	mov	r0, r6
 800927c:	f7fe feaa 	bl	8007fd4 <clust2sect>
 8009280:	63b0      	str	r0, [r6, #56]	; 0x38
 8009282:	8973      	ldrh	r3, [r6, #10]
 8009284:	4543      	cmp	r3, r8
 8009286:	d90b      	bls.n	80092a0 <dir_next+0xfa>
						fs->wflag = 1;
 8009288:	2301      	movs	r3, #1
 800928a:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800928c:	4630      	mov	r0, r6
 800928e:	f7ff f8a9 	bl	80083e4 <sync_window>
 8009292:	b9f8      	cbnz	r0, 80092d4 <dir_next+0x12e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009294:	f108 0801 	add.w	r8, r8, #1
 8009298:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800929a:	3301      	adds	r3, #1
 800929c:	63b3      	str	r3, [r6, #56]	; 0x38
 800929e:	e7f0      	b.n	8009282 <dir_next+0xdc>
					fs->winsect -= n;							/* Restore window offset */
 80092a0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80092a2:	eba3 0308 	sub.w	r3, r3, r8
 80092a6:	63b3      	str	r3, [r6, #56]	; 0x38
				dp->clust = clst;		/* Initialize data for new cluster */
 80092a8:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 80092ac:	4649      	mov	r1, r9
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7fe fe90 	bl	8007fd4 <clust2sect>
 80092b4:	63a8      	str	r0, [r5, #56]	; 0x38
 80092b6:	e796      	b.n	80091e6 <dir_next+0x40>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092b8:	2004      	movs	r0, #4
 80092ba:	e79f      	b.n	80091fc <dir_next+0x56>
 80092bc:	2004      	movs	r0, #4
 80092be:	e79d      	b.n	80091fc <dir_next+0x56>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80092c0:	2002      	movs	r0, #2
 80092c2:	e79b      	b.n	80091fc <dir_next+0x56>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80092c4:	2001      	movs	r0, #1
 80092c6:	e799      	b.n	80091fc <dir_next+0x56>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80092c8:	2007      	movs	r0, #7
 80092ca:	e797      	b.n	80091fc <dir_next+0x56>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80092cc:	2002      	movs	r0, #2
 80092ce:	e795      	b.n	80091fc <dir_next+0x56>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092d0:	2001      	movs	r0, #1
 80092d2:	e793      	b.n	80091fc <dir_next+0x56>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80092d4:	2001      	movs	r0, #1
 80092d6:	e791      	b.n	80091fc <dir_next+0x56>

080092d8 <load_xdir>:
{
 80092d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092dc:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80092de:	6800      	ldr	r0, [r0, #0]
 80092e0:	6947      	ldr	r7, [r0, #20]
	res = move_window(dp->obj.fs, dp->sect);
 80092e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80092e4:	f7ff f8a8 	bl	8008438 <move_window>
	if (res != FR_OK) return res;
 80092e8:	4605      	mov	r5, r0
 80092ea:	b920      	cbnz	r0, 80092f6 <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80092ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80092ee:	780b      	ldrb	r3, [r1, #0]
 80092f0:	2b85      	cmp	r3, #133	; 0x85
 80092f2:	d003      	beq.n	80092fc <load_xdir+0x24>
 80092f4:	2502      	movs	r5, #2
}
 80092f6:	4628      	mov	r0, r5
 80092f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80092fc:	2220      	movs	r2, #32
 80092fe:	4638      	mov	r0, r7
 8009300:	f7fe fd6f 	bl	8007de2 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8009304:	787e      	ldrb	r6, [r7, #1]
 8009306:	3601      	adds	r6, #1
 8009308:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800930a:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
 800930e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009312:	d851      	bhi.n	80093b8 <load_xdir+0xe0>
	res = dir_next(dp, 0);
 8009314:	2100      	movs	r1, #0
 8009316:	4620      	mov	r0, r4
 8009318:	f7ff ff45 	bl	80091a6 <dir_next>
	if (res != FR_OK) return res;
 800931c:	4605      	mov	r5, r0
 800931e:	2800      	cmp	r0, #0
 8009320:	d1e9      	bne.n	80092f6 <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
 8009322:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009324:	6820      	ldr	r0, [r4, #0]
 8009326:	f7ff f887 	bl	8008438 <move_window>
	if (res != FR_OK) return res;
 800932a:	4605      	mov	r5, r0
 800932c:	2800      	cmp	r0, #0
 800932e:	d1e2      	bne.n	80092f6 <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8009330:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009332:	780b      	ldrb	r3, [r1, #0]
 8009334:	2bc0      	cmp	r3, #192	; 0xc0
 8009336:	d001      	beq.n	800933c <load_xdir+0x64>
 8009338:	2502      	movs	r5, #2
 800933a:	e7dc      	b.n	80092f6 <load_xdir+0x1e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800933c:	2220      	movs	r2, #32
 800933e:	18b8      	adds	r0, r7, r2
 8009340:	f7fe fd4f 	bl	8007de2 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8009344:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009348:	332c      	adds	r3, #44	; 0x2c
 800934a:	4a1e      	ldr	r2, [pc, #120]	; (80093c4 <load_xdir+0xec>)
 800934c:	fba2 2303 	umull	r2, r3, r2, r3
 8009350:	08db      	lsrs	r3, r3, #3
 8009352:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8009356:	d331      	bcc.n	80093bc <load_xdir+0xe4>
	i = SZDIRE * 2;	/* C1 offset */
 8009358:	f04f 0840 	mov.w	r8, #64	; 0x40
 800935c:	e003      	b.n	8009366 <load_xdir+0x8e>
	} while ((i += SZDIRE) < sz_ent);
 800935e:	f108 0820 	add.w	r8, r8, #32
 8009362:	4546      	cmp	r6, r8
 8009364:	d91a      	bls.n	800939c <load_xdir+0xc4>
		res = dir_next(dp, 0);
 8009366:	2100      	movs	r1, #0
 8009368:	4620      	mov	r0, r4
 800936a:	f7ff ff1c 	bl	80091a6 <dir_next>
		if (res != FR_OK) return res;
 800936e:	4605      	mov	r5, r0
 8009370:	2800      	cmp	r0, #0
 8009372:	d1c0      	bne.n	80092f6 <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
 8009374:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009376:	6820      	ldr	r0, [r4, #0]
 8009378:	f7ff f85e 	bl	8008438 <move_window>
		if (res != FR_OK) return res;
 800937c:	4605      	mov	r5, r0
 800937e:	2800      	cmp	r0, #0
 8009380:	d1b9      	bne.n	80092f6 <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8009382:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009384:	780b      	ldrb	r3, [r1, #0]
 8009386:	2bc1      	cmp	r3, #193	; 0xc1
 8009388:	d11a      	bne.n	80093c0 <load_xdir+0xe8>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800938a:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 800938e:	d2e6      	bcs.n	800935e <load_xdir+0x86>
 8009390:	2220      	movs	r2, #32
 8009392:	eb07 0008 	add.w	r0, r7, r8
 8009396:	f7fe fd24 	bl	8007de2 <mem_cpy>
 800939a:	e7e0      	b.n	800935e <load_xdir+0x86>
	if (i <= MAXDIRB(_MAX_LFN)) {
 800939c:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 80093a0:	d8a9      	bhi.n	80092f6 <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80093a2:	4638      	mov	r0, r7
 80093a4:	f7fe ff4d 	bl	8008242 <xdir_sum>
 80093a8:	4604      	mov	r4, r0
 80093aa:	1cb8      	adds	r0, r7, #2
 80093ac:	f7fe fcc6 	bl	8007d3c <ld_word>
 80093b0:	4284      	cmp	r4, r0
 80093b2:	d0a0      	beq.n	80092f6 <load_xdir+0x1e>
 80093b4:	2502      	movs	r5, #2
 80093b6:	e79e      	b.n	80092f6 <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80093b8:	2502      	movs	r5, #2
 80093ba:	e79c      	b.n	80092f6 <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80093bc:	2502      	movs	r5, #2
 80093be:	e79a      	b.n	80092f6 <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80093c0:	2502      	movs	r5, #2
 80093c2:	e798      	b.n	80092f6 <load_xdir+0x1e>
 80093c4:	88888889 	.word	0x88888889

080093c8 <load_obj_dir>:
{
 80093c8:	b510      	push	{r4, lr}
 80093ca:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
 80093cc:	680b      	ldr	r3, [r1, #0]
 80093ce:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
 80093d0:	6a0b      	ldr	r3, [r1, #32]
 80093d2:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80093d4:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 80093d8:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80093da:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80093dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093e0:	6103      	str	r3, [r0, #16]
 80093e2:	2300      	movs	r3, #0
 80093e4:	6143      	str	r3, [r0, #20]
	dp->blk_ofs = obj->c_ofs;
 80093e6:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80093e8:	64c1      	str	r1, [r0, #76]	; 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80093ea:	f7ff fd2f 	bl	8008e4c <dir_sdi>
	if (res == FR_OK) {
 80093ee:	b100      	cbz	r0, 80093f2 <load_obj_dir+0x2a>
}
 80093f0:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
 80093f2:	4620      	mov	r0, r4
 80093f4:	f7ff ff70 	bl	80092d8 <load_xdir>
 80093f8:	e7fa      	b.n	80093f0 <load_obj_dir+0x28>

080093fa <dir_read>:
{
 80093fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093fe:	4604      	mov	r4, r0
 8009400:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 8009402:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 8009404:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8009408:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
 800940a:	2504      	movs	r5, #4
	while (dp->sect) {
 800940c:	e008      	b.n	8009420 <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
 800940e:	2b85      	cmp	r3, #133	; 0x85
 8009410:	d028      	beq.n	8009464 <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
 8009412:	2100      	movs	r1, #0
 8009414:	4620      	mov	r0, r4
 8009416:	f7ff fec6 	bl	80091a6 <dir_next>
		if (res != FR_OK) break;
 800941a:	4605      	mov	r5, r0
 800941c:	2800      	cmp	r0, #0
 800941e:	d15b      	bne.n	80094d8 <dir_read+0xde>
	while (dp->sect) {
 8009420:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009422:	2900      	cmp	r1, #0
 8009424:	d058      	beq.n	80094d8 <dir_read+0xde>
		res = move_window(fs, dp->sect);
 8009426:	4630      	mov	r0, r6
 8009428:	f7ff f806 	bl	8008438 <move_window>
		if (res != FR_OK) break;
 800942c:	4605      	mov	r5, r0
 800942e:	2800      	cmp	r0, #0
 8009430:	d152      	bne.n	80094d8 <dir_read+0xde>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009432:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009434:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 8009436:	2b00      	cmp	r3, #0
 8009438:	d04d      	beq.n	80094d6 <dir_read+0xdc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800943a:	7832      	ldrb	r2, [r6, #0]
 800943c:	2a04      	cmp	r2, #4
 800943e:	d0e6      	beq.n	800940e <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009440:	7aca      	ldrb	r2, [r1, #11]
 8009442:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8009446:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009448:	2be5      	cmp	r3, #229	; 0xe5
 800944a:	d03e      	beq.n	80094ca <dir_read+0xd0>
 800944c:	2b2e      	cmp	r3, #46	; 0x2e
 800944e:	d03e      	beq.n	80094ce <dir_read+0xd4>
 8009450:	f022 0020 	bic.w	r0, r2, #32
 8009454:	2808      	cmp	r0, #8
 8009456:	bf14      	ite	ne
 8009458:	2000      	movne	r0, #0
 800945a:	2001      	moveq	r0, #1
 800945c:	4540      	cmp	r0, r8
 800945e:	d00e      	beq.n	800947e <dir_read+0x84>
				ord = 0xFF;
 8009460:	27ff      	movs	r7, #255	; 0xff
 8009462:	e7d6      	b.n	8009412 <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8009464:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009466:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8009468:	4620      	mov	r0, r4
 800946a:	f7ff ff35 	bl	80092d8 <load_xdir>
					if (res == FR_OK) {
 800946e:	4605      	mov	r5, r0
 8009470:	bb90      	cbnz	r0, 80094d8 <dir_read+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8009472:	6973      	ldr	r3, [r6, #20]
 8009474:	791b      	ldrb	r3, [r3, #4]
 8009476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800947a:	71a3      	strb	r3, [r4, #6]
 800947c:	e02c      	b.n	80094d8 <dir_read+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800947e:	2a0f      	cmp	r2, #15
 8009480:	d119      	bne.n	80094b6 <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009482:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009486:	d006      	beq.n	8009496 <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
 8009488:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800948c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8009490:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009492:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
 8009494:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009496:	42bb      	cmp	r3, r7
 8009498:	d001      	beq.n	800949e <dir_read+0xa4>
 800949a:	27ff      	movs	r7, #255	; 0xff
 800949c:	e7b9      	b.n	8009412 <dir_read+0x18>
 800949e:	7b4b      	ldrb	r3, [r1, #13]
 80094a0:	454b      	cmp	r3, r9
 80094a2:	d001      	beq.n	80094a8 <dir_read+0xae>
 80094a4:	27ff      	movs	r7, #255	; 0xff
 80094a6:	e7b4      	b.n	8009412 <dir_read+0x18>
 80094a8:	6930      	ldr	r0, [r6, #16]
 80094aa:	f7fe fde7 	bl	800807c <pick_lfn>
 80094ae:	b180      	cbz	r0, 80094d2 <dir_read+0xd8>
 80094b0:	3f01      	subs	r7, #1
 80094b2:	b2ff      	uxtb	r7, r7
 80094b4:	e7ad      	b.n	8009412 <dir_read+0x18>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80094b6:	b927      	cbnz	r7, 80094c2 <dir_read+0xc8>
 80094b8:	4608      	mov	r0, r1
 80094ba:	f7fe feb2 	bl	8008222 <sum_sfn>
 80094be:	4548      	cmp	r0, r9
 80094c0:	d00a      	beq.n	80094d8 <dir_read+0xde>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80094c2:	f04f 33ff 	mov.w	r3, #4294967295
 80094c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80094c8:	e006      	b.n	80094d8 <dir_read+0xde>
				ord = 0xFF;
 80094ca:	27ff      	movs	r7, #255	; 0xff
 80094cc:	e7a1      	b.n	8009412 <dir_read+0x18>
 80094ce:	27ff      	movs	r7, #255	; 0xff
 80094d0:	e79f      	b.n	8009412 <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80094d2:	27ff      	movs	r7, #255	; 0xff
 80094d4:	e79d      	b.n	8009412 <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80094d6:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80094d8:	b10d      	cbz	r5, 80094de <dir_read+0xe4>
 80094da:	2300      	movs	r3, #0
 80094dc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80094de:	4628      	mov	r0, r5
 80094e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080094e4 <dir_alloc>:
{
 80094e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e6:	4604      	mov	r4, r0
 80094e8:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 80094ea:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 80094ec:	2100      	movs	r1, #0
 80094ee:	f7ff fcad 	bl	8008e4c <dir_sdi>
	if (res == FR_OK) {
 80094f2:	4602      	mov	r2, r0
 80094f4:	bb30      	cbnz	r0, 8009544 <dir_alloc+0x60>
		n = 0;
 80094f6:	2500      	movs	r5, #0
 80094f8:	e00e      	b.n	8009518 <dir_alloc+0x34>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 80094fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80094fc:	f993 3000 	ldrsb.w	r3, [r3]
 8009500:	43db      	mvns	r3, r3
 8009502:	0fdb      	lsrs	r3, r3, #31
 8009504:	b1e3      	cbz	r3, 8009540 <dir_alloc+0x5c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009506:	3501      	adds	r5, #1
 8009508:	42bd      	cmp	r5, r7
 800950a:	d01b      	beq.n	8009544 <dir_alloc+0x60>
			res = dir_next(dp, 1);
 800950c:	2101      	movs	r1, #1
 800950e:	4620      	mov	r0, r4
 8009510:	f7ff fe49 	bl	80091a6 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009514:	4602      	mov	r2, r0
 8009516:	b9a8      	cbnz	r0, 8009544 <dir_alloc+0x60>
			res = move_window(fs, dp->sect);
 8009518:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800951a:	4630      	mov	r0, r6
 800951c:	f7fe ff8c 	bl	8008438 <move_window>
			if (res != FR_OK) break;
 8009520:	4602      	mov	r2, r0
 8009522:	b978      	cbnz	r0, 8009544 <dir_alloc+0x60>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8009524:	7833      	ldrb	r3, [r6, #0]
 8009526:	2b04      	cmp	r3, #4
 8009528:	d0e7      	beq.n	80094fa <dir_alloc+0x16>
 800952a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2be5      	cmp	r3, #229	; 0xe5
 8009530:	d002      	beq.n	8009538 <dir_alloc+0x54>
 8009532:	b91b      	cbnz	r3, 800953c <dir_alloc+0x58>
 8009534:	2301      	movs	r3, #1
 8009536:	e7e5      	b.n	8009504 <dir_alloc+0x20>
 8009538:	2301      	movs	r3, #1
 800953a:	e7e3      	b.n	8009504 <dir_alloc+0x20>
 800953c:	2300      	movs	r3, #0
 800953e:	e7e1      	b.n	8009504 <dir_alloc+0x20>
				n = 0;					/* Not a blank entry. Restart to search */
 8009540:	2500      	movs	r5, #0
 8009542:	e7e3      	b.n	800950c <dir_alloc+0x28>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009544:	2a04      	cmp	r2, #4
 8009546:	d001      	beq.n	800954c <dir_alloc+0x68>
}
 8009548:	4610      	mov	r0, r2
 800954a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800954c:	2207      	movs	r2, #7
 800954e:	e7fb      	b.n	8009548 <dir_alloc+0x64>

08009550 <store_xdir>:
{
 8009550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009552:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8009554:	6803      	ldr	r3, [r0, #0]
 8009556:	695e      	ldr	r6, [r3, #20]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8009558:	4630      	mov	r0, r6
 800955a:	f7fe fe72 	bl	8008242 <xdir_sum>
 800955e:	4601      	mov	r1, r0
 8009560:	1cb0      	adds	r0, r6, #2
 8009562:	f7fe fc1d 	bl	8007da0 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8009566:	7877      	ldrb	r7, [r6, #1]
 8009568:	3701      	adds	r7, #1
	res = dir_sdi(dp, dp->blk_ofs);
 800956a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800956c:	4620      	mov	r0, r4
 800956e:	f7ff fc6d 	bl	8008e4c <dir_sdi>
 8009572:	4605      	mov	r5, r0
	while (res == FR_OK) {
 8009574:	e005      	b.n	8009582 <store_xdir+0x32>
		dirb += SZDIRE;
 8009576:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
 8009578:	2100      	movs	r1, #0
 800957a:	4620      	mov	r0, r4
 800957c:	f7ff fe13 	bl	80091a6 <dir_next>
 8009580:	4605      	mov	r5, r0
	while (res == FR_OK) {
 8009582:	b97d      	cbnz	r5, 80095a4 <store_xdir+0x54>
		res = move_window(dp->obj.fs, dp->sect);
 8009584:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009586:	6820      	ldr	r0, [r4, #0]
 8009588:	f7fe ff56 	bl	8008438 <move_window>
		if (res != FR_OK) break;
 800958c:	4605      	mov	r5, r0
 800958e:	b948      	cbnz	r0, 80095a4 <store_xdir+0x54>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8009590:	2220      	movs	r2, #32
 8009592:	4631      	mov	r1, r6
 8009594:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009596:	f7fe fc24 	bl	8007de2 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	2201      	movs	r2, #1
 800959e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80095a0:	3f01      	subs	r7, #1
 80095a2:	d1e8      	bne.n	8009576 <store_xdir+0x26>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80095a4:	2d02      	cmp	r5, #2
 80095a6:	bf28      	it	cs
 80095a8:	2502      	movcs	r5, #2
}
 80095aa:	b2e8      	uxtb	r0, r5
 80095ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095b0 <sync_fs>:
{
 80095b0:	b570      	push	{r4, r5, r6, lr}
 80095b2:	4604      	mov	r4, r0
	res = sync_window(fs);
 80095b4:	f7fe ff16 	bl	80083e4 <sync_window>
	if (res == FR_OK) {
 80095b8:	4605      	mov	r5, r0
 80095ba:	b948      	cbnz	r0, 80095d0 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80095bc:	7823      	ldrb	r3, [r4, #0]
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d008      	beq.n	80095d4 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80095c2:	2200      	movs	r2, #0
 80095c4:	4611      	mov	r1, r2
 80095c6:	7860      	ldrb	r0, [r4, #1]
 80095c8:	f7fe fbac 	bl	8007d24 <disk_ioctl>
 80095cc:	b100      	cbz	r0, 80095d0 <sync_fs+0x20>
 80095ce:	2501      	movs	r5, #1
}
 80095d0:	4628      	mov	r0, r5
 80095d2:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80095d4:	7923      	ldrb	r3, [r4, #4]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d1f3      	bne.n	80095c2 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 80095da:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 80095de:	89a2      	ldrh	r2, [r4, #12]
 80095e0:	2100      	movs	r1, #0
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7fe fc07 	bl	8007df6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80095e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80095ec:	f204 203a 	addw	r0, r4, #570	; 0x23a
 80095f0:	f7fe fbd6 	bl	8007da0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80095f4:	490e      	ldr	r1, [pc, #56]	; (8009630 <sync_fs+0x80>)
 80095f6:	4630      	mov	r0, r6
 80095f8:	f7fe fbd6 	bl	8007da8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80095fc:	490d      	ldr	r1, [pc, #52]	; (8009634 <sync_fs+0x84>)
 80095fe:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8009602:	f7fe fbd1 	bl	8007da8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009606:	69e1      	ldr	r1, [r4, #28]
 8009608:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800960c:	f7fe fbcc 	bl	8007da8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009610:	69a1      	ldr	r1, [r4, #24]
 8009612:	f504 700a 	add.w	r0, r4, #552	; 0x228
 8009616:	f7fe fbc7 	bl	8007da8 <st_dword>
			fs->winsect = fs->volbase + 1;
 800961a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800961c:	3201      	adds	r2, #1
 800961e:	63a2      	str	r2, [r4, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009620:	2301      	movs	r3, #1
 8009622:	4631      	mov	r1, r6
 8009624:	7860      	ldrb	r0, [r4, #1]
 8009626:	f7fe fb71 	bl	8007d0c <disk_write>
			fs->fsi_flag = 0;
 800962a:	2300      	movs	r3, #0
 800962c:	7123      	strb	r3, [r4, #4]
 800962e:	e7c8      	b.n	80095c2 <sync_fs+0x12>
 8009630:	41615252 	.word	0x41615252
 8009634:	61417272 	.word	0x61417272

08009638 <create_name>:
{
 8009638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963c:	b083      	sub	sp, #12
 800963e:	4607      	mov	r7, r0
 8009640:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009642:	f8d1 9000 	ldr.w	r9, [r1]
 8009646:	6803      	ldr	r3, [r0, #0]
 8009648:	691d      	ldr	r5, [r3, #16]
 800964a:	2400      	movs	r4, #0
 800964c:	4623      	mov	r3, r4
 800964e:	e012      	b.n	8009676 <create_name+0x3e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009650:	3601      	adds	r6, #1
 8009652:	f819 3006 	ldrb.w	r3, [r9, r6]
 8009656:	2b2f      	cmp	r3, #47	; 0x2f
 8009658:	d0fa      	beq.n	8009650 <create_name+0x18>
 800965a:	2b5c      	cmp	r3, #92	; 0x5c
 800965c:	d0f8      	beq.n	8009650 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 800965e:	444e      	add	r6, r9
 8009660:	f8ca 6000 	str.w	r6, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009664:	281f      	cmp	r0, #31
 8009666:	d823      	bhi.n	80096b0 <create_name+0x78>
 8009668:	f04f 0804 	mov.w	r8, #4
 800966c:	e024      	b.n	80096b8 <create_name+0x80>
		lfn[di++] = w;					/* Store the Unicode character */
 800966e:	f825 8014 	strh.w	r8, [r5, r4, lsl #1]
 8009672:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 8009674:	4633      	mov	r3, r6
 8009676:	1c5e      	adds	r6, r3, #1
 8009678:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 800967c:	281f      	cmp	r0, #31
 800967e:	d9ee      	bls.n	800965e <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009680:	282f      	cmp	r0, #47	; 0x2f
 8009682:	d0e6      	beq.n	8009652 <create_name+0x1a>
 8009684:	285c      	cmp	r0, #92	; 0x5c
 8009686:	d0e4      	beq.n	8009652 <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009688:	2cfe      	cmp	r4, #254	; 0xfe
 800968a:	f200 80df 	bhi.w	800984c <create_name+0x214>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800968e:	2101      	movs	r1, #1
 8009690:	f001 fc82 	bl	800af98 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009694:	4680      	mov	r8, r0
 8009696:	2800      	cmp	r0, #0
 8009698:	f000 80da 	beq.w	8009850 <create_name+0x218>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800969c:	287f      	cmp	r0, #127	; 0x7f
 800969e:	d8e6      	bhi.n	800966e <create_name+0x36>
 80096a0:	4601      	mov	r1, r0
 80096a2:	486d      	ldr	r0, [pc, #436]	; (8009858 <create_name+0x220>)
 80096a4:	f7fe fbb9 	bl	8007e1a <chk_chr>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d0e0      	beq.n	800966e <create_name+0x36>
 80096ac:	2006      	movs	r0, #6
 80096ae:	e085      	b.n	80097bc <create_name+0x184>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80096b0:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80096b4:	e000      	b.n	80096b8 <create_name+0x80>
		di--;
 80096b6:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80096b8:	b144      	cbz	r4, 80096cc <create_name+0x94>
		w = lfn[di - 1];
 80096ba:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80096be:	3b01      	subs	r3, #1
 80096c0:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 80096c4:	2b20      	cmp	r3, #32
 80096c6:	d0f6      	beq.n	80096b6 <create_name+0x7e>
 80096c8:	2b2e      	cmp	r3, #46	; 0x2e
 80096ca:	d0f4      	beq.n	80096b6 <create_name+0x7e>
	lfn[di] = 0;						/* LFN is created */
 80096cc:	2300      	movs	r3, #0
 80096ce:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80096d2:	2c00      	cmp	r4, #0
 80096d4:	f000 80be 	beq.w	8009854 <create_name+0x21c>
	mem_set(dp->fn, ' ', 11);
 80096d8:	220b      	movs	r2, #11
 80096da:	2120      	movs	r1, #32
 80096dc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80096e0:	f7fe fb89 	bl	8007df6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80096e4:	2300      	movs	r3, #0
 80096e6:	e000      	b.n	80096ea <create_name+0xb2>
 80096e8:	3301      	adds	r3, #1
 80096ea:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 80096ee:	2a20      	cmp	r2, #32
 80096f0:	d0fa      	beq.n	80096e8 <create_name+0xb0>
 80096f2:	2a2e      	cmp	r2, #46	; 0x2e
 80096f4:	d0f8      	beq.n	80096e8 <create_name+0xb0>
	if (si) cf |= NS_LOSS | NS_LFN;
 80096f6:	b11b      	cbz	r3, 8009700 <create_name+0xc8>
 80096f8:	f048 0803 	orr.w	r8, r8, #3
 80096fc:	e000      	b.n	8009700 <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80096fe:	3c01      	subs	r4, #1
 8009700:	b16c      	cbz	r4, 800971e <create_name+0xe6>
 8009702:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 8009706:	3a01      	subs	r2, #1
 8009708:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800970c:	2a2e      	cmp	r2, #46	; 0x2e
 800970e:	d1f6      	bne.n	80096fe <create_name+0xc6>
 8009710:	f04f 0b08 	mov.w	fp, #8
 8009714:	f04f 0a00 	mov.w	sl, #0
 8009718:	f8cd a004 	str.w	sl, [sp, #4]
 800971c:	e00a      	b.n	8009734 <create_name+0xfc>
 800971e:	46a2      	mov	sl, r4
 8009720:	f04f 0b08 	mov.w	fp, #8
 8009724:	2200      	movs	r2, #0
 8009726:	9201      	str	r2, [sp, #4]
 8009728:	e004      	b.n	8009734 <create_name+0xfc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800972a:	454c      	cmp	r4, r9
 800972c:	d00b      	beq.n	8009746 <create_name+0x10e>
			cf |= NS_LOSS | NS_LFN; continue;
 800972e:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 8009732:	464b      	mov	r3, r9
 8009734:	f103 0901 	add.w	r9, r3, #1
 8009738:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800973c:	b1fe      	cbz	r6, 800977e <create_name+0x146>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800973e:	2e20      	cmp	r6, #32
 8009740:	d0f5      	beq.n	800972e <create_name+0xf6>
 8009742:	2e2e      	cmp	r6, #46	; 0x2e
 8009744:	d0f1      	beq.n	800972a <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009746:	45da      	cmp	sl, fp
 8009748:	d210      	bcs.n	800976c <create_name+0x134>
 800974a:	454c      	cmp	r4, r9
 800974c:	d00e      	beq.n	800976c <create_name+0x134>
		if (w >= 0x80) {				/* Non ASCII character */
 800974e:	2e7f      	cmp	r6, #127	; 0x7f
 8009750:	d844      	bhi.n	80097dc <create_name+0x1a4>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009752:	2e00      	cmp	r6, #0
 8009754:	d14f      	bne.n	80097f6 <create_name+0x1be>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009756:	f048 0803 	orr.w	r8, r8, #3
 800975a:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800975c:	eb07 030a 	add.w	r3, r7, sl
 8009760:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8009764:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 8009766:	f10a 0a01 	add.w	sl, sl, #1
 800976a:	e7e3      	b.n	8009734 <create_name+0xfc>
			if (ni == 11) {				/* Long extension */
 800976c:	f1bb 0f0b 	cmp.w	fp, #11
 8009770:	d027      	beq.n	80097c2 <create_name+0x18a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009772:	454c      	cmp	r4, r9
 8009774:	d001      	beq.n	800977a <create_name+0x142>
 8009776:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 800977a:	454c      	cmp	r4, r9
 800977c:	d224      	bcs.n	80097c8 <create_name+0x190>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800977e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009782:	2be5      	cmp	r3, #229	; 0xe5
 8009784:	d053      	beq.n	800982e <create_name+0x1f6>
	if (ni == 8) b <<= 2;
 8009786:	f1bb 0f08 	cmp.w	fp, #8
 800978a:	d054      	beq.n	8009836 <create_name+0x1fe>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800978c:	9b01      	ldr	r3, [sp, #4]
 800978e:	f003 020c 	and.w	r2, r3, #12
 8009792:	2a0c      	cmp	r2, #12
 8009794:	d003      	beq.n	800979e <create_name+0x166>
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	2b03      	cmp	r3, #3
 800979c:	d101      	bne.n	80097a2 <create_name+0x16a>
 800979e:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80097a2:	f018 0f02 	tst.w	r8, #2
 80097a6:	d106      	bne.n	80097b6 <create_name+0x17e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80097a8:	9b01      	ldr	r3, [sp, #4]
 80097aa:	f003 0303 	and.w	r3, r3, #3
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d046      	beq.n	8009840 <create_name+0x208>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80097b2:	2a04      	cmp	r2, #4
 80097b4:	d047      	beq.n	8009846 <create_name+0x20e>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80097b6:	f887 804b 	strb.w	r8, [r7, #75]	; 0x4b
	return FR_OK;
 80097ba:	2000      	movs	r0, #0
}
 80097bc:	b003      	add	sp, #12
 80097be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 80097c2:	f048 0803 	orr.w	r8, r8, #3
 80097c6:	e7da      	b.n	800977e <create_name+0x146>
			b <<= 2; continue;
 80097c8:	9b01      	ldr	r3, [sp, #4]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80097d0:	4623      	mov	r3, r4
 80097d2:	f04f 0b0b 	mov.w	fp, #11
 80097d6:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 80097da:	e7ab      	b.n	8009734 <create_name+0xfc>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80097dc:	2100      	movs	r1, #0
 80097de:	4630      	mov	r0, r6
 80097e0:	f001 fbda 	bl	800af98 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80097e4:	4606      	mov	r6, r0
 80097e6:	b118      	cbz	r0, 80097f0 <create_name+0x1b8>
 80097e8:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 80097ec:	4b1b      	ldr	r3, [pc, #108]	; (800985c <create_name+0x224>)
 80097ee:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 80097f0:	f048 0802 	orr.w	r8, r8, #2
 80097f4:	e7ad      	b.n	8009752 <create_name+0x11a>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80097f6:	4631      	mov	r1, r6
 80097f8:	4819      	ldr	r0, [pc, #100]	; (8009860 <create_name+0x228>)
 80097fa:	f7fe fb0e 	bl	8007e1a <chk_chr>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d1a9      	bne.n	8009756 <create_name+0x11e>
				if (IsUpper(w)) {		/* ASCII large capital */
 8009802:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 8009806:	b29b      	uxth	r3, r3
 8009808:	2b19      	cmp	r3, #25
 800980a:	d804      	bhi.n	8009816 <create_name+0x1de>
					b |= 2;
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	f043 0302 	orr.w	r3, r3, #2
 8009812:	9301      	str	r3, [sp, #4]
 8009814:	e7a2      	b.n	800975c <create_name+0x124>
					if (IsLower(w)) {	/* ASCII small capital */
 8009816:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800981a:	b29b      	uxth	r3, r3
 800981c:	2b19      	cmp	r3, #25
 800981e:	d89d      	bhi.n	800975c <create_name+0x124>
						b |= 1; w -= 0x20;
 8009820:	9b01      	ldr	r3, [sp, #4]
 8009822:	f043 0301 	orr.w	r3, r3, #1
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	3e20      	subs	r6, #32
 800982a:	b2b6      	uxth	r6, r6
 800982c:	e796      	b.n	800975c <create_name+0x124>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800982e:	2305      	movs	r3, #5
 8009830:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8009834:	e7a7      	b.n	8009786 <create_name+0x14e>
	if (ni == 8) b <<= 2;
 8009836:	9b01      	ldr	r3, [sp, #4]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	b2db      	uxtb	r3, r3
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	e7a5      	b.n	800978c <create_name+0x154>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009840:	f048 0810 	orr.w	r8, r8, #16
 8009844:	e7b5      	b.n	80097b2 <create_name+0x17a>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009846:	f048 0808 	orr.w	r8, r8, #8
 800984a:	e7b4      	b.n	80097b6 <create_name+0x17e>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800984c:	2006      	movs	r0, #6
 800984e:	e7b5      	b.n	80097bc <create_name+0x184>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009850:	2006      	movs	r0, #6
 8009852:	e7b3      	b.n	80097bc <create_name+0x184>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009854:	2006      	movs	r0, #6
 8009856:	e7b1      	b.n	80097bc <create_name+0x184>
 8009858:	0800c320 	.word	0x0800c320
 800985c:	0800c334 	.word	0x0800c334
 8009860:	0800c32c 	.word	0x0800c32c

08009864 <get_xdir_info>:
{
 8009864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009868:	4607      	mov	r7, r0
 800986a:	4688      	mov	r8, r1
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800986c:	2600      	movs	r6, #0
 800986e:	2440      	movs	r4, #64	; 0x40
	di = 0;
 8009870:	4635      	mov	r5, r6
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8009872:	e00e      	b.n	8009892 <get_xdir_info+0x2e>
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 8009874:	1938      	adds	r0, r7, r4
 8009876:	f7fe fa61 	bl	8007d3c <ld_word>
 800987a:	2100      	movs	r1, #0
 800987c:	f001 fb8c 	bl	800af98 <ff_convert>
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8009880:	b180      	cbz	r0, 80098a4 <get_xdir_info+0x40>
 8009882:	2dfe      	cmp	r5, #254	; 0xfe
 8009884:	d836      	bhi.n	80098f4 <get_xdir_info+0x90>
		fno->fname[di++] = (char)w;
 8009886:	eb08 0205 	add.w	r2, r8, r5
 800988a:	7690      	strb	r0, [r2, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800988c:	3402      	adds	r4, #2
 800988e:	3601      	adds	r6, #1
		fno->fname[di++] = (char)w;
 8009890:	3501      	adds	r5, #1
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8009892:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009896:	42b3      	cmp	r3, r6
 8009898:	d905      	bls.n	80098a6 <get_xdir_info+0x42>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800989a:	f014 0f1f 	tst.w	r4, #31
 800989e:	d1e9      	bne.n	8009874 <get_xdir_info+0x10>
 80098a0:	3402      	adds	r4, #2
 80098a2:	e7e7      	b.n	8009874 <get_xdir_info+0x10>
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 80098a4:	2500      	movs	r5, #0
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 80098a6:	b925      	cbnz	r5, 80098b2 <get_xdir_info+0x4e>
 80098a8:	eb08 0305 	add.w	r3, r8, r5
 80098ac:	223f      	movs	r2, #63	; 0x3f
 80098ae:	769a      	strb	r2, [r3, #26]
 80098b0:	3501      	adds	r5, #1
	fno->fname[di] = 0;						/* Terminate file name */
 80098b2:	4445      	add	r5, r8
 80098b4:	2300      	movs	r3, #0
 80098b6:	76ab      	strb	r3, [r5, #26]
	fno->altname[0] = 0;							/* No SFN */
 80098b8:	f888 300d 	strb.w	r3, [r8, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 80098bc:	793b      	ldrb	r3, [r7, #4]
 80098be:	f888 300c 	strb.w	r3, [r8, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 80098c2:	f013 0f10 	tst.w	r3, #16
 80098c6:	d117      	bne.n	80098f8 <get_xdir_info+0x94>
 80098c8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80098cc:	f7fe fa46 	bl	8007d5c <ld_qword>
 80098d0:	f8c8 0000 	str.w	r0, [r8]
 80098d4:	f8c8 1004 	str.w	r1, [r8, #4]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 80098d8:	f107 000c 	add.w	r0, r7, #12
 80098dc:	f7fe fa2e 	bl	8007d3c <ld_word>
 80098e0:	f8a8 000a 	strh.w	r0, [r8, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 80098e4:	f107 000e 	add.w	r0, r7, #14
 80098e8:	f7fe fa28 	bl	8007d3c <ld_word>
 80098ec:	f8a8 0008 	strh.w	r0, [r8, #8]
}
 80098f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 80098f4:	2500      	movs	r5, #0
 80098f6:	e7d6      	b.n	80098a6 <get_xdir_info+0x42>
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 80098f8:	2000      	movs	r0, #0
 80098fa:	4601      	mov	r1, r0
 80098fc:	e7e8      	b.n	80098d0 <get_xdir_info+0x6c>

080098fe <get_fileinfo>:
{
 80098fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8009902:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8009906:	2300      	movs	r3, #0
 8009908:	768b      	strb	r3, [r1, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800990a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800990c:	2b00      	cmp	r3, #0
 800990e:	d075      	beq.n	80099fc <get_fileinfo+0xfe>
 8009910:	4606      	mov	r6, r0
 8009912:	460c      	mov	r4, r1
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009914:	f898 3000 	ldrb.w	r3, [r8]
 8009918:	2b04      	cmp	r3, #4
 800991a:	d016      	beq.n	800994a <get_fileinfo+0x4c>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800991c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800991e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009922:	d01b      	beq.n	800995c <get_fileinfo+0x5e>
			i = j = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	461d      	mov	r5, r3
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009928:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800992c:	1c5f      	adds	r7, r3, #1
 800992e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8009932:	b180      	cbz	r0, 8009956 <get_fileinfo+0x58>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8009934:	2100      	movs	r1, #0
 8009936:	f001 fb2f 	bl	800af98 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800993a:	b158      	cbz	r0, 8009954 <get_fileinfo+0x56>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800993c:	2dfe      	cmp	r5, #254	; 0xfe
 800993e:	d811      	bhi.n	8009964 <get_fileinfo+0x66>
				fno->fname[i++] = (TCHAR)w;
 8009940:	1962      	adds	r2, r4, r5
 8009942:	7690      	strb	r0, [r2, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009944:	463b      	mov	r3, r7
				fno->fname[i++] = (TCHAR)w;
 8009946:	3501      	adds	r5, #1
 8009948:	e7ee      	b.n	8009928 <get_fileinfo+0x2a>
		get_xdir_info(fs->dirbuf, fno);
 800994a:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800994e:	f7ff ff89 	bl	8009864 <get_xdir_info>
		return;
 8009952:	e053      	b.n	80099fc <get_fileinfo+0xfe>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8009954:	2500      	movs	r5, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8009956:	4425      	add	r5, r4
 8009958:	2300      	movs	r3, #0
 800995a:	76ab      	strb	r3, [r5, #26]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800995c:	7ea5      	ldrb	r5, [r4, #26]
	i = j = 0;
 800995e:	2200      	movs	r2, #0
 8009960:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 8009962:	e012      	b.n	800998a <get_fileinfo+0x8c>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8009964:	2500      	movs	r5, #0
 8009966:	e7f6      	b.n	8009956 <get_fileinfo+0x58>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009968:	23e5      	movs	r3, #229	; 0xe5
 800996a:	e017      	b.n	800999c <get_fileinfo+0x9e>
			if (!lfv) fno->fname[j] = '.';
 800996c:	b915      	cbnz	r5, 8009974 <get_fileinfo+0x76>
 800996e:	18a0      	adds	r0, r4, r2
 8009970:	272e      	movs	r7, #46	; 0x2e
 8009972:	7687      	strb	r7, [r0, #26]
			fno->altname[j++] = '.';
 8009974:	18a0      	adds	r0, r4, r2
 8009976:	272e      	movs	r7, #46	; 0x2e
 8009978:	7347      	strb	r7, [r0, #13]
 800997a:	3201      	adds	r2, #1
 800997c:	e010      	b.n	80099a0 <get_fileinfo+0xa2>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800997e:	2010      	movs	r0, #16
 8009980:	e01c      	b.n	80099bc <get_fileinfo+0xbe>
			fno->fname[j] = c;
 8009982:	18a0      	adds	r0, r4, r2
 8009984:	7683      	strb	r3, [r0, #26]
		j++;
 8009986:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009988:	460b      	mov	r3, r1
	while (i < 11) {		/* Copy name body and extension */
 800998a:	2b0a      	cmp	r3, #10
 800998c:	d81b      	bhi.n	80099c6 <get_fileinfo+0xc8>
		c = (TCHAR)dp->dir[i++];
 800998e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8009990:	1c59      	adds	r1, r3, #1
 8009992:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009994:	2b20      	cmp	r3, #32
 8009996:	d0f7      	beq.n	8009988 <get_fileinfo+0x8a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009998:	2b05      	cmp	r3, #5
 800999a:	d0e5      	beq.n	8009968 <get_fileinfo+0x6a>
		if (i == 9) {						/* Insert a . if extension is exist */
 800999c:	2909      	cmp	r1, #9
 800999e:	d0e5      	beq.n	800996c <get_fileinfo+0x6e>
		fno->altname[j] = c;
 80099a0:	18a0      	adds	r0, r4, r2
 80099a2:	7343      	strb	r3, [r0, #13]
		if (!lfv) {
 80099a4:	2d00      	cmp	r5, #0
 80099a6:	d1ee      	bne.n	8009986 <get_fileinfo+0x88>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80099a8:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 80099ac:	b2c0      	uxtb	r0, r0
 80099ae:	2819      	cmp	r0, #25
 80099b0:	d8e7      	bhi.n	8009982 <get_fileinfo+0x84>
 80099b2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80099b4:	7b07      	ldrb	r7, [r0, #12]
 80099b6:	2908      	cmp	r1, #8
 80099b8:	d8e1      	bhi.n	800997e <get_fileinfo+0x80>
 80099ba:	2008      	movs	r0, #8
 80099bc:	4207      	tst	r7, r0
 80099be:	d0e0      	beq.n	8009982 <get_fileinfo+0x84>
				c += 0x20;			/* To lower */
 80099c0:	3320      	adds	r3, #32
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	e7dd      	b.n	8009982 <get_fileinfo+0x84>
	if (!lfv) {
 80099c6:	b935      	cbnz	r5, 80099d6 <get_fileinfo+0xd8>
		fno->fname[j] = 0;
 80099c8:	18a3      	adds	r3, r4, r2
 80099ca:	2100      	movs	r1, #0
 80099cc:	7699      	strb	r1, [r3, #26]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80099ce:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80099d0:	7b1b      	ldrb	r3, [r3, #12]
 80099d2:	b903      	cbnz	r3, 80099d6 <get_fileinfo+0xd8>
 80099d4:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 80099d6:	4422      	add	r2, r4
 80099d8:	2500      	movs	r5, #0
 80099da:	7355      	strb	r5, [r2, #13]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80099dc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80099de:	7adb      	ldrb	r3, [r3, #11]
 80099e0:	7323      	strb	r3, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80099e2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80099e4:	301c      	adds	r0, #28
 80099e6:	f7fe f9ae 	bl	8007d46 <ld_dword>
 80099ea:	6020      	str	r0, [r4, #0]
 80099ec:	6065      	str	r5, [r4, #4]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80099ee:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80099f0:	3016      	adds	r0, #22
 80099f2:	f7fe f9a8 	bl	8007d46 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80099f6:	8160      	strh	r0, [r4, #10]
 80099f8:	0c00      	lsrs	r0, r0, #16
 80099fa:	8120      	strh	r0, [r4, #8]
}
 80099fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a00 <xname_sum>:
{
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4604      	mov	r4, r0
	WORD sum = 0;
 8009a04:	2500      	movs	r5, #0
	while ((chr = *name++) != 0) {
 8009a06:	e011      	b.n	8009a2c <xname_sum+0x2c>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8009a08:	f001 fae4 	bl	800afd4 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8009a0c:	086b      	lsrs	r3, r5, #1
 8009a0e:	eb03 33c5 	add.w	r3, r3, r5, lsl #15
 8009a12:	b2c2      	uxtb	r2, r0
 8009a14:	fa12 f383 	uxtah	r3, r2, r3
 8009a18:	b29a      	uxth	r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8009a1a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8009a1e:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 8009a22:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8009a26:	fa10 f383 	uxtah	r3, r0, r3
 8009a2a:	b29d      	uxth	r5, r3
	while ((chr = *name++) != 0) {
 8009a2c:	f834 0b02 	ldrh.w	r0, [r4], #2
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d1e9      	bne.n	8009a08 <xname_sum+0x8>
}
 8009a34:	4628      	mov	r0, r5
 8009a36:	bd38      	pop	{r3, r4, r5, pc}

08009a38 <create_xdir>:
{
 8009a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a3c:	4607      	mov	r7, r0
 8009a3e:	4688      	mov	r8, r1
	mem_set(dirb, 0, 2 * SZDIRE);
 8009a40:	2240      	movs	r2, #64	; 0x40
 8009a42:	2100      	movs	r1, #0
 8009a44:	f7fe f9d7 	bl	8007df6 <mem_set>
	dirb[XDIR_Type] = 0x85;
 8009a48:	2385      	movs	r3, #133	; 0x85
 8009a4a:	703b      	strb	r3, [r7, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8009a4c:	23c0      	movs	r3, #192	; 0xc0
 8009a4e:	f887 3020 	strb.w	r3, [r7, #32]
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8009a52:	2501      	movs	r5, #1
 8009a54:	2600      	movs	r6, #0
 8009a56:	46a9      	mov	r9, r5
 8009a58:	2440      	movs	r4, #64	; 0x40
 8009a5a:	e017      	b.n	8009a8c <create_xdir+0x54>
			st_word(dirb + i, chr); 		/* Store it */
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	1938      	adds	r0, r7, r4
 8009a60:	f7fe f99e 	bl	8007da0 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8009a64:	3402      	adds	r4, #2
 8009a66:	f014 0f1f 	tst.w	r4, #31
 8009a6a:	d008      	beq.n	8009a7e <create_xdir+0x46>
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8009a6c:	2d00      	cmp	r5, #0
 8009a6e:	d0f5      	beq.n	8009a5c <create_xdir+0x24>
 8009a70:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8009a74:	2d00      	cmp	r5, #0
 8009a76:	d0f1      	beq.n	8009a5c <create_xdir+0x24>
 8009a78:	3601      	adds	r6, #1
 8009a7a:	b2f6      	uxtb	r6, r6
 8009a7c:	e7ee      	b.n	8009a5c <create_xdir+0x24>
		nb++;
 8009a7e:	f109 0901 	add.w	r9, r9, #1
 8009a82:	fa5f f989 	uxtb.w	r9, r9
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8009a86:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8009a8a:	b133      	cbz	r3, 8009a9a <create_xdir+0x62>
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8009a8c:	1c63      	adds	r3, r4, #1
 8009a8e:	22c1      	movs	r2, #193	; 0xc1
 8009a90:	553a      	strb	r2, [r7, r4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	54fa      	strb	r2, [r7, r3]
 8009a96:	3402      	adds	r4, #2
 8009a98:	e7e8      	b.n	8009a6c <create_xdir+0x34>
	dirb[XDIR_NumName] = nc;	/* Set name length */
 8009a9a:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8009a9e:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	f7ff ffac 	bl	8009a00 <xname_sum>
 8009aa8:	4601      	mov	r1, r0
 8009aaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009aae:	f7fe f977 	bl	8007da0 <st_word>
}
 8009ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08009ab8 <cmp_lfn>:
{
 8009ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009abc:	4681      	mov	r9, r0
 8009abe:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009ac0:	f101 001a 	add.w	r0, r1, #26
 8009ac4:	f7fe f93a 	bl	8007d3c <ld_word>
 8009ac8:	bbc8      	cbnz	r0, 8009b3e <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009aca:	783e      	ldrb	r6, [r7, #0]
 8009acc:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8009ad0:	3e01      	subs	r6, #1
 8009ad2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8009ad6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009ada:	f04f 0801 	mov.w	r8, #1
 8009ade:	2500      	movs	r5, #0
 8009ae0:	e006      	b.n	8009af0 <cmp_lfn+0x38>
				return 0;					/* Not matched */
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	e02c      	b.n	8009b40 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009aea:	4298      	cmp	r0, r3
 8009aec:	d12a      	bne.n	8009b44 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009aee:	3501      	adds	r5, #1
 8009af0:	2d0c      	cmp	r5, #12
 8009af2:	d818      	bhi.n	8009b26 <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009af4:	4b17      	ldr	r3, [pc, #92]	; (8009b54 <cmp_lfn+0x9c>)
 8009af6:	5d58      	ldrb	r0, [r3, r5]
 8009af8:	4438      	add	r0, r7
 8009afa:	f7fe f91f 	bl	8007d3c <ld_word>
 8009afe:	4604      	mov	r4, r0
		if (wc) {
 8009b00:	f1b8 0f00 	cmp.w	r8, #0
 8009b04:	d0ef      	beq.n	8009ae6 <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009b06:	2efe      	cmp	r6, #254	; 0xfe
 8009b08:	d8eb      	bhi.n	8009ae2 <cmp_lfn+0x2a>
 8009b0a:	f001 fa63 	bl	800afd4 <ff_wtoupper>
 8009b0e:	4680      	mov	r8, r0
 8009b10:	f106 0a01 	add.w	sl, r6, #1
 8009b14:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 8009b18:	f001 fa5c 	bl	800afd4 <ff_wtoupper>
 8009b1c:	4580      	cmp	r8, r0
 8009b1e:	d1e0      	bne.n	8009ae2 <cmp_lfn+0x2a>
			wc = uc;
 8009b20:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009b22:	4656      	mov	r6, sl
 8009b24:	e7e3      	b.n	8009aee <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009b26:	783b      	ldrb	r3, [r7, #0]
 8009b28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009b2c:	d00c      	beq.n	8009b48 <cmp_lfn+0x90>
 8009b2e:	f1b8 0f00 	cmp.w	r8, #0
 8009b32:	d00b      	beq.n	8009b4c <cmp_lfn+0x94>
 8009b34:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 8009b38:	b953      	cbnz	r3, 8009b50 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 8009b3a:	2001      	movs	r0, #1
 8009b3c:	e000      	b.n	8009b40 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009b3e:	2000      	movs	r0, #0
}
 8009b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009b44:	2000      	movs	r0, #0
 8009b46:	e7fb      	b.n	8009b40 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 8009b48:	2001      	movs	r0, #1
 8009b4a:	e7f9      	b.n	8009b40 <cmp_lfn+0x88>
 8009b4c:	2001      	movs	r0, #1
 8009b4e:	e7f7      	b.n	8009b40 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009b50:	2000      	movs	r0, #0
 8009b52:	e7f5      	b.n	8009b40 <cmp_lfn+0x88>
 8009b54:	0800c3b4 	.word	0x0800c3b4

08009b58 <dir_find>:
{
 8009b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8009b5e:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009b60:	2100      	movs	r1, #0
 8009b62:	f7ff f973 	bl	8008e4c <dir_sdi>
	if (res != FR_OK) return res;
 8009b66:	4606      	mov	r6, r0
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	f040 80ab 	bne.w	8009cc4 <dir_find+0x16c>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009b6e:	783b      	ldrb	r3, [r7, #0]
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	d006      	beq.n	8009b82 <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295
 8009b78:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009b7a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8009b7e:	46c8      	mov	r8, r9
 8009b80:	e046      	b.n	8009c10 <dir_find+0xb8>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8009b82:	6938      	ldr	r0, [r7, #16]
 8009b84:	f7ff ff3c 	bl	8009a00 <xname_sum>
 8009b88:	4683      	mov	fp, r0
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009b8a:	e020      	b.n	8009bce <dir_find+0x76>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8009b8c:	6978      	ldr	r0, [r7, #20]
 8009b8e:	4440      	add	r0, r8
 8009b90:	f7fe f8d4 	bl	8007d3c <ld_word>
 8009b94:	f001 fa1e 	bl	800afd4 <ff_wtoupper>
 8009b98:	4681      	mov	r9, r0
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	f833 001a 	ldrh.w	r0, [r3, sl, lsl #1]
 8009ba0:	f001 fa18 	bl	800afd4 <ff_wtoupper>
 8009ba4:	4581      	cmp	r9, r0
 8009ba6:	d10c      	bne.n	8009bc2 <dir_find+0x6a>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009ba8:	3d01      	subs	r5, #1
 8009baa:	b2ed      	uxtb	r5, r5
 8009bac:	f108 0802 	add.w	r8, r8, #2
 8009bb0:	f10a 0a01 	add.w	sl, sl, #1
 8009bb4:	b12d      	cbz	r5, 8009bc2 <dir_find+0x6a>
				if ((di % SZDIRE) == 0) di += 2;
 8009bb6:	f018 0f1f 	tst.w	r8, #31
 8009bba:	d1e7      	bne.n	8009b8c <dir_find+0x34>
 8009bbc:	f108 0802 	add.w	r8, r8, #2
 8009bc0:	e7e4      	b.n	8009b8c <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8009bc2:	b925      	cbnz	r5, 8009bce <dir_find+0x76>
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d07a      	beq.n	8009cc4 <dir_find+0x16c>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009bce:	2100      	movs	r1, #0
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f7ff fc12 	bl	80093fa <dir_read>
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d173      	bne.n	8009cc4 <dir_find+0x16c>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009bdc:	697d      	ldr	r5, [r7, #20]
 8009bde:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009be2:	f7fe f8ab 	bl	8007d3c <ld_word>
 8009be6:	4558      	cmp	r0, fp
 8009be8:	d1f1      	bne.n	8009bce <dir_find+0x76>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009bea:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 8009bee:	f04f 0a00 	mov.w	sl, #0
 8009bf2:	f04f 0840 	mov.w	r8, #64	; 0x40
 8009bf6:	e7dd      	b.n	8009bb4 <dir_find+0x5c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfc:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009bfe:	f04f 08ff 	mov.w	r8, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8009c02:	2100      	movs	r1, #0
 8009c04:	4620      	mov	r0, r4
 8009c06:	f7ff face 	bl	80091a6 <dir_next>
	} while (res == FR_OK);
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d159      	bne.n	8009cc4 <dir_find+0x16c>
		res = move_window(fs, dp->sect);
 8009c10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009c12:	4638      	mov	r0, r7
 8009c14:	f7fe fc10 	bl	8008438 <move_window>
		if (res != FR_OK) break;
 8009c18:	4606      	mov	r6, r0
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d152      	bne.n	8009cc4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009c1e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8009c20:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d04d      	beq.n	8009cc2 <dir_find+0x16a>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009c26:	7ae9      	ldrb	r1, [r5, #11]
 8009c28:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 8009c2c:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009c2e:	2be5      	cmp	r3, #229	; 0xe5
 8009c30:	d0e2      	beq.n	8009bf8 <dir_find+0xa0>
 8009c32:	f011 0f08 	tst.w	r1, #8
 8009c36:	d001      	beq.n	8009c3c <dir_find+0xe4>
 8009c38:	2a0f      	cmp	r2, #15
 8009c3a:	d1dd      	bne.n	8009bf8 <dir_find+0xa0>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009c3c:	2a0f      	cmp	r2, #15
 8009c3e:	d019      	beq.n	8009c74 <dir_find+0x11c>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009c40:	f1b8 0f00 	cmp.w	r8, #0
 8009c44:	d104      	bne.n	8009c50 <dir_find+0xf8>
 8009c46:	4628      	mov	r0, r5
 8009c48:	f7fe faeb 	bl	8008222 <sum_sfn>
 8009c4c:	4548      	cmp	r0, r9
 8009c4e:	d039      	beq.n	8009cc4 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009c50:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8009c54:	f013 0f01 	tst.w	r3, #1
 8009c58:	d106      	bne.n	8009c68 <dir_find+0x110>
 8009c5a:	220b      	movs	r2, #11
 8009c5c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8009c60:	4628      	mov	r0, r5
 8009c62:	f7fe f8cd 	bl	8007e00 <mem_cmp>
 8009c66:	b368      	cbz	r0, 8009cc4 <dir_find+0x16c>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009c68:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009c6e:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8009c72:	e7c6      	b.n	8009c02 <dir_find+0xaa>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009c74:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 8009c78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009c7c:	d1c1      	bne.n	8009c02 <dir_find+0xaa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009c7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009c82:	d006      	beq.n	8009c92 <dir_find+0x13a>
						sum = dp->dir[LDIR_Chksum];
 8009c84:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009c88:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009c8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009c8e:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009c90:	4698      	mov	r8, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009c92:	4543      	cmp	r3, r8
 8009c94:	d002      	beq.n	8009c9c <dir_find+0x144>
 8009c96:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8009c9a:	e7b2      	b.n	8009c02 <dir_find+0xaa>
 8009c9c:	7b6b      	ldrb	r3, [r5, #13]
 8009c9e:	454b      	cmp	r3, r9
 8009ca0:	d002      	beq.n	8009ca8 <dir_find+0x150>
 8009ca2:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8009ca6:	e7ac      	b.n	8009c02 <dir_find+0xaa>
 8009ca8:	4629      	mov	r1, r5
 8009caa:	6938      	ldr	r0, [r7, #16]
 8009cac:	f7ff ff04 	bl	8009ab8 <cmp_lfn>
 8009cb0:	b120      	cbz	r0, 8009cbc <dir_find+0x164>
 8009cb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009cb6:	fa5f f888 	uxtb.w	r8, r8
 8009cba:	e7a2      	b.n	8009c02 <dir_find+0xaa>
 8009cbc:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8009cc0:	e79f      	b.n	8009c02 <dir_find+0xaa>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009cc2:	2604      	movs	r6, #4
}
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cca <follow_path>:
{
 8009cca:	b530      	push	{r4, r5, lr}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	4604      	mov	r4, r0
 8009cd0:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8009cd2:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009cd4:	e001      	b.n	8009cda <follow_path+0x10>
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	9b01      	ldr	r3, [sp, #4]
 8009cdc:	781a      	ldrb	r2, [r3, #0]
 8009cde:	2a2f      	cmp	r2, #47	; 0x2f
 8009ce0:	d0f9      	beq.n	8009cd6 <follow_path+0xc>
 8009ce2:	2a5c      	cmp	r2, #92	; 0x5c
 8009ce4:	d0f7      	beq.n	8009cd6 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	60a2      	str	r2, [r4, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8009cea:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	2b1f      	cmp	r3, #31
 8009cf0:	d82c      	bhi.n	8009d4c <follow_path+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
 8009cf2:	2380      	movs	r3, #128	; 0x80
 8009cf4:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f7ff f8a6 	bl	8008e4c <dir_sdi>
 8009d00:	4603      	mov	r3, r0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	b003      	add	sp, #12
 8009d06:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009d08:	2804      	cmp	r0, #4
 8009d0a:	d1fa      	bne.n	8009d02 <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009d0c:	f012 0f04 	tst.w	r2, #4
 8009d10:	d1f7      	bne.n	8009d02 <follow_path+0x38>
 8009d12:	2305      	movs	r3, #5
 8009d14:	e7f5      	b.n	8009d02 <follow_path+0x38>
				obj->c_scl = obj->sclust;
 8009d16:	68a3      	ldr	r3, [r4, #8]
 8009d18:	6223      	str	r3, [r4, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009d20:	79e2      	ldrb	r2, [r4, #7]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	6263      	str	r3, [r4, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8009d26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009d28:	62a3      	str	r3, [r4, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8009d2a:	6968      	ldr	r0, [r5, #20]
 8009d2c:	3034      	adds	r0, #52	; 0x34
 8009d2e:	f7fe f80a 	bl	8007d46 <ld_dword>
 8009d32:	60a0      	str	r0, [r4, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8009d34:	696b      	ldr	r3, [r5, #20]
 8009d36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	71e3      	strb	r3, [r4, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8009d40:	6968      	ldr	r0, [r5, #20]
 8009d42:	3038      	adds	r0, #56	; 0x38
 8009d44:	f7fe f80a 	bl	8007d5c <ld_qword>
 8009d48:	e9c4 0104 	strd	r0, r1, [r4, #16]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009d4c:	a901      	add	r1, sp, #4
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f7ff fc72 	bl	8009638 <create_name>
			if (res != FR_OK) break;
 8009d54:	4603      	mov	r3, r0
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d1d3      	bne.n	8009d02 <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f7ff fefc 	bl	8009b58 <dir_find>
			ns = dp->fn[NSFLAG];
 8009d60:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 8009d64:	4603      	mov	r3, r0
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d1ce      	bne.n	8009d08 <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009d6a:	f012 0f04 	tst.w	r2, #4
 8009d6e:	d1c8      	bne.n	8009d02 <follow_path+0x38>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009d70:	79a3      	ldrb	r3, [r4, #6]
 8009d72:	f013 0f10 	tst.w	r3, #16
 8009d76:	d010      	beq.n	8009d9a <follow_path+0xd0>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8009d78:	782b      	ldrb	r3, [r5, #0]
 8009d7a:	2b04      	cmp	r3, #4
 8009d7c:	d0cb      	beq.n	8009d16 <follow_path+0x4c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009d7e:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 8009d82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009d84:	89aa      	ldrh	r2, [r5, #12]
 8009d86:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d8a:	fb02 3310 	mls	r3, r2, r0, r3
 8009d8e:	4419      	add	r1, r3
 8009d90:	4628      	mov	r0, r5
 8009d92:	f7fe f94c 	bl	800802e <ld_clust>
 8009d96:	60a0      	str	r0, [r4, #8]
 8009d98:	e7d8      	b.n	8009d4c <follow_path+0x82>
				res = FR_NO_PATH; break;
 8009d9a:	2305      	movs	r3, #5
 8009d9c:	e7b1      	b.n	8009d02 <follow_path+0x38>
	...

08009da0 <dir_register>:
{
 8009da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009da4:	b09b      	sub	sp, #108	; 0x6c
	FATFS *fs = dp->obj.fs;
 8009da6:	6805      	ldr	r5, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009da8:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8009dac:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8009db0:	f040 80eb 	bne.w	8009f8a <dir_register+0x1ea>
 8009db4:	4606      	mov	r6, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009db6:	2400      	movs	r4, #0
 8009db8:	e000      	b.n	8009dbc <dir_register+0x1c>
 8009dba:	3401      	adds	r4, #1
 8009dbc:	692b      	ldr	r3, [r5, #16]
 8009dbe:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1f9      	bne.n	8009dba <dir_register+0x1a>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009dc6:	782b      	ldrb	r3, [r5, #0]
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	d022      	beq.n	8009e12 <dir_register+0x72>
	mem_cpy(sn, dp->fn, 12);
 8009dcc:	f106 0740 	add.w	r7, r6, #64	; 0x40
 8009dd0:	220c      	movs	r2, #12
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	a817      	add	r0, sp, #92	; 0x5c
 8009dd6:	f7fe f804 	bl	8007de2 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009dda:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8009dde:	f013 0f01 	tst.w	r3, #1
 8009de2:	d076      	beq.n	8009ed2 <dir_register+0x132>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009de4:	2340      	movs	r3, #64	; 0x40
 8009de6:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8009dea:	f04f 0801 	mov.w	r8, #1
 8009dee:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8009df2:	d864      	bhi.n	8009ebe <dir_register+0x11e>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009df4:	4643      	mov	r3, r8
 8009df6:	692a      	ldr	r2, [r5, #16]
 8009df8:	a917      	add	r1, sp, #92	; 0x5c
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	f7fe f9bc 	bl	8008178 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009e00:	4630      	mov	r0, r6
 8009e02:	f7ff fea9 	bl	8009b58 <dir_find>
			if (res != FR_OK) break;
 8009e06:	4681      	mov	r9, r0
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d158      	bne.n	8009ebe <dir_register+0x11e>
		for (n = 1; n < 100; n++) {
 8009e0c:	f108 0801 	add.w	r8, r8, #1
 8009e10:	e7ed      	b.n	8009dee <dir_register+0x4e>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8009e12:	340e      	adds	r4, #14
 8009e14:	4b60      	ldr	r3, [pc, #384]	; (8009f98 <dir_register+0x1f8>)
 8009e16:	fba3 3404 	umull	r3, r4, r3, r4
 8009e1a:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8009e1c:	1ca1      	adds	r1, r4, #2
 8009e1e:	4630      	mov	r0, r6
 8009e20:	f7ff fb60 	bl	80094e4 <dir_alloc>
		if (res != FR_OK) return res;
 8009e24:	4681      	mov	r9, r0
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d169      	bne.n	8009efe <dir_register+0x15e>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8009e2a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8009e2c:	3401      	adds	r4, #1
 8009e2e:	eba3 1344 	sub.w	r3, r3, r4, lsl #5
 8009e32:	64f3      	str	r3, [r6, #76]	; 0x4c
		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8009e34:	68b3      	ldr	r3, [r6, #8]
 8009e36:	b11b      	cbz	r3, 8009e40 <dir_register+0xa0>
 8009e38:	79f3      	ldrb	r3, [r6, #7]
 8009e3a:	f013 0f04 	tst.w	r3, #4
 8009e3e:	d104      	bne.n	8009e4a <dir_register+0xaa>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8009e40:	6929      	ldr	r1, [r5, #16]
 8009e42:	6968      	ldr	r0, [r5, #20]
 8009e44:	f7ff fdf8 	bl	8009a38 <create_xdir>
		return FR_OK;
 8009e48:	e059      	b.n	8009efe <dir_register+0x15e>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8009e4a:	896a      	ldrh	r2, [r5, #10]
 8009e4c:	89ab      	ldrh	r3, [r5, #12]
 8009e4e:	fb03 f202 	mul.w	r2, r3, r2
 8009e52:	6933      	ldr	r3, [r6, #16]
 8009e54:	6971      	ldr	r1, [r6, #20]
 8009e56:	189b      	adds	r3, r3, r2
 8009e58:	f141 0100 	adc.w	r1, r1, #0
 8009e5c:	6133      	str	r3, [r6, #16]
 8009e5e:	6171      	str	r1, [r6, #20]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7fe ff06 	bl	8008c72 <fill_first_frag>
			if (res != FR_OK) return res;
 8009e66:	b108      	cbz	r0, 8009e6c <dir_register+0xcc>
 8009e68:	4681      	mov	r9, r0
 8009e6a:	e048      	b.n	8009efe <dir_register+0x15e>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8009e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e70:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8009e72:	4630      	mov	r0, r6
 8009e74:	f7fe fee5 	bl	8008c42 <fill_last_frag>
			if (res != FR_OK) return res;
 8009e78:	b108      	cbz	r0, 8009e7e <dir_register+0xde>
 8009e7a:	4681      	mov	r9, r0
 8009e7c:	e03f      	b.n	8009efe <dir_register+0x15e>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4668      	mov	r0, sp
 8009e82:	f7ff faa1 	bl	80093c8 <load_obj_dir>
			if (res != FR_OK) return res;
 8009e86:	b108      	cbz	r0, 8009e8c <dir_register+0xec>
 8009e88:	4681      	mov	r9, r0
 8009e8a:	e038      	b.n	8009efe <dir_register+0x15e>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8009e8c:	6968      	ldr	r0, [r5, #20]
 8009e8e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8009e92:	3038      	adds	r0, #56	; 0x38
 8009e94:	f7fd ff92 	bl	8007dbc <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8009e98:	6968      	ldr	r0, [r5, #20]
 8009e9a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8009e9e:	3028      	adds	r0, #40	; 0x28
 8009ea0:	f7fd ff8c 	bl	8007dbc <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8009ea4:	79f3      	ldrb	r3, [r6, #7]
 8009ea6:	696a      	ldr	r2, [r5, #20]
 8009ea8:	f043 0301 	orr.w	r3, r3, #1
 8009eac:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
			res = store_xdir(&dj);							/* Store the object status */
 8009eb0:	4668      	mov	r0, sp
 8009eb2:	f7ff fb4d 	bl	8009550 <store_xdir>
			if (res != FR_OK) return res;
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d0c2      	beq.n	8009e40 <dir_register+0xa0>
 8009eba:	4681      	mov	r9, r0
 8009ebc:	e01f      	b.n	8009efe <dir_register+0x15e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009ebe:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 8009ec2:	d065      	beq.n	8009f90 <dir_register+0x1f0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009ec4:	f1b9 0f04 	cmp.w	r9, #4
 8009ec8:	d119      	bne.n	8009efe <dir_register+0x15e>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009eca:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8009ece:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009ed2:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8009ed6:	f013 0f02 	tst.w	r3, #2
 8009eda:	d014      	beq.n	8009f06 <dir_register+0x166>
 8009edc:	340c      	adds	r4, #12
 8009ede:	4b2f      	ldr	r3, [pc, #188]	; (8009f9c <dir_register+0x1fc>)
 8009ee0:	fba3 3404 	umull	r3, r4, r3, r4
 8009ee4:	08a4      	lsrs	r4, r4, #2
 8009ee6:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4630      	mov	r0, r6
 8009eec:	f7ff fafa 	bl	80094e4 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009ef0:	4681      	mov	r9, r0
 8009ef2:	b908      	cbnz	r0, 8009ef8 <dir_register+0x158>
 8009ef4:	3c01      	subs	r4, #1
 8009ef6:	d108      	bne.n	8009f0a <dir_register+0x16a>
	if (res == FR_OK) {
 8009ef8:	f1b9 0f00 	cmp.w	r9, #0
 8009efc:	d02b      	beq.n	8009f56 <dir_register+0x1b6>
}
 8009efe:	4648      	mov	r0, r9
 8009f00:	b01b      	add	sp, #108	; 0x6c
 8009f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009f06:	2401      	movs	r4, #1
 8009f08:	e7ee      	b.n	8009ee8 <dir_register+0x148>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009f0a:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8009f0c:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7fe ff9b 	bl	8008e4c <dir_sdi>
		if (res == FR_OK) {
 8009f16:	4681      	mov	r9, r0
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d1ed      	bne.n	8009ef8 <dir_register+0x158>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	f7fe f980 	bl	8008222 <sum_sfn>
 8009f22:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 8009f24:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8009f26:	4628      	mov	r0, r5
 8009f28:	f7fe fa86 	bl	8008438 <move_window>
				if (res != FR_OK) break;
 8009f2c:	4681      	mov	r9, r0
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d1e2      	bne.n	8009ef8 <dir_register+0x158>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009f32:	4643      	mov	r3, r8
 8009f34:	b2e2      	uxtb	r2, r4
 8009f36:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8009f38:	6928      	ldr	r0, [r5, #16]
 8009f3a:	f7fe f8e1 	bl	8008100 <put_lfn>
				fs->wflag = 1;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009f42:	2100      	movs	r1, #0
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7ff f92e 	bl	80091a6 <dir_next>
			} while (res == FR_OK && --nent);
 8009f4a:	4681      	mov	r9, r0
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d1d3      	bne.n	8009ef8 <dir_register+0x158>
 8009f50:	3c01      	subs	r4, #1
 8009f52:	d1e7      	bne.n	8009f24 <dir_register+0x184>
 8009f54:	e7d0      	b.n	8009ef8 <dir_register+0x158>
		res = move_window(fs, dp->sect);
 8009f56:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f7fe fa6d 	bl	8008438 <move_window>
		if (res == FR_OK) {
 8009f5e:	4681      	mov	r9, r0
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d1cc      	bne.n	8009efe <dir_register+0x15e>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009f64:	2220      	movs	r2, #32
 8009f66:	2100      	movs	r1, #0
 8009f68:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8009f6a:	f7fd ff44 	bl	8007df6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009f6e:	220b      	movs	r2, #11
 8009f70:	4639      	mov	r1, r7
 8009f72:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8009f74:	f7fd ff35 	bl	8007de2 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009f78:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
 8009f7c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8009f7e:	f003 0318 	and.w	r3, r3, #24
 8009f82:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8009f84:	2301      	movs	r3, #1
 8009f86:	70eb      	strb	r3, [r5, #3]
 8009f88:	e7b9      	b.n	8009efe <dir_register+0x15e>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009f8a:	f04f 0906 	mov.w	r9, #6
 8009f8e:	e7b6      	b.n	8009efe <dir_register+0x15e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009f90:	f04f 0907 	mov.w	r9, #7
 8009f94:	e7b3      	b.n	8009efe <dir_register+0x15e>
 8009f96:	bf00      	nop
 8009f98:	88888889 	.word	0x88888889
 8009f9c:	4ec4ec4f 	.word	0x4ec4ec4f

08009fa0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	9001      	str	r0, [sp, #4]
 8009fa6:	9100      	str	r1, [sp, #0]
 8009fa8:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009faa:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009fac:	a803      	add	r0, sp, #12
 8009fae:	f7fe f9cc 	bl	800834a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009fb2:	1e04      	subs	r4, r0, #0
 8009fb4:	db1c      	blt.n	8009ff0 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009fb6:	4b10      	ldr	r3, [pc, #64]	; (8009ff8 <f_mount+0x58>)
 8009fb8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 8009fbc:	b125      	cbz	r5, 8009fc8 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f7fd ffec 	bl	8007f9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 8009fc8:	9b01      	ldr	r3, [sp, #4]
 8009fca:	b10b      	cbz	r3, 8009fd0 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8009fcc:	2200      	movs	r2, #0
 8009fce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009fd0:	9b01      	ldr	r3, [sp, #4]
 8009fd2:	4a09      	ldr	r2, [pc, #36]	; (8009ff8 <f_mount+0x58>)
 8009fd4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009fd8:	b163      	cbz	r3, 8009ff4 <f_mount+0x54>
 8009fda:	2e01      	cmp	r6, #1
 8009fdc:	d002      	beq.n	8009fe4 <f_mount+0x44>
 8009fde:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8009fe0:	b004      	add	sp, #16
 8009fe2:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	a901      	add	r1, sp, #4
 8009fe8:	4668      	mov	r0, sp
 8009fea:	f7fe fa87 	bl	80084fc <find_volume>
	LEAVE_FF(fs, res);
 8009fee:	e7f7      	b.n	8009fe0 <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ff0:	200b      	movs	r0, #11
 8009ff2:	e7f5      	b.n	8009fe0 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e7f3      	b.n	8009fe0 <f_mount+0x40>
 8009ff8:	20004ca8 	.word	0x20004ca8

08009ffc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a000:	b09b      	sub	sp, #108	; 0x6c
 800a002:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a004:	2800      	cmp	r0, #0
 800a006:	f000 81b4 	beq.w	800a372 <f_open+0x376>
 800a00a:	4616      	mov	r6, r2
 800a00c:	4605      	mov	r5, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a00e:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800a012:	463a      	mov	r2, r7
 800a014:	a903      	add	r1, sp, #12
 800a016:	a801      	add	r0, sp, #4
 800a018:	f7fe fa70 	bl	80084fc <find_volume>
	if (res == FR_OK) {
 800a01c:	4604      	mov	r4, r0
 800a01e:	b130      	cbz	r0, 800a02e <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a020:	b10c      	cbz	r4, 800a026 <f_open+0x2a>
 800a022:	2300      	movs	r3, #0
 800a024:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 800a026:	4620      	mov	r0, r4
 800a028:	b01b      	add	sp, #108	; 0x6c
 800a02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a032:	9901      	ldr	r1, [sp, #4]
 800a034:	a804      	add	r0, sp, #16
 800a036:	f7ff fe48 	bl	8009cca <follow_path>
		if (res == FR_OK) {
 800a03a:	4604      	mov	r4, r0
 800a03c:	b960      	cbnz	r0, 800a058 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a03e:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
 800a042:	2b00      	cmp	r3, #0
 800a044:	db5d      	blt.n	800a102 <f_open+0x106>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a046:	f037 0301 	bics.w	r3, r7, #1
 800a04a:	bf14      	ite	ne
 800a04c:	2101      	movne	r1, #1
 800a04e:	2100      	moveq	r1, #0
 800a050:	a804      	add	r0, sp, #16
 800a052:	f7fd feeb 	bl	8007e2c <chk_lock>
 800a056:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a058:	f016 0f1c 	tst.w	r6, #28
 800a05c:	f000 80bb 	beq.w	800a1d6 <f_open+0x1da>
			if (res != FR_OK) {					/* No file, create new */
 800a060:	2c00      	cmp	r4, #0
 800a062:	d05a      	beq.n	800a11a <f_open+0x11e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a064:	2c04      	cmp	r4, #4
 800a066:	d04e      	beq.n	800a106 <f_open+0x10a>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a068:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a06c:	2c00      	cmp	r4, #0
 800a06e:	f040 80c1 	bne.w	800a1f4 <f_open+0x1f8>
 800a072:	f017 0f08 	tst.w	r7, #8
 800a076:	f000 80bd 	beq.w	800a1f4 <f_open+0x1f8>
				dw = GET_FATTIME();
 800a07a:	f7fc fc37 	bl	80068ec <get_fattime>
 800a07e:	4606      	mov	r6, r0
				if (fs->fs_type == FS_EXFAT) {
 800a080:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a084:	f898 3000 	ldrb.w	r3, [r8]
 800a088:	2b04      	cmp	r3, #4
 800a08a:	d050      	beq.n	800a12e <f_open+0x132>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a08c:	4601      	mov	r1, r0
 800a08e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a090:	300e      	adds	r0, #14
 800a092:	f7fd fe89 	bl	8007da8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a096:	4631      	mov	r1, r6
 800a098:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a09a:	3016      	adds	r0, #22
 800a09c:	f7fd fe84 	bl	8007da8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a0a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a0a6:	9e03      	ldr	r6, [sp, #12]
 800a0a8:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800a0ac:	4641      	mov	r1, r8
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f7fd ffbd 	bl	800802e <ld_clust>
 800a0b4:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	4641      	mov	r1, r8
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f7fd ffca 	bl	8008054 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a0c4:	301c      	adds	r0, #28
 800a0c6:	f7fd fe6f 	bl	8007da8 <st_dword>
					fs->wflag = 1;
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800a0d0:	f1b9 0f00 	cmp.w	r9, #0
 800a0d4:	f000 808e 	beq.w	800a1f4 <f_open+0x1f8>
						dw = fs->winsect;
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	6b9e      	ldr	r6, [r3, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4649      	mov	r1, r9
 800a0e0:	a804      	add	r0, sp, #16
 800a0e2:	f7fe ffe1 	bl	80090a8 <remove_chain>
						if (res == FR_OK) {
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	f040 8083 	bne.w	800a1f4 <f_open+0x1f8>
							res = move_window(fs, dw);
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	9803      	ldr	r0, [sp, #12]
 800a0f2:	f7fe f9a1 	bl	8008438 <move_window>
 800a0f6:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a0f8:	f109 33ff 	add.w	r3, r9, #4294967295
 800a0fc:	9a03      	ldr	r2, [sp, #12]
 800a0fe:	6193      	str	r3, [r2, #24]
 800a100:	e078      	b.n	800a1f4 <f_open+0x1f8>
				res = FR_INVALID_NAME;
 800a102:	2406      	movs	r4, #6
 800a104:	e7a8      	b.n	800a058 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a106:	f7fd fecb 	bl	8007ea0 <enq_lock>
 800a10a:	b908      	cbnz	r0, 800a110 <f_open+0x114>
 800a10c:	2412      	movs	r4, #18
 800a10e:	e7ab      	b.n	800a068 <f_open+0x6c>
 800a110:	a804      	add	r0, sp, #16
 800a112:	f7ff fe45 	bl	8009da0 <dir_register>
 800a116:	4604      	mov	r4, r0
 800a118:	e7a6      	b.n	800a068 <f_open+0x6c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a11a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a11e:	f013 0f11 	tst.w	r3, #17
 800a122:	d166      	bne.n	800a1f2 <f_open+0x1f6>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a124:	f016 0f04 	tst.w	r6, #4
 800a128:	d0a0      	beq.n	800a06c <f_open+0x70>
 800a12a:	2408      	movs	r4, #8
 800a12c:	e062      	b.n	800a1f4 <f_open+0x1f8>
					fp->obj.fs = fs;
 800a12e:	f8c5 8000 	str.w	r8, [r5]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800a132:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800a136:	3034      	adds	r0, #52	; 0x34
 800a138:	f7fd fe05 	bl	8007d46 <ld_dword>
 800a13c:	60a8      	str	r0, [r5, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a13e:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800a142:	3038      	adds	r0, #56	; 0x38
 800a144:	f7fd fe0a 	bl	8007d5c <ld_qword>
 800a148:	e9c5 0104 	strd	r0, r1, [r5, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a14c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a150:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a154:	f003 0302 	and.w	r3, r3, #2
 800a158:	71eb      	strb	r3, [r5, #7]
					fp->obj.n_frag = 0;
 800a15a:	61ec      	str	r4, [r5, #28]
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800a15c:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800a160:	4631      	mov	r1, r6
 800a162:	3008      	adds	r0, #8
 800a164:	f7fd fe20 	bl	8007da8 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	695a      	ldr	r2, [r3, #20]
 800a16c:	7514      	strb	r4, [r2, #20]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800a16e:	6958      	ldr	r0, [r3, #20]
 800a170:	4631      	mov	r1, r6
 800a172:	300c      	adds	r0, #12
 800a174:	f7fd fe18 	bl	8007da8 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	695a      	ldr	r2, [r3, #20]
 800a17c:	7554      	strb	r4, [r2, #21]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800a17e:	695a      	ldr	r2, [r3, #20]
 800a180:	2120      	movs	r1, #32
 800a182:	7111      	strb	r1, [r2, #4]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800a184:	6958      	ldr	r0, [r3, #20]
 800a186:	4621      	mov	r1, r4
 800a188:	3034      	adds	r0, #52	; 0x34
 800a18a:	f7fd fe0d 	bl	8007da8 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800a18e:	9b03      	ldr	r3, [sp, #12]
 800a190:	6958      	ldr	r0, [r3, #20]
 800a192:	2200      	movs	r2, #0
 800a194:	2300      	movs	r3, #0
 800a196:	3038      	adds	r0, #56	; 0x38
 800a198:	f7fd fe10 	bl	8007dbc <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	6958      	ldr	r0, [r3, #20]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	3028      	adds	r0, #40	; 0x28
 800a1a6:	f7fd fe09 	bl	8007dbc <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800a1aa:	9b03      	ldr	r3, [sp, #12]
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
 800a1b4:	a804      	add	r0, sp, #16
 800a1b6:	f7ff f9cb 	bl	8009550 <store_xdir>
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	b9d0      	cbnz	r0, 800a1f4 <f_open+0x1f8>
 800a1be:	68a9      	ldr	r1, [r5, #8]
 800a1c0:	b1c1      	cbz	r1, 800a1f4 <f_open+0x1f8>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f7fe ff6f 	bl	80090a8 <remove_chain>
 800a1ca:	4604      	mov	r4, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800a1cc:	68ab      	ldr	r3, [r5, #8]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	9a03      	ldr	r2, [sp, #12]
 800a1d2:	6193      	str	r3, [r2, #24]
 800a1d4:	e00e      	b.n	800a1f4 <f_open+0x1f8>
			if (res == FR_OK) {					/* Following succeeded */
 800a1d6:	b96c      	cbnz	r4, 800a1f4 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a1d8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a1dc:	f013 0f10 	tst.w	r3, #16
 800a1e0:	d161      	bne.n	800a2a6 <f_open+0x2aa>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a1e2:	f016 0f02 	tst.w	r6, #2
 800a1e6:	d005      	beq.n	800a1f4 <f_open+0x1f8>
 800a1e8:	f013 0f01 	tst.w	r3, #1
 800a1ec:	d002      	beq.n	800a1f4 <f_open+0x1f8>
						res = FR_DENIED;
 800a1ee:	2407      	movs	r4, #7
 800a1f0:	e017      	b.n	800a222 <f_open+0x226>
					res = FR_DENIED;
 800a1f2:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800a1f4:	b9ac      	cbnz	r4, 800a222 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a1f6:	f017 0f08 	tst.w	r7, #8
 800a1fa:	d001      	beq.n	800a200 <f_open+0x204>
				mode |= FA_MODIFIED;
 800a1fc:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a200:	9b03      	ldr	r3, [sp, #12]
 800a202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a204:	64ab      	str	r3, [r5, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800a206:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a208:	64eb      	str	r3, [r5, #76]	; 0x4c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a20a:	f037 0301 	bics.w	r3, r7, #1
 800a20e:	bf14      	ite	ne
 800a210:	2101      	movne	r1, #1
 800a212:	2100      	moveq	r1, #0
 800a214:	a804      	add	r0, sp, #16
 800a216:	f7fd fe51 	bl	8007ebc <inc_lock>
 800a21a:	62e8      	str	r0, [r5, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a21c:	2800      	cmp	r0, #0
 800a21e:	f000 80a6 	beq.w	800a36e <f_open+0x372>
		if (res == FR_OK) {
 800a222:	2c00      	cmp	r4, #0
 800a224:	f47f aefc 	bne.w	800a020 <f_open+0x24>
			if (fs->fs_type == FS_EXFAT) {
 800a228:	9e03      	ldr	r6, [sp, #12]
 800a22a:	7833      	ldrb	r3, [r6, #0]
 800a22c:	2b04      	cmp	r3, #4
 800a22e:	d03c      	beq.n	800a2aa <f_open+0x2ae>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a230:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800a234:	4641      	mov	r1, r8
 800a236:	4630      	mov	r0, r6
 800a238:	f7fd fef9 	bl	800802e <ld_clust>
 800a23c:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a23e:	f108 001c 	add.w	r0, r8, #28
 800a242:	f7fd fd80 	bl	8007d46 <ld_dword>
 800a246:	6128      	str	r0, [r5, #16]
 800a248:	2300      	movs	r3, #0
 800a24a:	616b      	str	r3, [r5, #20]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a24c:	2100      	movs	r1, #0
 800a24e:	6529      	str	r1, [r5, #80]	; 0x50
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a250:	602e      	str	r6, [r5, #0]
			fp->obj.id = fs->id;
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	88db      	ldrh	r3, [r3, #6]
 800a256:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 800a258:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800a25c:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800a260:	6469      	str	r1, [r5, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a262:	2200      	movs	r2, #0
 800a264:	2300      	movs	r3, #0
 800a266:	e9c5 230e 	strd	r2, r3, [r5, #56]	; 0x38
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a26a:	f105 0954 	add.w	r9, r5, #84	; 0x54
 800a26e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a272:	4648      	mov	r0, r9
 800a274:	f7fd fdbf 	bl	8007df6 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a278:	f017 0f20 	tst.w	r7, #32
 800a27c:	f43f aed0 	beq.w	800a020 <f_open+0x24>
 800a280:	692e      	ldr	r6, [r5, #16]
 800a282:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800a286:	ea56 0308 	orrs.w	r3, r6, r8
 800a28a:	f43f aec9 	beq.w	800a020 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a28e:	63ae      	str	r6, [r5, #56]	; 0x38
 800a290:	f8c5 803c 	str.w	r8, [r5, #60]	; 0x3c
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a294:	9b03      	ldr	r3, [sp, #12]
 800a296:	f8b3 b00a 	ldrh.w	fp, [r3, #10]
 800a29a:	899b      	ldrh	r3, [r3, #12]
 800a29c:	fb03 fb0b 	mul.w	fp, r3, fp
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a2a0:	68af      	ldr	r7, [r5, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	e024      	b.n	800a2f0 <f_open+0x2f4>
					res = FR_NO_FILE;
 800a2a6:	2404      	movs	r4, #4
 800a2a8:	e7bb      	b.n	800a222 <f_open+0x226>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800a2aa:	9b06      	ldr	r3, [sp, #24]
 800a2ac:	622b      	str	r3, [r5, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800a2ae:	9b08      	ldr	r3, [sp, #32]
 800a2b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a2b4:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	626b      	str	r3, [r5, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800a2bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2be:	62ab      	str	r3, [r5, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800a2c0:	6970      	ldr	r0, [r6, #20]
 800a2c2:	3034      	adds	r0, #52	; 0x34
 800a2c4:	f7fd fd3f 	bl	8007d46 <ld_dword>
 800a2c8:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a2ca:	6970      	ldr	r0, [r6, #20]
 800a2cc:	3038      	adds	r0, #56	; 0x38
 800a2ce:	f7fd fd45 	bl	8007d5c <ld_qword>
 800a2d2:	e9c5 0104 	strd	r0, r1, [r5, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a2d6:	6973      	ldr	r3, [r6, #20]
 800a2d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a2dc:	f003 0302 	and.w	r3, r3, #2
 800a2e0:	71eb      	strb	r3, [r5, #7]
 800a2e2:	e7b3      	b.n	800a24c <f_open+0x250>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a2e4:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a2e8:	d012      	beq.n	800a310 <f_open+0x314>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a2ea:	1bf6      	subs	r6, r6, r7
 800a2ec:	f168 0800 	sbc.w	r8, r8, #0
 800a2f0:	b984      	cbnz	r4, 800a314 <f_open+0x318>
 800a2f2:	465f      	mov	r7, fp
 800a2f4:	45b3      	cmp	fp, r6
 800a2f6:	f04f 0300 	mov.w	r3, #0
 800a2fa:	eb73 0308 	sbcs.w	r3, r3, r8
 800a2fe:	d209      	bcs.n	800a314 <f_open+0x318>
					clst = get_fat(&fp->obj, clst);
 800a300:	4628      	mov	r0, r5
 800a302:	f7fe fccf 	bl	8008ca4 <get_fat>
 800a306:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800a308:	2801      	cmp	r0, #1
 800a30a:	d8eb      	bhi.n	800a2e4 <f_open+0x2e8>
 800a30c:	2402      	movs	r4, #2
 800a30e:	e7e9      	b.n	800a2e4 <f_open+0x2e8>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a310:	2401      	movs	r4, #1
 800a312:	e7ea      	b.n	800a2ea <f_open+0x2ee>
				fp->clust = clst;
 800a314:	460f      	mov	r7, r1
 800a316:	6429      	str	r1, [r5, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a318:	2c00      	cmp	r4, #0
 800a31a:	f47f ae81 	bne.w	800a020 <f_open+0x24>
 800a31e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800a322:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 800a326:	465a      	mov	r2, fp
 800a328:	2300      	movs	r3, #0
 800a32a:	4630      	mov	r0, r6
 800a32c:	4641      	mov	r1, r8
 800a32e:	f7f5 ffc7 	bl	80002c0 <__aeabi_uldivmod>
 800a332:	4313      	orrs	r3, r2
 800a334:	f43f ae74 	beq.w	800a020 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a338:	4639      	mov	r1, r7
 800a33a:	4650      	mov	r0, sl
 800a33c:	f7fd fe4a 	bl	8007fd4 <clust2sect>
 800a340:	4607      	mov	r7, r0
 800a342:	b908      	cbnz	r0, 800a348 <f_open+0x34c>
						res = FR_INT_ERR;
 800a344:	2402      	movs	r4, #2
 800a346:	e66c      	b.n	800a022 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a348:	465a      	mov	r2, fp
 800a34a:	2300      	movs	r3, #0
 800a34c:	4630      	mov	r0, r6
 800a34e:	4641      	mov	r1, r8
 800a350:	f7f5 ffb6 	bl	80002c0 <__aeabi_uldivmod>
 800a354:	183a      	adds	r2, r7, r0
 800a356:	646a      	str	r2, [r5, #68]	; 0x44
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a358:	2301      	movs	r3, #1
 800a35a:	4649      	mov	r1, r9
 800a35c:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800a360:	f7fd fcc8 	bl	8007cf4 <disk_read>
 800a364:	2800      	cmp	r0, #0
 800a366:	f43f ae5b 	beq.w	800a020 <f_open+0x24>
 800a36a:	2401      	movs	r4, #1
 800a36c:	e659      	b.n	800a022 <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a36e:	2402      	movs	r4, #2
 800a370:	e656      	b.n	800a020 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800a372:	2409      	movs	r4, #9
 800a374:	e657      	b.n	800a026 <f_open+0x2a>

0800a376 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a376:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a37a:	b085      	sub	sp, #20
 800a37c:	4604      	mov	r4, r0
 800a37e:	468b      	mov	fp, r1
 800a380:	4615      	mov	r5, r2
 800a382:	461e      	mov	r6, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800a384:	2300      	movs	r3, #0
 800a386:	6033      	str	r3, [r6, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a388:	a903      	add	r1, sp, #12
 800a38a:	f7fe f808 	bl	800839e <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a38e:	9001      	str	r0, [sp, #4]
 800a390:	2800      	cmp	r0, #0
 800a392:	d14e      	bne.n	800a432 <f_write+0xbc>
 800a394:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d149      	bne.n	800a432 <f_write+0xbc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a39e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a3a2:	f013 0f02 	tst.w	r3, #2
 800a3a6:	f000 810e 	beq.w	800a5c6 <f_write+0x250>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a3aa:	9b03      	ldr	r3, [sp, #12]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	2b04      	cmp	r3, #4
 800a3b0:	f000 80fe 	beq.w	800a5b0 <f_write+0x23a>
 800a3b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3b6:	42eb      	cmn	r3, r5
 800a3b8:	f0c0 80fc 	bcc.w	800a5b4 <f_write+0x23e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a3bc:	43dd      	mvns	r5, r3
 800a3be:	46b2      	mov	sl, r6
 800a3c0:	e0be      	b.n	800a540 <f_write+0x1ca>
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a3c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d038      	beq.n	800a43a <f_write+0xc4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a3c8:	4632      	mov	r2, r6
 800a3ca:	463b      	mov	r3, r7
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f7fd fe0d 	bl	8007fec <clmt_clust>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	f000 80f0 	beq.w	800a5b8 <f_write+0x242>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a3d8:	2801      	cmp	r0, #1
 800a3da:	d033      	beq.n	800a444 <f_write+0xce>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a3dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a3e0:	d035      	beq.n	800a44e <f_write+0xd8>
				fp->clust = clst;			/* Update current cluster */
 800a3e2:	6420      	str	r0, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a3e4:	68a3      	ldr	r3, [r4, #8]
 800a3e6:	b903      	cbnz	r3, 800a3ea <f_write+0x74>
 800a3e8:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a3ea:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	db32      	blt.n	800a458 <f_write+0xe2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a3f2:	9f03      	ldr	r7, [sp, #12]
 800a3f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	f7fd fdec 	bl	8007fd4 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d03f      	beq.n	800a482 <f_write+0x10c>
			sect += csect;
 800a402:	4446      	add	r6, r8
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a404:	89bb      	ldrh	r3, [r7, #12]
 800a406:	fbb5 f9f3 	udiv	r9, r5, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a40a:	42ab      	cmp	r3, r5
 800a40c:	d856      	bhi.n	800a4bc <f_write+0x146>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a40e:	eb08 0309 	add.w	r3, r8, r9
 800a412:	897a      	ldrh	r2, [r7, #10]
 800a414:	4293      	cmp	r3, r2
 800a416:	d901      	bls.n	800a41c <f_write+0xa6>
					cc = fs->csize - csect;
 800a418:	eba2 0908 	sub.w	r9, r2, r8
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a41c:	464b      	mov	r3, r9
 800a41e:	4632      	mov	r2, r6
 800a420:	4659      	mov	r1, fp
 800a422:	7878      	ldrb	r0, [r7, #1]
 800a424:	f7fd fc72 	bl	8007d0c <disk_write>
 800a428:	b380      	cbz	r0, 800a48c <f_write+0x116>
 800a42a:	2301      	movs	r3, #1
 800a42c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 800a430:	9301      	str	r3, [sp, #4]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800a432:	9801      	ldr	r0, [sp, #4]
 800a434:	b005      	add	sp, #20
 800a436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a43a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a43c:	4620      	mov	r0, r4
 800a43e:	f7fe fd70 	bl	8008f22 <create_chain>
 800a442:	e7c6      	b.n	800a3d2 <f_write+0x5c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a444:	2302      	movs	r3, #2
 800a446:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	e7f1      	b.n	800a432 <f_write+0xbc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a44e:	2301      	movs	r3, #1
 800a450:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	e7ec      	b.n	800a432 <f_write+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a458:	2301      	movs	r3, #1
 800a45a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a45c:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a460:	9803      	ldr	r0, [sp, #12]
 800a462:	7840      	ldrb	r0, [r0, #1]
 800a464:	f7fd fc52 	bl	8007d0c <disk_write>
 800a468:	b930      	cbnz	r0, 800a478 <f_write+0x102>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a46a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a46e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a472:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800a476:	e7bc      	b.n	800a3f2 <f_write+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a478:	2301      	movs	r3, #1
 800a47a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 800a47e:	9301      	str	r3, [sp, #4]
 800a480:	e7d7      	b.n	800a432 <f_write+0xbc>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a482:	2302      	movs	r3, #2
 800a484:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 800a488:	9301      	str	r3, [sp, #4]
 800a48a:	e7d2      	b.n	800a432 <f_write+0xbc>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a48c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a48e:	1b9b      	subs	r3, r3, r6
 800a490:	454b      	cmp	r3, r9
 800a492:	d304      	bcc.n	800a49e <f_write+0x128>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	899e      	ldrh	r6, [r3, #12]
 800a498:	fb09 f606 	mul.w	r6, r9, r6
				continue;
 800a49c:	e036      	b.n	800a50c <f_write+0x196>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a49e:	9a03      	ldr	r2, [sp, #12]
 800a4a0:	8992      	ldrh	r2, [r2, #12]
 800a4a2:	fb02 b103 	mla	r1, r2, r3, fp
 800a4a6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800a4aa:	f7fd fc9a 	bl	8007de2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a4ae:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4b6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800a4ba:	e7eb      	b.n	800a494 <f_write+0x11e>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a4bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a4be:	42b3      	cmp	r3, r6
 800a4c0:	d006      	beq.n	800a4d0 <f_write+0x15a>
				fp->fptr < fp->obj.objsize &&
 800a4c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a4c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a4c6:	6921      	ldr	r1, [r4, #16]
 800a4c8:	6962      	ldr	r2, [r4, #20]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a4ca:	4288      	cmp	r0, r1
 800a4cc:	4193      	sbcs	r3, r2
 800a4ce:	d361      	bcc.n	800a594 <f_write+0x21e>
			fp->sect = sect;
 800a4d0:	6466      	str	r6, [r4, #68]	; 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a4d2:	9b03      	ldr	r3, [sp, #12]
 800a4d4:	899a      	ldrh	r2, [r3, #12]
 800a4d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a4d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a4da:	fbb0 f6f2 	udiv	r6, r0, r2
 800a4de:	fb02 0616 	mls	r6, r2, r6, r0
 800a4e2:	1b96      	subs	r6, r2, r6
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a4e4:	42b5      	cmp	r5, r6
 800a4e6:	d200      	bcs.n	800a4ea <f_write+0x174>
 800a4e8:	462e      	mov	r6, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a4ea:	f104 0754 	add.w	r7, r4, #84	; 0x54
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f7f5 fee6 	bl	80002c0 <__aeabi_uldivmod>
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	4632      	mov	r2, r6
 800a4f8:	4659      	mov	r1, fp
 800a4fa:	4438      	add	r0, r7
 800a4fc:	f7fd fc71 	bl	8007de2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a500:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a504:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a508:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a50c:	44b3      	add	fp, r6
 800a50e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a512:	18b2      	adds	r2, r6, r2
 800a514:	f143 0300 	adc.w	r3, r3, #0
 800a518:	63a2      	str	r2, [r4, #56]	; 0x38
 800a51a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a51c:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800a520:	6967      	ldr	r7, [r4, #20]
 800a522:	4610      	mov	r0, r2
 800a524:	4619      	mov	r1, r3
 800a526:	4562      	cmp	r2, ip
 800a528:	41bb      	sbcs	r3, r7
 800a52a:	d201      	bcs.n	800a530 <f_write+0x1ba>
 800a52c:	4660      	mov	r0, ip
 800a52e:	4639      	mov	r1, r7
 800a530:	6120      	str	r0, [r4, #16]
 800a532:	6161      	str	r1, [r4, #20]
 800a534:	f8da 3000 	ldr.w	r3, [sl]
 800a538:	4433      	add	r3, r6
 800a53a:	f8ca 3000 	str.w	r3, [sl]
 800a53e:	1bad      	subs	r5, r5, r6
	for ( ;  btw;							/* Repeat until all data written */
 800a540:	2d00      	cmp	r5, #0
 800a542:	d039      	beq.n	800a5b8 <f_write+0x242>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a544:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a546:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 800a548:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a54c:	f8b8 900c 	ldrh.w	r9, [r8, #12]
 800a550:	464a      	mov	r2, r9
 800a552:	2300      	movs	r3, #0
 800a554:	4630      	mov	r0, r6
 800a556:	4639      	mov	r1, r7
 800a558:	f7f5 feb2 	bl	80002c0 <__aeabi_uldivmod>
 800a55c:	4313      	orrs	r3, r2
 800a55e:	d1b8      	bne.n	800a4d2 <f_write+0x15c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a560:	464a      	mov	r2, r9
 800a562:	2300      	movs	r3, #0
 800a564:	4630      	mov	r0, r6
 800a566:	4639      	mov	r1, r7
 800a568:	f7f5 feaa 	bl	80002c0 <__aeabi_uldivmod>
 800a56c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a570:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800a572:	ea13 0800 	ands.w	r8, r3, r0
 800a576:	f47f af38 	bne.w	800a3ea <f_write+0x74>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a57a:	ea56 0307 	orrs.w	r3, r6, r7
 800a57e:	f47f af20 	bne.w	800a3c2 <f_write+0x4c>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a582:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800a584:	2800      	cmp	r0, #0
 800a586:	f47f af24 	bne.w	800a3d2 <f_write+0x5c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a58a:	2100      	movs	r1, #0
 800a58c:	4620      	mov	r0, r4
 800a58e:	f7fe fcc8 	bl	8008f22 <create_chain>
 800a592:	e71e      	b.n	800a3d2 <f_write+0x5c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a594:	2301      	movs	r3, #1
 800a596:	4632      	mov	r2, r6
 800a598:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a59c:	7878      	ldrb	r0, [r7, #1]
 800a59e:	f7fd fba9 	bl	8007cf4 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d094      	beq.n	800a4d0 <f_write+0x15a>
					ABORT(fs, FR_DISK_ERR);
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 800a5ac:	9301      	str	r3, [sp, #4]
 800a5ae:	e740      	b.n	800a432 <f_write+0xbc>
 800a5b0:	46b2      	mov	sl, r6
 800a5b2:	e7c5      	b.n	800a540 <f_write+0x1ca>
 800a5b4:	46b2      	mov	sl, r6
 800a5b6:	e7c3      	b.n	800a540 <f_write+0x1ca>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a5b8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5c0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	LEAVE_FF(fs, FR_OK);
 800a5c4:	e735      	b.n	800a432 <f_write+0xbc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a5c6:	2307      	movs	r3, #7
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	e732      	b.n	800a432 <f_write+0xbc>

0800a5cc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	b098      	sub	sp, #96	; 0x60
 800a5d0:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a5d2:	a917      	add	r1, sp, #92	; 0x5c
 800a5d4:	f7fd fee3 	bl	800839e <validate>
	if (res == FR_OK) {
 800a5d8:	b998      	cbnz	r0, 800a602 <f_sync+0x36>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a5da:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a5de:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a5e2:	d00e      	beq.n	800a602 <f_sync+0x36>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a5e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a5e8:	d10d      	bne.n	800a606 <f_sync+0x3a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a5ea:	f7fc f97f 	bl	80068ec <get_fattime>
 800a5ee:	4605      	mov	r5, r0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a5f0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a5f2:	7803      	ldrb	r3, [r0, #0]
 800a5f4:	2b04      	cmp	r3, #4
 800a5f6:	d017      	beq.n	800a628 <f_sync+0x5c>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a5f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a5fa:	f7fd ff1d 	bl	8008438 <move_window>
				if (res == FR_OK) {
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d062      	beq.n	800a6c8 <f_sync+0xfc>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800a602:	b018      	add	sp, #96	; 0x60
 800a604:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a606:	2301      	movs	r3, #1
 800a608:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a60a:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a60e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a610:	7840      	ldrb	r0, [r0, #1]
 800a612:	f7fd fb7b 	bl	8007d0c <disk_write>
 800a616:	2800      	cmp	r0, #0
 800a618:	d17c      	bne.n	800a714 <f_sync+0x148>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a61a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a61e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a622:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800a626:	e7e0      	b.n	800a5ea <f_sync+0x1e>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800a628:	4620      	mov	r0, r4
 800a62a:	f7fe fb22 	bl	8008c72 <fill_first_frag>
				if (res == FR_OK) {
 800a62e:	2800      	cmp	r0, #0
 800a630:	d043      	beq.n	800a6ba <f_sync+0xee>
				if (res == FR_OK) {
 800a632:	2800      	cmp	r0, #0
 800a634:	d1e5      	bne.n	800a602 <f_sync+0x36>
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800a636:	4621      	mov	r1, r4
 800a638:	4668      	mov	r0, sp
 800a63a:	f7fe fec5 	bl	80093c8 <load_obj_dir>
					if (res == FR_OK) {
 800a63e:	2800      	cmp	r0, #0
 800a640:	d1df      	bne.n	800a602 <f_sync+0x36>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800a642:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a644:	6959      	ldr	r1, [r3, #20]
 800a646:	790a      	ldrb	r2, [r1, #4]
 800a648:	f042 0220 	orr.w	r2, r2, #32
 800a64c:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800a64e:	79e2      	ldrb	r2, [r4, #7]
 800a650:	6959      	ldr	r1, [r3, #20]
 800a652:	f042 0201 	orr.w	r2, r2, #1
 800a656:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800a65a:	6958      	ldr	r0, [r3, #20]
 800a65c:	68a1      	ldr	r1, [r4, #8]
 800a65e:	3034      	adds	r0, #52	; 0x34
 800a660:	f7fd fba2 	bl	8007da8 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800a664:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a666:	6958      	ldr	r0, [r3, #20]
 800a668:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800a66c:	3038      	adds	r0, #56	; 0x38
 800a66e:	f7fd fba5 	bl	8007dbc <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800a672:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a674:	6958      	ldr	r0, [r3, #20]
 800a676:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800a67a:	3028      	adds	r0, #40	; 0x28
 800a67c:	f7fd fb9e 	bl	8007dbc <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800a680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a682:	6958      	ldr	r0, [r3, #20]
 800a684:	4629      	mov	r1, r5
 800a686:	300c      	adds	r0, #12
 800a688:	f7fd fb8e 	bl	8007da8 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800a68c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a68e:	695a      	ldr	r2, [r3, #20]
 800a690:	2100      	movs	r1, #0
 800a692:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800a694:	6958      	ldr	r0, [r3, #20]
 800a696:	3010      	adds	r0, #16
 800a698:	f7fd fb86 	bl	8007da8 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800a69c:	4668      	mov	r0, sp
 800a69e:	f7fe ff57 	bl	8009550 <store_xdir>
						if (res == FR_OK) {
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d1ad      	bne.n	800a602 <f_sync+0x36>
							res = sync_fs(fs);
 800a6a6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a6a8:	f7fe ff82 	bl	80095b0 <sync_fs>
							fp->flag &= (BYTE)~FA_MODIFIED;
 800a6ac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a6b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6b4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800a6b8:	e7a3      	b.n	800a602 <f_sync+0x36>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800a6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a6be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f7fe fabe 	bl	8008c42 <fill_last_frag>
 800a6c6:	e7b4      	b.n	800a632 <f_sync+0x66>
					dir = fp->dir_ptr;
 800a6c8:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a6ca:	7af3      	ldrb	r3, [r6, #11]
 800a6cc:	f043 0320 	orr.w	r3, r3, #32
 800a6d0:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a6d2:	68a2      	ldr	r2, [r4, #8]
 800a6d4:	4631      	mov	r1, r6
 800a6d6:	6820      	ldr	r0, [r4, #0]
 800a6d8:	f7fd fcbc 	bl	8008054 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a6dc:	6921      	ldr	r1, [r4, #16]
 800a6de:	f106 001c 	add.w	r0, r6, #28
 800a6e2:	f7fd fb61 	bl	8007da8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	f106 0016 	add.w	r0, r6, #22
 800a6ec:	f7fd fb5c 	bl	8007da8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	f106 0012 	add.w	r0, r6, #18
 800a6f6:	f7fd fb53 	bl	8007da0 <st_word>
					fs->wflag = 1;
 800a6fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a700:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a702:	f7fe ff55 	bl	80095b0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a706:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a70a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a70e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800a712:	e776      	b.n	800a602 <f_sync+0x36>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a714:	2001      	movs	r0, #1
 800a716:	e774      	b.n	800a602 <f_sync+0x36>

0800a718 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a718:	b510      	push	{r4, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a71e:	f7ff ff55 	bl	800a5cc <f_sync>
	if (res == FR_OK)
 800a722:	b108      	cbz	r0, 800a728 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800a724:	b002      	add	sp, #8
 800a726:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a728:	a901      	add	r1, sp, #4
 800a72a:	4620      	mov	r0, r4
 800a72c:	f7fd fe37 	bl	800839e <validate>
		if (res == FR_OK) {
 800a730:	2800      	cmp	r0, #0
 800a732:	d1f7      	bne.n	800a724 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a734:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a736:	f7fd fc13 	bl	8007f60 <dec_lock>
			if (res == FR_OK)
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d1f2      	bne.n	800a724 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800a73e:	6020      	str	r0, [r4, #0]
 800a740:	e7f0      	b.n	800a724 <f_close+0xc>

0800a742 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a742:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a746:	b085      	sub	sp, #20
 800a748:	4604      	mov	r4, r0
 800a74a:	4690      	mov	r8, r2
 800a74c:	4699      	mov	r9, r3
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a74e:	a903      	add	r1, sp, #12
 800a750:	f7fd fe25 	bl	800839e <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a754:	4605      	mov	r5, r0
 800a756:	b908      	cbnz	r0, 800a75c <f_lseek+0x1a>
 800a758:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800a75c:	b91d      	cbnz	r5, 800a766 <f_lseek+0x24>
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	2b04      	cmp	r3, #4
 800a764:	d01b      	beq.n	800a79e <f_lseek+0x5c>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a766:	b9b5      	cbnz	r5, 800a796 <f_lseek+0x54>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a768:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 80b4 	beq.w	800a8d8 <f_lseek+0x196>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a770:	f1b9 3fff 	cmp.w	r9, #4294967295
 800a774:	bf08      	it	eq
 800a776:	f1b8 3fff 	cmpeq.w	r8, #4294967295
 800a77a:	d018      	beq.n	800a7ae <f_lseek+0x6c>
				*tbl = 0;		/* Terminate table */
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a77c:	6926      	ldr	r6, [r4, #16]
 800a77e:	6967      	ldr	r7, [r4, #20]
 800a780:	4546      	cmp	r6, r8
 800a782:	eb77 0309 	sbcs.w	r3, r7, r9
 800a786:	d301      	bcc.n	800a78c <f_lseek+0x4a>
 800a788:	4646      	mov	r6, r8
 800a78a:	464f      	mov	r7, r9
			fp->fptr = ofs;				/* Set file pointer */
 800a78c:	63a6      	str	r6, [r4, #56]	; 0x38
 800a78e:	63e7      	str	r7, [r4, #60]	; 0x3c
			if (ofs) {
 800a790:	ea56 0307 	orrs.w	r3, r6, r7
 800a794:	d149      	bne.n	800a82a <f_lseek+0xe8>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800a796:	4628      	mov	r0, r5
 800a798:	b005      	add	sp, #20
 800a79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800a79e:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f7fe fa4c 	bl	8008c42 <fill_last_frag>
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	e7db      	b.n	800a766 <f_lseek+0x24>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a7ae:	4698      	mov	r8, r3
 800a7b0:	f858 bb04 	ldr.w	fp, [r8], #4
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a7b4:	f8d4 a008 	ldr.w	sl, [r4, #8]
			if (cl) {
 800a7b8:	f1ba 0f00 	cmp.w	sl, #0
 800a7bc:	d029      	beq.n	800a812 <f_lseek+0xd0>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a7be:	f04f 0902 	mov.w	r9, #2
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a7c2:	f109 0902 	add.w	r9, r9, #2
 800a7c6:	4651      	mov	r1, sl
 800a7c8:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 800a7ca:	3701      	adds	r7, #1
						cl = get_fat(&fp->obj, cl);
 800a7cc:	460e      	mov	r6, r1
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f7fe fa68 	bl	8008ca4 <get_fat>
 800a7d4:	4601      	mov	r1, r0
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a7d6:	2801      	cmp	r0, #1
 800a7d8:	d913      	bls.n	800a802 <f_lseek+0xc0>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7da:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a7de:	d014      	beq.n	800a80a <f_lseek+0xc8>
					} while (cl == pcl + 1);
 800a7e0:	3601      	adds	r6, #1
 800a7e2:	4286      	cmp	r6, r0
 800a7e4:	d0f1      	beq.n	800a7ca <f_lseek+0x88>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a7e6:	45cb      	cmp	fp, r9
 800a7e8:	d305      	bcc.n	800a7f6 <f_lseek+0xb4>
						*tbl++ = ncl; *tbl++ = tcl;
 800a7ea:	4643      	mov	r3, r8
 800a7ec:	f843 7b08 	str.w	r7, [r3], #8
 800a7f0:	f8c8 a004 	str.w	sl, [r8, #4]
 800a7f4:	4698      	mov	r8, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	428b      	cmp	r3, r1
 800a7fc:	d90b      	bls.n	800a816 <f_lseek+0xd4>
						cl = get_fat(&fp->obj, cl);
 800a7fe:	468a      	mov	sl, r1
 800a800:	e7df      	b.n	800a7c2 <f_lseek+0x80>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a802:	2502      	movs	r5, #2
 800a804:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800a808:	e7c5      	b.n	800a796 <f_lseek+0x54>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a80a:	2501      	movs	r5, #1
 800a80c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800a810:	e7c1      	b.n	800a796 <f_lseek+0x54>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a812:	f04f 0902 	mov.w	r9, #2
			*fp->cltbl = ulen;	/* Number of items used */
 800a816:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a818:	f8c3 9000 	str.w	r9, [r3]
			if (ulen <= tlen) {
 800a81c:	45d9      	cmp	r9, fp
 800a81e:	f200 817c 	bhi.w	800ab1a <f_lseek+0x3d8>
				*tbl = 0;		/* Terminate table */
 800a822:	2300      	movs	r3, #0
 800a824:	f8c8 3000 	str.w	r3, [r8]
 800a828:	e7b5      	b.n	800a796 <f_lseek+0x54>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a82a:	f116 3aff 	adds.w	sl, r6, #4294967295
 800a82e:	f147 39ff 	adc.w	r9, r7, #4294967295
 800a832:	4652      	mov	r2, sl
 800a834:	464b      	mov	r3, r9
 800a836:	4620      	mov	r0, r4
 800a838:	f7fd fbd8 	bl	8007fec <clmt_clust>
 800a83c:	4601      	mov	r1, r0
 800a83e:	6420      	str	r0, [r4, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 800a840:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a844:	4640      	mov	r0, r8
 800a846:	f7fd fbc5 	bl	8007fd4 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a84a:	9000      	str	r0, [sp, #0]
 800a84c:	b348      	cbz	r0, 800a8a2 <f_lseek+0x160>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a84e:	f8b8 b00c 	ldrh.w	fp, [r8, #12]
 800a852:	465a      	mov	r2, fp
 800a854:	2300      	movs	r3, #0
 800a856:	4650      	mov	r0, sl
 800a858:	4649      	mov	r1, r9
 800a85a:	f7f5 fd31 	bl	80002c0 <__aeabi_uldivmod>
 800a85e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a862:	3b01      	subs	r3, #1
 800a864:	4003      	ands	r3, r0
 800a866:	9a00      	ldr	r2, [sp, #0]
 800a868:	441a      	add	r2, r3
 800a86a:	4691      	mov	r9, r2
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a86c:	465a      	mov	r2, fp
 800a86e:	2300      	movs	r3, #0
 800a870:	4630      	mov	r0, r6
 800a872:	4639      	mov	r1, r7
 800a874:	f7f5 fd24 	bl	80002c0 <__aeabi_uldivmod>
 800a878:	4313      	orrs	r3, r2
 800a87a:	d08c      	beq.n	800a796 <f_lseek+0x54>
 800a87c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a87e:	454a      	cmp	r2, r9
 800a880:	d089      	beq.n	800a796 <f_lseek+0x54>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a882:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800a886:	2b00      	cmp	r3, #0
 800a888:	db0f      	blt.n	800a8aa <f_lseek+0x168>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a88a:	2301      	movs	r3, #1
 800a88c:	464a      	mov	r2, r9
 800a88e:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a892:	9803      	ldr	r0, [sp, #12]
 800a894:	7840      	ldrb	r0, [r0, #1]
 800a896:	f7fd fa2d 	bl	8007cf4 <disk_read>
 800a89a:	b9c8      	cbnz	r0, 800a8d0 <f_lseek+0x18e>
					fp->sect = dsc;
 800a89c:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
 800a8a0:	e779      	b.n	800a796 <f_lseek+0x54>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a8a2:	2502      	movs	r5, #2
 800a8a4:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800a8a8:	e775      	b.n	800a796 <f_lseek+0x54>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a8b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a8b4:	f7fd fa2a 	bl	8007d0c <disk_write>
 800a8b8:	b930      	cbnz	r0, 800a8c8 <f_lseek+0x186>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a8ba:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8c2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800a8c6:	e7e0      	b.n	800a88a <f_lseek+0x148>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8c8:	2501      	movs	r5, #1
 800a8ca:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800a8ce:	e762      	b.n	800a796 <f_lseek+0x54>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a8d0:	2501      	movs	r5, #1
 800a8d2:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800a8d6:	e75e      	b.n	800a796 <f_lseek+0x54>
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800a8d8:	9b03      	ldr	r3, [sp, #12]
 800a8da:	781a      	ldrb	r2, [r3, #0]
 800a8dc:	2a04      	cmp	r2, #4
 800a8de:	d00b      	beq.n	800a8f8 <f_lseek+0x1b6>
 800a8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e4:	4542      	cmp	r2, r8
 800a8e6:	f04f 0200 	mov.w	r2, #0
 800a8ea:	eb72 0209 	sbcs.w	r2, r2, r9
 800a8ee:	d203      	bcs.n	800a8f8 <f_lseek+0x1b6>
 800a8f0:	f04f 38ff 	mov.w	r8, #4294967295
 800a8f4:	f04f 0900 	mov.w	r9, #0
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a8f8:	6921      	ldr	r1, [r4, #16]
 800a8fa:	6962      	ldr	r2, [r4, #20]
 800a8fc:	4541      	cmp	r1, r8
 800a8fe:	eb72 0009 	sbcs.w	r0, r2, r9
 800a902:	d206      	bcs.n	800a912 <f_lseek+0x1d0>
 800a904:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 800a908:	f010 0f02 	tst.w	r0, #2
 800a90c:	d101      	bne.n	800a912 <f_lseek+0x1d0>
			ofs = fp->obj.objsize;
 800a90e:	4688      	mov	r8, r1
 800a910:	4691      	mov	r9, r2
		ifptr = fp->fptr;
 800a912:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800a914:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		fp->fptr = nsect = 0;
 800a918:	2000      	movs	r0, #0
 800a91a:	2100      	movs	r1, #0
 800a91c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		if (ofs) {
 800a920:	ea58 0209 	orrs.w	r2, r8, r9
 800a924:	f000 80b6 	beq.w	800aa94 <f_lseek+0x352>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a928:	895e      	ldrh	r6, [r3, #10]
 800a92a:	899b      	ldrh	r3, [r3, #12]
 800a92c:	fb03 f606 	mul.w	r6, r3, r6
			if (ifptr > 0 &&
 800a930:	ea57 030a 	orrs.w	r3, r7, sl
 800a934:	d025      	beq.n	800a982 <f_lseek+0x240>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a936:	f118 30ff 	adds.w	r0, r8, #4294967295
 800a93a:	f04f 0b00 	mov.w	fp, #0
 800a93e:	4632      	mov	r2, r6
 800a940:	465b      	mov	r3, fp
 800a942:	f149 31ff 	adc.w	r1, r9, #4294967295
 800a946:	f7f5 fcbb 	bl	80002c0 <__aeabi_uldivmod>
 800a94a:	9000      	str	r0, [sp, #0]
 800a94c:	9101      	str	r1, [sp, #4]
 800a94e:	3f01      	subs	r7, #1
 800a950:	f14a 3aff 	adc.w	sl, sl, #4294967295
 800a954:	4632      	mov	r2, r6
 800a956:	465b      	mov	r3, fp
 800a958:	4638      	mov	r0, r7
 800a95a:	4651      	mov	r1, sl
 800a95c:	f7f5 fcb0 	bl	80002c0 <__aeabi_uldivmod>
			if (ifptr > 0 &&
 800a960:	9b00      	ldr	r3, [sp, #0]
 800a962:	4283      	cmp	r3, r0
 800a964:	9b01      	ldr	r3, [sp, #4]
 800a966:	418b      	sbcs	r3, r1
 800a968:	d30b      	bcc.n	800a982 <f_lseek+0x240>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a96a:	4273      	negs	r3, r6
 800a96c:	401f      	ands	r7, r3
 800a96e:	63a7      	str	r7, [r4, #56]	; 0x38
 800a970:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
				ofs -= fp->fptr;
 800a974:	ebb8 0707 	subs.w	r7, r8, r7
 800a978:	46b8      	mov	r8, r7
 800a97a:	eb69 090a 	sbc.w	r9, r9, sl
				clst = fp->clust;
 800a97e:	6c27      	ldr	r7, [r4, #64]	; 0x40
 800a980:	e002      	b.n	800a988 <f_lseek+0x246>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a982:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a984:	b12f      	cbz	r7, 800a992 <f_lseek+0x250>
				fp->clust = clst;
 800a986:	6427      	str	r7, [r4, #64]	; 0x40
			if (clst != 0) {
 800a988:	2f00      	cmp	r7, #0
 800a98a:	f000 8084 	beq.w	800aa96 <f_lseek+0x354>
 800a98e:	4639      	mov	r1, r7
 800a990:	e023      	b.n	800a9da <f_lseek+0x298>
					clst = create_chain(&fp->obj, 0);
 800a992:	2100      	movs	r1, #0
 800a994:	4620      	mov	r0, r4
 800a996:	f7fe fac4 	bl	8008f22 <create_chain>
 800a99a:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a99c:	2801      	cmp	r0, #1
 800a99e:	d004      	beq.n	800a9aa <f_lseek+0x268>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a9a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a9a4:	d005      	beq.n	800a9b2 <f_lseek+0x270>
					fp->obj.sclust = clst;
 800a9a6:	60a0      	str	r0, [r4, #8]
 800a9a8:	e7ed      	b.n	800a986 <f_lseek+0x244>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a9aa:	2502      	movs	r5, #2
 800a9ac:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800a9b0:	e6f1      	b.n	800a796 <f_lseek+0x54>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a9b2:	2501      	movs	r5, #1
 800a9b4:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800a9b8:	e6ed      	b.n	800a796 <f_lseek+0x54>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f7fe fab1 	bl	8008f22 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a9c0:	4601      	mov	r1, r0
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d05d      	beq.n	800aa82 <f_lseek+0x340>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a9c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a9ca:	d02e      	beq.n	800aa2a <f_lseek+0x2e8>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a9cc:	2901      	cmp	r1, #1
 800a9ce:	d930      	bls.n	800aa32 <f_lseek+0x2f0>
 800a9d0:	9b03      	ldr	r3, [sp, #12]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	428b      	cmp	r3, r1
 800a9d6:	d92c      	bls.n	800aa32 <f_lseek+0x2f0>
					fp->clust = clst;
 800a9d8:	6421      	str	r1, [r4, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800a9da:	4633      	mov	r3, r6
 800a9dc:	4546      	cmp	r6, r8
 800a9de:	f04f 0200 	mov.w	r2, #0
 800a9e2:	eb72 0209 	sbcs.w	r2, r2, r9
 800a9e6:	d228      	bcs.n	800aa3a <f_lseek+0x2f8>
					ofs -= bcs; fp->fptr += bcs;
 800a9e8:	ebb8 0803 	subs.w	r8, r8, r3
 800a9ec:	f169 0900 	sbc.w	r9, r9, #0
 800a9f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a9f2:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 800a9f4:	189b      	adds	r3, r3, r2
 800a9f6:	f147 0700 	adc.w	r7, r7, #0
 800a9fa:	63a3      	str	r3, [r4, #56]	; 0x38
 800a9fc:	63e7      	str	r7, [r4, #60]	; 0x3c
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a9fe:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
 800aa02:	f01c 0f02 	tst.w	ip, #2
 800aa06:	d00b      	beq.n	800aa20 <f_lseek+0x2de>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800aa08:	6920      	ldr	r0, [r4, #16]
 800aa0a:	6962      	ldr	r2, [r4, #20]
 800aa0c:	4298      	cmp	r0, r3
 800aa0e:	41ba      	sbcs	r2, r7
 800aa10:	d2d3      	bcs.n	800a9ba <f_lseek+0x278>
							fp->obj.objsize = fp->fptr;
 800aa12:	6123      	str	r3, [r4, #16]
 800aa14:	6167      	str	r7, [r4, #20]
							fp->flag |= FA_MODIFIED;
 800aa16:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 800aa1a:	f884 c030 	strb.w	ip, [r4, #48]	; 0x30
 800aa1e:	e7cc      	b.n	800a9ba <f_lseek+0x278>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800aa20:	4620      	mov	r0, r4
 800aa22:	f7fe f93f 	bl	8008ca4 <get_fat>
 800aa26:	4601      	mov	r1, r0
 800aa28:	e7cd      	b.n	800a9c6 <f_lseek+0x284>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa2a:	2501      	movs	r5, #1
 800aa2c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800aa30:	e6b1      	b.n	800a796 <f_lseek+0x54>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800aa32:	2502      	movs	r5, #2
 800aa34:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800aa38:	e6ad      	b.n	800a796 <f_lseek+0x54>
 800aa3a:	460f      	mov	r7, r1
				fp->fptr += ofs;
 800aa3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aa3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800aa40:	eb13 0308 	adds.w	r3, r3, r8
 800aa44:	eb49 0202 	adc.w	r2, r9, r2
 800aa48:	63a3      	str	r3, [r4, #56]	; 0x38
 800aa4a:	63e2      	str	r2, [r4, #60]	; 0x3c
				if (ofs % SS(fs)) {
 800aa4c:	9e03      	ldr	r6, [sp, #12]
 800aa4e:	f8b6 b00c 	ldrh.w	fp, [r6, #12]
 800aa52:	f04f 0a00 	mov.w	sl, #0
 800aa56:	465a      	mov	r2, fp
 800aa58:	4653      	mov	r3, sl
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	4649      	mov	r1, r9
 800aa5e:	f7f5 fc2f 	bl	80002c0 <__aeabi_uldivmod>
 800aa62:	4313      	orrs	r3, r2
 800aa64:	d041      	beq.n	800aaea <f_lseek+0x3a8>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800aa66:	4639      	mov	r1, r7
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f7fd fab3 	bl	8007fd4 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800aa6e:	4607      	mov	r7, r0
 800aa70:	b160      	cbz	r0, 800aa8c <f_lseek+0x34a>
					nsect += (DWORD)(ofs / SS(fs));
 800aa72:	465a      	mov	r2, fp
 800aa74:	4653      	mov	r3, sl
 800aa76:	4640      	mov	r0, r8
 800aa78:	4649      	mov	r1, r9
 800aa7a:	f7f5 fc21 	bl	80002c0 <__aeabi_uldivmod>
 800aa7e:	4407      	add	r7, r0
 800aa80:	e009      	b.n	800aa96 <f_lseek+0x354>
 800aa82:	4607      	mov	r7, r0
							ofs = 0; break;
 800aa84:	f04f 0800 	mov.w	r8, #0
 800aa88:	46c1      	mov	r9, r8
 800aa8a:	e7d7      	b.n	800aa3c <f_lseek+0x2fa>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800aa8c:	2502      	movs	r5, #2
 800aa8e:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800aa92:	e680      	b.n	800a796 <f_lseek+0x54>
		fp->fptr = nsect = 0;
 800aa94:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800aa96:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800aa98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aa9a:	6922      	ldr	r2, [r4, #16]
 800aa9c:	6963      	ldr	r3, [r4, #20]
 800aa9e:	4282      	cmp	r2, r0
 800aaa0:	418b      	sbcs	r3, r1
 800aaa2:	d207      	bcs.n	800aab4 <f_lseek+0x372>
			fp->obj.objsize = fp->fptr;
 800aaa4:	6120      	str	r0, [r4, #16]
 800aaa6:	6161      	str	r1, [r4, #20]
			fp->flag |= FA_MODIFIED;
 800aaa8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800aaac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aab0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800aab4:	9e03      	ldr	r6, [sp, #12]
 800aab6:	89b2      	ldrh	r2, [r6, #12]
 800aab8:	2300      	movs	r3, #0
 800aaba:	f7f5 fc01 	bl	80002c0 <__aeabi_uldivmod>
 800aabe:	4313      	orrs	r3, r2
 800aac0:	f43f ae69 	beq.w	800a796 <f_lseek+0x54>
 800aac4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800aac6:	42ba      	cmp	r2, r7
 800aac8:	f43f ae65 	beq.w	800a796 <f_lseek+0x54>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800aacc:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	db0c      	blt.n	800aaee <f_lseek+0x3ac>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aad4:	2301      	movs	r3, #1
 800aad6:	463a      	mov	r2, r7
 800aad8:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800aadc:	9803      	ldr	r0, [sp, #12]
 800aade:	7840      	ldrb	r0, [r0, #1]
 800aae0:	f7fd f908 	bl	8007cf4 <disk_read>
 800aae4:	b9a8      	cbnz	r0, 800ab12 <f_lseek+0x3d0>
			fp->sect = nsect;
 800aae6:	6467      	str	r7, [r4, #68]	; 0x44
 800aae8:	e655      	b.n	800a796 <f_lseek+0x54>
		fp->fptr = nsect = 0;
 800aaea:	2700      	movs	r7, #0
 800aaec:	e7d3      	b.n	800aa96 <f_lseek+0x354>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aaee:	2301      	movs	r3, #1
 800aaf0:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800aaf4:	7870      	ldrb	r0, [r6, #1]
 800aaf6:	f7fd f909 	bl	8007d0c <disk_write>
 800aafa:	b930      	cbnz	r0, 800ab0a <f_lseek+0x3c8>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aafc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ab00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab04:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800ab08:	e7e4      	b.n	800aad4 <f_lseek+0x392>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab0a:	2501      	movs	r5, #1
 800ab0c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800ab10:	e641      	b.n	800a796 <f_lseek+0x54>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ab12:	2501      	movs	r5, #1
 800ab14:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800ab18:	e63d      	b.n	800a796 <f_lseek+0x54>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ab1a:	2511      	movs	r5, #17
 800ab1c:	e63b      	b.n	800a796 <f_lseek+0x54>

0800ab1e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ab1e:	b530      	push	{r4, r5, lr}
 800ab20:	b085      	sub	sp, #20
 800ab22:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ab24:	2800      	cmp	r0, #0
 800ab26:	d05e      	beq.n	800abe6 <f_opendir+0xc8>
 800ab28:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	a903      	add	r1, sp, #12
 800ab2e:	a801      	add	r0, sp, #4
 800ab30:	f7fd fce4 	bl	80084fc <find_volume>
	if (res == FR_OK) {
 800ab34:	4604      	mov	r4, r0
 800ab36:	b128      	cbz	r0, 800ab44 <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ab38:	b10c      	cbz	r4, 800ab3e <f_opendir+0x20>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 800ab3e:	4620      	mov	r0, r4
 800ab40:	b005      	add	sp, #20
 800ab42:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 800ab44:	9b03      	ldr	r3, [sp, #12]
 800ab46:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ab48:	9901      	ldr	r1, [sp, #4]
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	f7ff f8bd 	bl	8009cca <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800ab50:	4604      	mov	r4, r0
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d143      	bne.n	800abde <f_opendir+0xc0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ab56:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	db0c      	blt.n	800ab78 <f_opendir+0x5a>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ab5e:	79ab      	ldrb	r3, [r5, #6]
 800ab60:	f013 0f10 	tst.w	r3, #16
 800ab64:	d03a      	beq.n	800abdc <f_opendir+0xbe>
					if (fs->fs_type == FS_EXFAT) {
 800ab66:	9c03      	ldr	r4, [sp, #12]
 800ab68:	7823      	ldrb	r3, [r4, #0]
 800ab6a:	2b04      	cmp	r3, #4
 800ab6c:	d012      	beq.n	800ab94 <f_opendir+0x76>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ab6e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800ab70:	4620      	mov	r0, r4
 800ab72:	f7fd fa5c 	bl	800802e <ld_clust>
 800ab76:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
 800ab78:	9b03      	ldr	r3, [sp, #12]
 800ab7a:	88db      	ldrh	r3, [r3, #6]
 800ab7c:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ab7e:	2100      	movs	r1, #0
 800ab80:	4628      	mov	r0, r5
 800ab82:	f7fe f963 	bl	8008e4c <dir_sdi>
				if (res == FR_OK) {
 800ab86:	4604      	mov	r4, r0
 800ab88:	bb48      	cbnz	r0, 800abde <f_opendir+0xc0>
					if (obj->sclust) {
 800ab8a:	68ab      	ldr	r3, [r5, #8]
 800ab8c:	b9f3      	cbnz	r3, 800abcc <f_opendir+0xae>
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ab8e:	2300      	movs	r3, #0
 800ab90:	62eb      	str	r3, [r5, #44]	; 0x2c
 800ab92:	e024      	b.n	800abde <f_opendir+0xc0>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800ab94:	68ab      	ldr	r3, [r5, #8]
 800ab96:	622b      	str	r3, [r5, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800ab98:	692b      	ldr	r3, [r5, #16]
 800ab9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ab9e:	79ea      	ldrb	r2, [r5, #7]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	626b      	str	r3, [r5, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800aba4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800aba6:	62ab      	str	r3, [r5, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800aba8:	6960      	ldr	r0, [r4, #20]
 800abaa:	3034      	adds	r0, #52	; 0x34
 800abac:	f7fd f8cb 	bl	8007d46 <ld_dword>
 800abb0:	60a8      	str	r0, [r5, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800abb2:	6960      	ldr	r0, [r4, #20]
 800abb4:	3038      	adds	r0, #56	; 0x38
 800abb6:	f7fd f8d1 	bl	8007d5c <ld_qword>
 800abba:	e9c5 0104 	strd	r0, r1, [r5, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800abbe:	6963      	ldr	r3, [r4, #20]
 800abc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800abc4:	f003 0302 	and.w	r3, r3, #2
 800abc8:	71eb      	strb	r3, [r5, #7]
 800abca:	e7d5      	b.n	800ab78 <f_opendir+0x5a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800abcc:	2100      	movs	r1, #0
 800abce:	4628      	mov	r0, r5
 800abd0:	f7fd f974 	bl	8007ebc <inc_lock>
 800abd4:	62e8      	str	r0, [r5, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800abd6:	b910      	cbnz	r0, 800abde <f_opendir+0xc0>
 800abd8:	2412      	movs	r4, #18
 800abda:	e7ad      	b.n	800ab38 <f_opendir+0x1a>
					res = FR_NO_PATH;
 800abdc:	2405      	movs	r4, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800abde:	2c04      	cmp	r4, #4
 800abe0:	d1aa      	bne.n	800ab38 <f_opendir+0x1a>
 800abe2:	2405      	movs	r4, #5
 800abe4:	e7a9      	b.n	800ab3a <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 800abe6:	2409      	movs	r4, #9
 800abe8:	e7a9      	b.n	800ab3e <f_opendir+0x20>

0800abea <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800abea:	b570      	push	{r4, r5, r6, lr}
 800abec:	b082      	sub	sp, #8
 800abee:	4604      	mov	r4, r0
 800abf0:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800abf2:	a901      	add	r1, sp, #4
 800abf4:	f7fd fbd3 	bl	800839e <validate>
	if (res == FR_OK) {
 800abf8:	4606      	mov	r6, r0
 800abfa:	b9c0      	cbnz	r0, 800ac2e <f_readdir+0x44>
		if (!fno) {
 800abfc:	b195      	cbz	r5, 800ac24 <f_readdir+0x3a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800abfe:	2100      	movs	r1, #0
 800ac00:	4620      	mov	r0, r4
 800ac02:	f7fe fbfa 	bl	80093fa <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ac06:	2804      	cmp	r0, #4
 800ac08:	d000      	beq.n	800ac0c <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
 800ac0a:	b998      	cbnz	r0, 800ac34 <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f7fe fe75 	bl	80098fe <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ac14:	2100      	movs	r1, #0
 800ac16:	4620      	mov	r0, r4
 800ac18:	f7fe fac5 	bl	80091a6 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ac1c:	2804      	cmp	r0, #4
 800ac1e:	d006      	beq.n	800ac2e <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ac20:	4606      	mov	r6, r0
 800ac22:	e004      	b.n	800ac2e <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ac24:	2100      	movs	r1, #0
 800ac26:	4620      	mov	r0, r4
 800ac28:	f7fe f910 	bl	8008e4c <dir_sdi>
 800ac2c:	4606      	mov	r6, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800ac2e:	4630      	mov	r0, r6
 800ac30:	b002      	add	sp, #8
 800ac32:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 800ac34:	4606      	mov	r6, r0
 800ac36:	e7fa      	b.n	800ac2e <f_readdir+0x44>

0800ac38 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	460c      	mov	r4, r1
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4628      	mov	r0, r5
 800ac42:	f7ff ffd2 	bl	800abea <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800ac46:	4606      	mov	r6, r0
 800ac48:	b958      	cbnz	r0, 800ac62 <f_findnext+0x2a>
 800ac4a:	b154      	cbz	r4, 800ac62 <f_findnext+0x2a>
 800ac4c:	7ea3      	ldrb	r3, [r4, #26]
 800ac4e:	b143      	cbz	r3, 800ac62 <f_findnext+0x2a>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800ac50:	2300      	movs	r3, #0
 800ac52:	461a      	mov	r2, r3
 800ac54:	f104 011a 	add.w	r1, r4, #26
 800ac58:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800ac5a:	f7fd fb1f 	bl	800829c <pattern_matching>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d0ed      	beq.n	800ac3e <f_findnext+0x6>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800ac62:	4630      	mov	r0, r6
 800ac64:	bd70      	pop	{r4, r5, r6, pc}

0800ac66 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800ac66:	b538      	push	{r3, r4, r5, lr}
 800ac68:	4604      	mov	r4, r0
 800ac6a:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800ac6c:	6503      	str	r3, [r0, #80]	; 0x50
	res = f_opendir(dp, path);		/* Open the target directory */
 800ac6e:	4611      	mov	r1, r2
 800ac70:	f7ff ff55 	bl	800ab1e <f_opendir>
	if (res == FR_OK) {
 800ac74:	b100      	cbz	r0, 800ac78 <f_findfirst+0x12>
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
		res = f_findnext(dp, fno);	/* Find the first item */
 800ac78:	4629      	mov	r1, r5
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f7ff ffdc 	bl	800ac38 <f_findnext>
 800ac80:	e7f9      	b.n	800ac76 <f_findfirst+0x10>

0800ac82 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 800ac82:	b530      	push	{r4, r5, lr}
 800ac84:	b083      	sub	sp, #12
 800ac86:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ac88:	a901      	add	r1, sp, #4
 800ac8a:	f7fd fb88 	bl	800839e <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 800ac8e:	4605      	mov	r5, r0
 800ac90:	bb40      	cbnz	r0, 800ace4 <f_truncate+0x62>
 800ac92:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
 800ac96:	bb2d      	cbnz	r5, 800ace4 <f_truncate+0x62>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ac98:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ac9c:	f013 0f02 	tst.w	r3, #2
 800aca0:	d051      	beq.n	800ad46 <f_truncate+0xc4>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 800aca2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800aca4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aca6:	6920      	ldr	r0, [r4, #16]
 800aca8:	6963      	ldr	r3, [r4, #20]
 800acaa:	4282      	cmp	r2, r0
 800acac:	eb71 0303 	sbcs.w	r3, r1, r3
 800acb0:	d218      	bcs.n	800ace4 <f_truncate+0x62>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 800acb2:	430a      	orrs	r2, r1
 800acb4:	d119      	bne.n	800acea <f_truncate+0x68>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800acb6:	2200      	movs	r2, #0
 800acb8:	68a1      	ldr	r1, [r4, #8]
 800acba:	4620      	mov	r0, r4
 800acbc:	f7fe f9f4 	bl	80090a8 <remove_chain>
 800acc0:	4605      	mov	r5, r0
			fp->obj.sclust = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	60a3      	str	r3, [r4, #8]
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
 800acc6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800acca:	e9c4 2304 	strd	r2, r3, [r4, #16]
		fp->flag |= FA_MODIFIED;
 800acce:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800acd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 800acda:	b915      	cbnz	r5, 800ace2 <f_truncate+0x60>
 800acdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ace0:	d11d      	bne.n	800ad1e <f_truncate+0x9c>
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
 800ace2:	bb6d      	cbnz	r5, 800ad40 <f_truncate+0xbe>
	}

	LEAVE_FF(fs, res);
}
 800ace4:	4628      	mov	r0, r5
 800ace6:	b003      	add	sp, #12
 800ace8:	bd30      	pop	{r4, r5, pc}
			ncl = get_fat(&fp->obj, fp->clust);
 800acea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800acec:	4620      	mov	r0, r4
 800acee:	f7fd ffd9 	bl	8008ca4 <get_fat>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800acf2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800acf6:	d00e      	beq.n	800ad16 <f_truncate+0x94>
			if (ncl == 1) res = FR_INT_ERR;
 800acf8:	2801      	cmp	r0, #1
 800acfa:	d00e      	beq.n	800ad1a <f_truncate+0x98>
			if (res == FR_OK && ncl < fs->n_fatent) {
 800acfc:	2d00      	cmp	r5, #0
 800acfe:	d1e2      	bne.n	800acc6 <f_truncate+0x44>
 800ad00:	9b01      	ldr	r3, [sp, #4]
 800ad02:	6a1b      	ldr	r3, [r3, #32]
 800ad04:	4283      	cmp	r3, r0
 800ad06:	d9de      	bls.n	800acc6 <f_truncate+0x44>
				res = remove_chain(&fp->obj, ncl, fp->clust);
 800ad08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ad0a:	4601      	mov	r1, r0
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f7fe f9cb 	bl	80090a8 <remove_chain>
 800ad12:	4605      	mov	r5, r0
 800ad14:	e7d7      	b.n	800acc6 <f_truncate+0x44>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ad16:	2501      	movs	r5, #1
 800ad18:	e7ee      	b.n	800acf8 <f_truncate+0x76>
			if (ncl == 1) res = FR_INT_ERR;
 800ad1a:	2502      	movs	r5, #2
 800ad1c:	e7d3      	b.n	800acc6 <f_truncate+0x44>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 800ad1e:	2301      	movs	r3, #1
 800ad20:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ad22:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800ad26:	9801      	ldr	r0, [sp, #4]
 800ad28:	7840      	ldrb	r0, [r0, #1]
 800ad2a:	f7fc ffef 	bl	8007d0c <disk_write>
 800ad2e:	b930      	cbnz	r0, 800ad3e <f_truncate+0xbc>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad30:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ad34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad38:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800ad3c:	e7d1      	b.n	800ace2 <f_truncate+0x60>
				res = FR_DISK_ERR;
 800ad3e:	2501      	movs	r5, #1
		if (res != FR_OK) ABORT(fs, res);
 800ad40:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800ad44:	e7ce      	b.n	800ace4 <f_truncate+0x62>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ad46:	2507      	movs	r5, #7
 800ad48:	e7cc      	b.n	800ace4 <f_truncate+0x62>

0800ad4a <f_expand>:
FRESULT f_expand (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t fsz,	/* File size to be expanded to */
	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
)
{
 800ad4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	4605      	mov	r5, r0
 800ad52:	4617      	mov	r7, r2
 800ad54:	461c      	mov	r4, r3
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
	FRESULT res;
	FATFS *fs;
	DWORD n, clst, stcl, scl, ncl, tcl, lclst;


	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ad5c:	a903      	add	r1, sp, #12
 800ad5e:	f7fd fb1e 	bl	800839e <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 800ad62:	4606      	mov	r6, r0
 800ad64:	2800      	cmp	r0, #0
 800ad66:	f040 80dd 	bne.w	800af24 <f_expand+0x1da>
 800ad6a:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
 800ad6e:	2e00      	cmp	r6, #0
 800ad70:	f040 80d8 	bne.w	800af24 <f_expand+0x1da>
	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
 800ad74:	4621      	mov	r1, r4
 800ad76:	ea57 0304 	orrs.w	r3, r7, r4
 800ad7a:	f000 80d2 	beq.w	800af22 <f_expand+0x1d8>
 800ad7e:	692b      	ldr	r3, [r5, #16]
 800ad80:	696a      	ldr	r2, [r5, #20]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	f040 80d2 	bne.w	800af2c <f_expand+0x1e2>
 800ad88:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ad8c:	f013 0f02 	tst.w	r3, #2
 800ad90:	f000 80ce 	beq.w	800af30 <f_expand+0x1e6>
#if _FS_EXFAT
	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size limit */
 800ad94:	9c03      	ldr	r4, [sp, #12]
 800ad96:	f894 8000 	ldrb.w	r8, [r4]
 800ad9a:	f1b8 0f04 	cmp.w	r8, #4
 800ad9e:	d007      	beq.n	800adb0 <f_expand+0x66>
 800ada0:	f04f 33ff 	mov.w	r3, #4294967295
 800ada4:	42bb      	cmp	r3, r7
 800ada6:	f04f 0300 	mov.w	r3, #0
 800adaa:	418b      	sbcs	r3, r1
 800adac:	f0c0 80c2 	bcc.w	800af34 <f_expand+0x1ea>
#endif
	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
 800adb0:	f8b4 900a 	ldrh.w	r9, [r4, #10]
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	fb03 f909 	mul.w	r9, r3, r9
	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
 800adba:	464a      	mov	r2, r9
 800adbc:	2300      	movs	r3, #0
 800adbe:	4638      	mov	r0, r7
 800adc0:	9900      	ldr	r1, [sp, #0]
 800adc2:	f7f5 fa7d 	bl	80002c0 <__aeabi_uldivmod>
 800adc6:	f109 39ff 	add.w	r9, r9, #4294967295
 800adca:	ea09 0307 	and.w	r3, r9, r7
 800adce:	b16b      	cbz	r3, 800adec <f_expand+0xa2>
 800add0:	f04f 0a01 	mov.w	sl, #1
 800add4:	4482      	add	sl, r0
	stcl = fs->last_clst; lclst = 0;
 800add6:	f8d4 9018 	ldr.w	r9, [r4, #24]
	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
 800adda:	f1b9 0f01 	cmp.w	r9, #1
 800adde:	d908      	bls.n	800adf2 <f_expand+0xa8>
 800ade0:	6a23      	ldr	r3, [r4, #32]
 800ade2:	454b      	cmp	r3, r9
 800ade4:	d807      	bhi.n	800adf6 <f_expand+0xac>
 800ade6:	f04f 0902 	mov.w	r9, #2
 800adea:	e004      	b.n	800adf6 <f_expand+0xac>
	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
 800adec:	f04f 0a00 	mov.w	sl, #0
 800adf0:	e7f0      	b.n	800add4 <f_expand+0x8a>
	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
 800adf2:	f04f 0902 	mov.w	r9, #2

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800adf6:	f1b8 0f04 	cmp.w	r8, #4
 800adfa:	d005      	beq.n	800ae08 <f_expand+0xbe>
			}
		}
	} else
#endif
	{
		scl = clst = stcl; ncl = 0;
 800adfc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae00:	464c      	mov	r4, r9
 800ae02:	f04f 0800 	mov.w	r8, #0
 800ae06:	e026      	b.n	800ae56 <f_expand+0x10c>
		scl = find_bitmap(fs, stcl, tcl);			/* Find a contiguous cluster block */
 800ae08:	4652      	mov	r2, sl
 800ae0a:	4649      	mov	r1, r9
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f7fd fddf 	bl	80089d0 <find_bitmap>
		if (scl == 0) res = FR_DENIED;				/* No contiguous cluster block was found */
 800ae12:	9001      	str	r0, [sp, #4]
 800ae14:	b900      	cbnz	r0, 800ae18 <f_expand+0xce>
 800ae16:	2607      	movs	r6, #7
		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ae18:	9b01      	ldr	r3, [sp, #4]
 800ae1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1e:	d056      	beq.n	800aece <f_expand+0x184>
		if (res == FR_OK) {	/* A contiguous free area is found */
 800ae20:	2e00      	cmp	r6, #0
 800ae22:	d158      	bne.n	800aed6 <f_expand+0x18c>
			if (opt) {		/* Allocate it now */
 800ae24:	f1bb 0f00 	cmp.w	fp, #0
 800ae28:	d103      	bne.n	800ae32 <f_expand+0xe8>
				lclst = scl - 1;
 800ae2a:	9b01      	ldr	r3, [sp, #4]
 800ae2c:	f103 39ff 	add.w	r9, r3, #4294967295
 800ae30:	e056      	b.n	800aee0 <f_expand+0x196>
				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
 800ae32:	2301      	movs	r3, #1
 800ae34:	4652      	mov	r2, sl
 800ae36:	9c01      	ldr	r4, [sp, #4]
 800ae38:	4621      	mov	r1, r4
 800ae3a:	9803      	ldr	r0, [sp, #12]
 800ae3c:	f7fd fe13 	bl	8008a66 <change_bitmap>
 800ae40:	4606      	mov	r6, r0
				lclst = scl + tcl - 1;
 800ae42:	eb0a 0304 	add.w	r3, sl, r4
 800ae46:	f103 39ff 	add.w	r9, r3, #4294967295
 800ae4a:	e049      	b.n	800aee0 <f_expand+0x196>
			if (n == 1) { res = FR_INT_ERR; break; }
			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
			if (n == 0) {	/* Is it a free cluster? */
				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
			} else {
				scl = clst; ncl = 0;		/* Not a free cluster */
 800ae4c:	9401      	str	r4, [sp, #4]
 800ae4e:	f04f 0800 	mov.w	r8, #0
			}
			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
 800ae52:	454c      	cmp	r4, r9
 800ae54:	d015      	beq.n	800ae82 <f_expand+0x138>
			n = get_fat(&fp->obj, clst);
 800ae56:	4621      	mov	r1, r4
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f7fd ff23 	bl	8008ca4 <get_fat>
			if (++clst >= fs->n_fatent) clst = 2;
 800ae5e:	3401      	adds	r4, #1
 800ae60:	9b03      	ldr	r3, [sp, #12]
 800ae62:	6a1b      	ldr	r3, [r3, #32]
 800ae64:	42a3      	cmp	r3, r4
 800ae66:	d800      	bhi.n	800ae6a <f_expand+0x120>
 800ae68:	2402      	movs	r4, #2
			if (n == 1) { res = FR_INT_ERR; break; }
 800ae6a:	2801      	cmp	r0, #1
 800ae6c:	d00b      	beq.n	800ae86 <f_expand+0x13c>
			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ae6e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ae72:	d011      	beq.n	800ae98 <f_expand+0x14e>
			if (n == 0) {	/* Is it a free cluster? */
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d1e9      	bne.n	800ae4c <f_expand+0x102>
				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
 800ae78:	f108 0801 	add.w	r8, r8, #1
 800ae7c:	45c2      	cmp	sl, r8
 800ae7e:	d1e8      	bne.n	800ae52 <f_expand+0x108>
 800ae80:	e002      	b.n	800ae88 <f_expand+0x13e>
			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
 800ae82:	2607      	movs	r6, #7
 800ae84:	e000      	b.n	800ae88 <f_expand+0x13e>
			if (n == 1) { res = FR_INT_ERR; break; }
 800ae86:	2602      	movs	r6, #2
		}
		if (res == FR_OK) {	/* A contiguous free area is found */
 800ae88:	bb46      	cbnz	r6, 800aedc <f_expand+0x192>
			if (opt) {		/* Allocate it now */
 800ae8a:	f1bb 0f00 	cmp.w	fp, #0
 800ae8e:	d119      	bne.n	800aec4 <f_expand+0x17a>
					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
					if (res != FR_OK) break;
					lclst = clst;
				}
			} else {		/* Set it as suggested point for next allocation */
				lclst = scl - 1;
 800ae90:	9b01      	ldr	r3, [sp, #4]
 800ae92:	f103 39ff 	add.w	r9, r3, #4294967295
 800ae96:	e023      	b.n	800aee0 <f_expand+0x196>
			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ae98:	2601      	movs	r6, #1
 800ae9a:	e7f5      	b.n	800ae88 <f_expand+0x13e>
					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
 800ae9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aea0:	4621      	mov	r1, r4
 800aea2:	f7fd fe1e 	bl	8008ae2 <put_fat>
					if (res != FR_OK) break;
 800aea6:	4606      	mov	r6, r0
 800aea8:	b9d0      	cbnz	r0, 800aee0 <f_expand+0x196>
				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
 800aeaa:	f108 38ff 	add.w	r8, r8, #4294967295
					lclst = clst;
 800aeae:	46a1      	mov	r9, r4
				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
 800aeb0:	3401      	adds	r4, #1
 800aeb2:	f1b8 0f00 	cmp.w	r8, #0
 800aeb6:	d013      	beq.n	800aee0 <f_expand+0x196>
					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
 800aeb8:	9803      	ldr	r0, [sp, #12]
 800aeba:	f1b8 0f01 	cmp.w	r8, #1
 800aebe:	d0ed      	beq.n	800ae9c <f_expand+0x152>
 800aec0:	1c62      	adds	r2, r4, #1
 800aec2:	e7ed      	b.n	800aea0 <f_expand+0x156>
				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
 800aec4:	9c01      	ldr	r4, [sp, #4]
 800aec6:	46d0      	mov	r8, sl
	stcl = fs->last_clst; lclst = 0;
 800aec8:	f04f 0900 	mov.w	r9, #0
 800aecc:	e7f1      	b.n	800aeb2 <f_expand+0x168>
 800aece:	f04f 0900 	mov.w	r9, #0
		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aed2:	2601      	movs	r6, #1
 800aed4:	e004      	b.n	800aee0 <f_expand+0x196>
	stcl = fs->last_clst; lclst = 0;
 800aed6:	f04f 0900 	mov.w	r9, #0
 800aeda:	e001      	b.n	800aee0 <f_expand+0x196>
 800aedc:	f04f 0900 	mov.w	r9, #0
			}
		}
	}

	if (res == FR_OK) {
 800aee0:	bb06      	cbnz	r6, 800af24 <f_expand+0x1da>
		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
 800aee2:	9b03      	ldr	r3, [sp, #12]
 800aee4:	f8c3 9018 	str.w	r9, [r3, #24]
		if (opt) {	/* Is it allocated now? */
 800aee8:	f1bb 0f00 	cmp.w	fp, #0
 800aeec:	d01a      	beq.n	800af24 <f_expand+0x1da>
			fp->obj.sclust = scl;		/* Update object allocation information */
 800aeee:	9a01      	ldr	r2, [sp, #4]
 800aef0:	60aa      	str	r2, [r5, #8]
			fp->obj.objsize = fsz;
 800aef2:	612f      	str	r7, [r5, #16]
 800aef4:	9a00      	ldr	r2, [sp, #0]
 800aef6:	616a      	str	r2, [r5, #20]
			if (_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
 800aef8:	2202      	movs	r2, #2
 800aefa:	71ea      	strb	r2, [r5, #7]
			fp->flag |= FA_MODIFIED;
 800aefc:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 800af00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af04:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
			if (fs->free_clst <= fs->n_fatent - 2) {	/* Update FSINFO */
 800af08:	69d9      	ldr	r1, [r3, #28]
 800af0a:	6a1a      	ldr	r2, [r3, #32]
 800af0c:	3a02      	subs	r2, #2
 800af0e:	4291      	cmp	r1, r2
 800af10:	d808      	bhi.n	800af24 <f_expand+0x1da>
				fs->free_clst -= tcl;
 800af12:	eba1 010a 	sub.w	r1, r1, sl
 800af16:	61d9      	str	r1, [r3, #28]
				fs->fsi_flag |= 1;
 800af18:	791a      	ldrb	r2, [r3, #4]
 800af1a:	f042 0201 	orr.w	r2, r2, #1
 800af1e:	711a      	strb	r2, [r3, #4]
 800af20:	e000      	b.n	800af24 <f_expand+0x1da>
	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
 800af22:	2607      	movs	r6, #7
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800af24:	4630      	mov	r0, r6
 800af26:	b005      	add	sp, #20
 800af28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
 800af2c:	2607      	movs	r6, #7
 800af2e:	e7f9      	b.n	800af24 <f_expand+0x1da>
 800af30:	2607      	movs	r6, #7
 800af32:	e7f7      	b.n	800af24 <f_expand+0x1da>
	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size limit */
 800af34:	2607      	movs	r6, #7
 800af36:	e7f5      	b.n	800af24 <f_expand+0x1da>

0800af38 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800af38:	4b13      	ldr	r3, [pc, #76]	; (800af88 <FATFS_LinkDriverEx+0x50>)
 800af3a:	7a5b      	ldrb	r3, [r3, #9]
 800af3c:	bb13      	cbnz	r3, 800af84 <FATFS_LinkDriverEx+0x4c>
{
 800af3e:	b510      	push	{r4, lr}
 800af40:	4604      	mov	r4, r0
 800af42:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800af46:	4b10      	ldr	r3, [pc, #64]	; (800af88 <FATFS_LinkDriverEx+0x50>)
 800af48:	f893 c009 	ldrb.w	ip, [r3, #9]
 800af4c:	fa5f fc8c 	uxtb.w	ip, ip
 800af50:	f04f 0e00 	mov.w	lr, #0
 800af54:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800af58:	f893 c009 	ldrb.w	ip, [r3, #9]
 800af5c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800af60:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800af64:	7a5c      	ldrb	r4, [r3, #9]
 800af66:	441c      	add	r4, r3
 800af68:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800af6a:	7a5a      	ldrb	r2, [r3, #9]
 800af6c:	1c54      	adds	r4, r2, #1
 800af6e:	b2e4      	uxtb	r4, r4
 800af70:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800af72:	3230      	adds	r2, #48	; 0x30
 800af74:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800af76:	233a      	movs	r3, #58	; 0x3a
 800af78:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800af7a:	232f      	movs	r3, #47	; 0x2f
 800af7c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800af7e:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800af82:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800af84:	2001      	movs	r0, #1
}
 800af86:	4770      	bx	lr
 800af88:	20004ec0 	.word	0x20004ec0

0800af8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800af8c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800af8e:	2200      	movs	r2, #0
 800af90:	f7ff ffd2 	bl	800af38 <FATFS_LinkDriverEx>
}
 800af94:	bd08      	pop	{r3, pc}
	...

0800af98 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800af98:	287f      	cmp	r0, #127	; 0x7f
 800af9a:	d917      	bls.n	800afcc <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800af9c:	b131      	cbz	r1, 800afac <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800af9e:	28ff      	cmp	r0, #255	; 0xff
 800afa0:	d813      	bhi.n	800afca <ff_convert+0x32>
 800afa2:	3880      	subs	r0, #128	; 0x80
 800afa4:	4b0a      	ldr	r3, [pc, #40]	; (800afd0 <ff_convert+0x38>)
 800afa6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800afaa:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800afac:	2300      	movs	r3, #0
 800afae:	2b7f      	cmp	r3, #127	; 0x7f
 800afb0:	d807      	bhi.n	800afc2 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800afb2:	4a07      	ldr	r2, [pc, #28]	; (800afd0 <ff_convert+0x38>)
 800afb4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800afb8:	4282      	cmp	r2, r0
 800afba:	d002      	beq.n	800afc2 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 800afbc:	3301      	adds	r3, #1
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	e7f5      	b.n	800afae <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800afc2:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800afc6:	b2c0      	uxtb	r0, r0
 800afc8:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800afca:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	0800c3c4 	.word	0x0800c3c4

0800afd4 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800afd4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800afd8:	d207      	bcs.n	800afea <ff_wtoupper+0x16>
 800afda:	4b23      	ldr	r3, [pc, #140]	; (800b068 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 800afdc:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 800afde:	2a00      	cmp	r2, #0
 800afe0:	d041      	beq.n	800b066 <ff_wtoupper+0x92>
 800afe2:	4290      	cmp	r0, r2
 800afe4:	d33f      	bcc.n	800b066 <ff_wtoupper+0x92>
{
 800afe6:	b510      	push	{r4, lr}
 800afe8:	e006      	b.n	800aff8 <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 800afea:	4b20      	ldr	r3, [pc, #128]	; (800b06c <ff_wtoupper+0x98>)
 800afec:	e7f6      	b.n	800afdc <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800afee:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 800aff0:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 800aff2:	b1da      	cbz	r2, 800b02c <ff_wtoupper+0x58>
 800aff4:	4290      	cmp	r0, r2
 800aff6:	d319      	bcc.n	800b02c <ff_wtoupper+0x58>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800aff8:	f103 0e04 	add.w	lr, r3, #4
 800affc:	885b      	ldrh	r3, [r3, #2]
 800affe:	0a19      	lsrs	r1, r3, #8
 800b000:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800b002:	eb03 0c02 	add.w	ip, r3, r2
 800b006:	4560      	cmp	r0, ip
 800b008:	db04      	blt.n	800b014 <ff_wtoupper+0x40>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800b00a:	2900      	cmp	r1, #0
 800b00c:	d1ef      	bne.n	800afee <ff_wtoupper+0x1a>
 800b00e:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b012:	e7ed      	b.n	800aff0 <ff_wtoupper+0x1c>
			switch (cmd) {
 800b014:	2908      	cmp	r1, #8
 800b016:	d809      	bhi.n	800b02c <ff_wtoupper+0x58>
 800b018:	e8df f001 	tbb	[pc, r1]
 800b01c:	120f0905 	.word	0x120f0905
 800b020:	1e1b1815 	.word	0x1e1b1815
 800b024:	21          	.byte	0x21
 800b025:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b026:	1a84      	subs	r4, r0, r2
 800b028:	f83e 0014 	ldrh.w	r0, [lr, r4, lsl #1]
	}

	return chr;
}
 800b02c:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b02e:	1a83      	subs	r3, r0, r2
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	1ac0      	subs	r0, r0, r3
 800b036:	b280      	uxth	r0, r0
 800b038:	e7f8      	b.n	800b02c <ff_wtoupper+0x58>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b03a:	3810      	subs	r0, #16
 800b03c:	b280      	uxth	r0, r0
 800b03e:	e7f5      	b.n	800b02c <ff_wtoupper+0x58>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b040:	3820      	subs	r0, #32
 800b042:	b280      	uxth	r0, r0
 800b044:	e7f2      	b.n	800b02c <ff_wtoupper+0x58>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b046:	3830      	subs	r0, #48	; 0x30
 800b048:	b280      	uxth	r0, r0
 800b04a:	e7ef      	b.n	800b02c <ff_wtoupper+0x58>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b04c:	381a      	subs	r0, #26
 800b04e:	b280      	uxth	r0, r0
 800b050:	e7ec      	b.n	800b02c <ff_wtoupper+0x58>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b052:	3008      	adds	r0, #8
 800b054:	b280      	uxth	r0, r0
 800b056:	e7e9      	b.n	800b02c <ff_wtoupper+0x58>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b058:	3850      	subs	r0, #80	; 0x50
 800b05a:	b280      	uxth	r0, r0
 800b05c:	e7e6      	b.n	800b02c <ff_wtoupper+0x58>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b05e:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800b062:	b280      	uxth	r0, r0
 800b064:	e7e2      	b.n	800b02c <ff_wtoupper+0x58>
}
 800b066:	4770      	bx	lr
 800b068:	0800c4c4 	.word	0x0800c4c4
 800b06c:	0800c6b8 	.word	0x0800c6b8

0800b070 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b070:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b072:	2200      	movs	r2, #0
 800b074:	490f      	ldr	r1, [pc, #60]	; (800b0b4 <MX_USB_DEVICE_Init+0x44>)
 800b076:	4810      	ldr	r0, [pc, #64]	; (800b0b8 <MX_USB_DEVICE_Init+0x48>)
 800b078:	f7fc f830 	bl	80070dc <USBD_Init>
 800b07c:	b970      	cbnz	r0, 800b09c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b07e:	490f      	ldr	r1, [pc, #60]	; (800b0bc <MX_USB_DEVICE_Init+0x4c>)
 800b080:	480d      	ldr	r0, [pc, #52]	; (800b0b8 <MX_USB_DEVICE_Init+0x48>)
 800b082:	f7fc f842 	bl	800710a <USBD_RegisterClass>
 800b086:	b960      	cbnz	r0, 800b0a2 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b088:	490d      	ldr	r1, [pc, #52]	; (800b0c0 <MX_USB_DEVICE_Init+0x50>)
 800b08a:	480b      	ldr	r0, [pc, #44]	; (800b0b8 <MX_USB_DEVICE_Init+0x48>)
 800b08c:	f7fb ffc8 	bl	8007020 <USBD_CDC_RegisterInterface>
 800b090:	b950      	cbnz	r0, 800b0a8 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b092:	4809      	ldr	r0, [pc, #36]	; (800b0b8 <MX_USB_DEVICE_Init+0x48>)
 800b094:	f7fc f853 	bl	800713e <USBD_Start>
 800b098:	b948      	cbnz	r0, 800b0ae <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b09a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800b09c:	f7f6 fa4c 	bl	8001538 <Error_Handler>
 800b0a0:	e7ed      	b.n	800b07e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800b0a2:	f7f6 fa49 	bl	8001538 <Error_Handler>
 800b0a6:	e7ef      	b.n	800b088 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800b0a8:	f7f6 fa46 	bl	8001538 <Error_Handler>
 800b0ac:	e7f1      	b.n	800b092 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800b0ae:	f7f6 fa43 	bl	8001538 <Error_Handler>
}
 800b0b2:	e7f2      	b.n	800b09a <MX_USB_DEVICE_Init+0x2a>
 800b0b4:	200001e0 	.word	0x200001e0
 800b0b8:	20004ecc 	.word	0x20004ecc
 800b0bc:	20000144 	.word	0x20000144
 800b0c0:	200001cc 	.word	0x200001cc

0800b0c4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	4770      	bx	lr

0800b0c8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	4770      	bx	lr

0800b0cc <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	4770      	bx	lr

0800b0d0 <CDC_Receive_FS>:
{
 800b0d0:	b570      	push	{r4, r5, r6, lr}
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b0d6:	4e07      	ldr	r6, [pc, #28]	; (800b0f4 <CDC_Receive_FS+0x24>)
 800b0d8:	4601      	mov	r1, r0
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f7fb ffb9 	bl	8007052 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f7fb ffdf 	bl	80070a4 <USBD_CDC_ReceivePacket>
  vcp_RxDataHandler(Buf, Len);
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f7f5 fa89 	bl	8000600 <vcp_RxDataHandler>
}
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	bd70      	pop	{r4, r5, r6, pc}
 800b0f2:	bf00      	nop
 800b0f4:	20004ecc 	.word	0x20004ecc

0800b0f8 <CDC_Init_FS>:
{
 800b0f8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b0fa:	4c06      	ldr	r4, [pc, #24]	; (800b114 <CDC_Init_FS+0x1c>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	4906      	ldr	r1, [pc, #24]	; (800b118 <CDC_Init_FS+0x20>)
 800b100:	4620      	mov	r0, r4
 800b102:	f7fb ff98 	bl	8007036 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b106:	4905      	ldr	r1, [pc, #20]	; (800b11c <CDC_Init_FS+0x24>)
 800b108:	4620      	mov	r0, r4
 800b10a:	f7fb ffa2 	bl	8007052 <USBD_CDC_SetRxBuffer>
}
 800b10e:	2000      	movs	r0, #0
 800b110:	bd10      	pop	{r4, pc}
 800b112:	bf00      	nop
 800b114:	20004ecc 	.word	0x20004ecc
 800b118:	200059a8 	.word	0x200059a8
 800b11c:	200051a8 	.word	0x200051a8

0800b120 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b120:	4b09      	ldr	r3, [pc, #36]	; (800b148 <CDC_Transmit_FS+0x28>)
 800b122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800b126:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b12a:	b10b      	cbz	r3, 800b130 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 800b12c:	2001      	movs	r0, #1
}
 800b12e:	4770      	bx	lr
{
 800b130:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b132:	4c05      	ldr	r4, [pc, #20]	; (800b148 <CDC_Transmit_FS+0x28>)
 800b134:	460a      	mov	r2, r1
 800b136:	4601      	mov	r1, r0
 800b138:	4620      	mov	r0, r4
 800b13a:	f7fb ff7c 	bl	8007036 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b13e:	4620      	mov	r0, r4
 800b140:	f7fb ff93 	bl	800706a <USBD_CDC_TransmitPacket>
}
 800b144:	bd10      	pop	{r4, pc}
 800b146:	bf00      	nop
 800b148:	20004ecc 	.word	0x20004ecc

0800b14c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b14c:	2312      	movs	r3, #18
 800b14e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800b150:	4800      	ldr	r0, [pc, #0]	; (800b154 <USBD_FS_DeviceDescriptor+0x8>)
 800b152:	4770      	bx	lr
 800b154:	2000020c 	.word	0x2000020c

0800b158 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b158:	2304      	movs	r3, #4
 800b15a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800b15c:	4800      	ldr	r0, [pc, #0]	; (800b160 <USBD_FS_LangIDStrDescriptor+0x8>)
 800b15e:	4770      	bx	lr
 800b160:	20000220 	.word	0x20000220

0800b164 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b164:	230c      	movs	r3, #12
 800b166:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800b168:	4800      	ldr	r0, [pc, #0]	; (800b16c <USBD_FS_USR_BOSDescriptor+0x8>)
 800b16a:	4770      	bx	lr
 800b16c:	20000200 	.word	0x20000200

0800b170 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800b170:	2300      	movs	r3, #0
 800b172:	4293      	cmp	r3, r2
 800b174:	d21e      	bcs.n	800b1b4 <IntToUnicode+0x44>
{
 800b176:	b500      	push	{lr}
 800b178:	e010      	b.n	800b19c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b17a:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 800b17e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800b182:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800b184:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800b188:	f10c 0c01 	add.w	ip, ip, #1
 800b18c:	f04f 0e00 	mov.w	lr, #0
 800b190:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800b194:	3301      	adds	r3, #1
 800b196:	b2db      	uxtb	r3, r3
 800b198:	4293      	cmp	r3, r2
 800b19a:	d209      	bcs.n	800b1b0 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800b19c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800b1a0:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800b1a4:	d2e9      	bcs.n	800b17a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800b1a6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800b1aa:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800b1ae:	e7e8      	b.n	800b182 <IntToUnicode+0x12>
  }
}
 800b1b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1b4:	4770      	bx	lr
	...

0800b1b8 <Get_SerialNum>:
{
 800b1b8:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1ba:	4b0b      	ldr	r3, [pc, #44]	; (800b1e8 <Get_SerialNum+0x30>)
 800b1bc:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b1c0:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	; 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b1c4:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
  if (deviceserial0 != 0)
 800b1c8:	18c0      	adds	r0, r0, r3
 800b1ca:	d100      	bne.n	800b1ce <Get_SerialNum+0x16>
}
 800b1cc:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b1ce:	4d07      	ldr	r5, [pc, #28]	; (800b1ec <Get_SerialNum+0x34>)
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	1ca9      	adds	r1, r5, #2
 800b1d4:	f7ff ffcc 	bl	800b170 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b1d8:	2204      	movs	r2, #4
 800b1da:	f105 0112 	add.w	r1, r5, #18
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f7ff ffc6 	bl	800b170 <IntToUnicode>
}
 800b1e4:	e7f2      	b.n	800b1cc <Get_SerialNum+0x14>
 800b1e6:	bf00      	nop
 800b1e8:	1fff7000 	.word	0x1fff7000
 800b1ec:	20000224 	.word	0x20000224

0800b1f0 <USBD_FS_SerialStrDescriptor>:
{
 800b1f0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800b1f2:	231a      	movs	r3, #26
 800b1f4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800b1f6:	f7ff ffdf 	bl	800b1b8 <Get_SerialNum>
}
 800b1fa:	4801      	ldr	r0, [pc, #4]	; (800b200 <USBD_FS_SerialStrDescriptor+0x10>)
 800b1fc:	bd08      	pop	{r3, pc}
 800b1fe:	bf00      	nop
 800b200:	20000224 	.word	0x20000224

0800b204 <USBD_FS_ProductStrDescriptor>:
{
 800b204:	b508      	push	{r3, lr}
 800b206:	460a      	mov	r2, r1
  if(speed == 0)
 800b208:	b928      	cbnz	r0, 800b216 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b20a:	4905      	ldr	r1, [pc, #20]	; (800b220 <USBD_FS_ProductStrDescriptor+0x1c>)
 800b20c:	4805      	ldr	r0, [pc, #20]	; (800b224 <USBD_FS_ProductStrDescriptor+0x20>)
 800b20e:	f7fc fcf2 	bl	8007bf6 <USBD_GetString>
}
 800b212:	4803      	ldr	r0, [pc, #12]	; (800b220 <USBD_FS_ProductStrDescriptor+0x1c>)
 800b214:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b216:	4902      	ldr	r1, [pc, #8]	; (800b220 <USBD_FS_ProductStrDescriptor+0x1c>)
 800b218:	4802      	ldr	r0, [pc, #8]	; (800b224 <USBD_FS_ProductStrDescriptor+0x20>)
 800b21a:	f7fc fcec 	bl	8007bf6 <USBD_GetString>
 800b21e:	e7f8      	b.n	800b212 <USBD_FS_ProductStrDescriptor+0xe>
 800b220:	200061a8 	.word	0x200061a8
 800b224:	0800c774 	.word	0x0800c774

0800b228 <USBD_FS_ManufacturerStrDescriptor>:
{
 800b228:	b510      	push	{r4, lr}
 800b22a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b22c:	4c03      	ldr	r4, [pc, #12]	; (800b23c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800b22e:	4621      	mov	r1, r4
 800b230:	4803      	ldr	r0, [pc, #12]	; (800b240 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800b232:	f7fc fce0 	bl	8007bf6 <USBD_GetString>
}
 800b236:	4620      	mov	r0, r4
 800b238:	bd10      	pop	{r4, pc}
 800b23a:	bf00      	nop
 800b23c:	200061a8 	.word	0x200061a8
 800b240:	0800c78c 	.word	0x0800c78c

0800b244 <USBD_FS_ConfigStrDescriptor>:
{
 800b244:	b508      	push	{r3, lr}
 800b246:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800b248:	b928      	cbnz	r0, 800b256 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b24a:	4905      	ldr	r1, [pc, #20]	; (800b260 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800b24c:	4805      	ldr	r0, [pc, #20]	; (800b264 <USBD_FS_ConfigStrDescriptor+0x20>)
 800b24e:	f7fc fcd2 	bl	8007bf6 <USBD_GetString>
}
 800b252:	4803      	ldr	r0, [pc, #12]	; (800b260 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800b254:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b256:	4902      	ldr	r1, [pc, #8]	; (800b260 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800b258:	4802      	ldr	r0, [pc, #8]	; (800b264 <USBD_FS_ConfigStrDescriptor+0x20>)
 800b25a:	f7fc fccc 	bl	8007bf6 <USBD_GetString>
 800b25e:	e7f8      	b.n	800b252 <USBD_FS_ConfigStrDescriptor+0xe>
 800b260:	200061a8 	.word	0x200061a8
 800b264:	0800c7a0 	.word	0x0800c7a0

0800b268 <USBD_FS_InterfaceStrDescriptor>:
{
 800b268:	b508      	push	{r3, lr}
 800b26a:	460a      	mov	r2, r1
  if(speed == 0)
 800b26c:	b928      	cbnz	r0, 800b27a <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b26e:	4905      	ldr	r1, [pc, #20]	; (800b284 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800b270:	4805      	ldr	r0, [pc, #20]	; (800b288 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800b272:	f7fc fcc0 	bl	8007bf6 <USBD_GetString>
}
 800b276:	4803      	ldr	r0, [pc, #12]	; (800b284 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800b278:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b27a:	4902      	ldr	r1, [pc, #8]	; (800b284 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800b27c:	4802      	ldr	r0, [pc, #8]	; (800b288 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800b27e:	f7fc fcba 	bl	8007bf6 <USBD_GetString>
 800b282:	e7f8      	b.n	800b276 <USBD_FS_InterfaceStrDescriptor+0xe>
 800b284:	200061a8 	.word	0x200061a8
 800b288:	0800c7ac 	.word	0x0800c7ac

0800b28c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b28c:	b530      	push	{r4, r5, lr}
 800b28e:	b09f      	sub	sp, #124	; 0x7c
 800b290:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b292:	2100      	movs	r1, #0
 800b294:	9119      	str	r1, [sp, #100]	; 0x64
 800b296:	911a      	str	r1, [sp, #104]	; 0x68
 800b298:	911b      	str	r1, [sp, #108]	; 0x6c
 800b29a:	911c      	str	r1, [sp, #112]	; 0x70
 800b29c:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b29e:	225c      	movs	r2, #92	; 0x5c
 800b2a0:	a802      	add	r0, sp, #8
 800b2a2:	f000 f9af 	bl	800b604 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2ac:	d001      	beq.n	800b2b2 <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b2ae:	b01f      	add	sp, #124	; 0x7c
 800b2b0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b2b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2b6:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b2b8:	a802      	add	r0, sp, #8
 800b2ba:	f7f8 fa5b 	bl	8003774 <HAL_RCCEx_PeriphCLKConfig>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d130      	bne.n	800b324 <HAL_PCD_MspInit+0x98>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2c2:	2500      	movs	r5, #0
 800b2c4:	9500      	str	r5, [sp, #0]
 800b2c6:	4c19      	ldr	r4, [pc, #100]	; (800b32c <HAL_PCD_MspInit+0xa0>)
 800b2c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b2ca:	f043 0301 	orr.w	r3, r3, #1
 800b2ce:	6323      	str	r3, [r4, #48]	; 0x30
 800b2d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b2da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b2de:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2e4:	951b      	str	r5, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b2ea:	230a      	movs	r3, #10
 800b2ec:	931d      	str	r3, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2ee:	a919      	add	r1, sp, #100	; 0x64
 800b2f0:	480f      	ldr	r0, [pc, #60]	; (800b330 <HAL_PCD_MspInit+0xa4>)
 800b2f2:	f7f7 f9dd 	bl	80026b0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b2f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2fc:	6363      	str	r3, [r4, #52]	; 0x34
 800b2fe:	9501      	str	r5, [sp, #4]
 800b300:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b306:	6463      	str	r3, [r4, #68]	; 0x44
 800b308:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b30a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b312:	462a      	mov	r2, r5
 800b314:	4629      	mov	r1, r5
 800b316:	2043      	movs	r0, #67	; 0x43
 800b318:	f7f6 ff4e 	bl	80021b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b31c:	2043      	movs	r0, #67	; 0x43
 800b31e:	f7f6 ff83 	bl	8002228 <HAL_NVIC_EnableIRQ>
}
 800b322:	e7c4      	b.n	800b2ae <HAL_PCD_MspInit+0x22>
      Error_Handler();
 800b324:	f7f6 f908 	bl	8001538 <Error_Handler>
 800b328:	e7cb      	b.n	800b2c2 <HAL_PCD_MspInit+0x36>
 800b32a:	bf00      	nop
 800b32c:	40023800 	.word	0x40023800
 800b330:	40020000 	.word	0x40020000

0800b334 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b334:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b336:	f200 41c4 	addw	r1, r0, #1220	; 0x4c4
 800b33a:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800b33e:	f7fb ff14 	bl	800716a <USBD_LL_SetupStage>
}
 800b342:	bd08      	pop	{r3, pc}

0800b344 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b344:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b346:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800b34a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b34e:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800b352:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800b356:	f7fb ffd5 	bl	8007304 <USBD_LL_DataOutStage>
}
 800b35a:	bd08      	pop	{r3, pc}

0800b35c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b35c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b35e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800b362:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b368:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800b36c:	f7fc f82d 	bl	80073ca <USBD_LL_DataInStage>
}
 800b370:	bd08      	pop	{r3, pc}

0800b372 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b372:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b374:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800b378:	f7fb ff6f 	bl	800725a <USBD_LL_SOF>
}
 800b37c:	bd08      	pop	{r3, pc}

0800b37e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b37e:	b510      	push	{r4, lr}
 800b380:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b382:	68c3      	ldr	r3, [r0, #12]
 800b384:	b13b      	cbz	r3, 800b396 <HAL_PCD_ResetCallback+0x18>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b386:	2b02      	cmp	r3, #2
 800b388:	d101      	bne.n	800b38e <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
 800b38a:	2101      	movs	r1, #1
 800b38c:	e004      	b.n	800b398 <HAL_PCD_ResetCallback+0x1a>
  }
  else
  {
    Error_Handler();
 800b38e:	f7f6 f8d3 	bl	8001538 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b392:	2101      	movs	r1, #1
 800b394:	e000      	b.n	800b398 <HAL_PCD_ResetCallback+0x1a>
    speed = USBD_SPEED_HIGH;
 800b396:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b398:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 800b39c:	f7fb ff43 	bl	8007226 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b3a0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 800b3a4:	f7fb ff0d 	bl	80071c2 <USBD_LL_Reset>
}
 800b3a8:	bd10      	pop	{r4, pc}
	...

0800b3ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3ac:	b510      	push	{r4, lr}
 800b3ae:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b3b0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800b3b4:	f7fb ff3a 	bl	800722c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b3b8:	6822      	ldr	r2, [r4, #0]
 800b3ba:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800b3be:	f043 0301 	orr.w	r3, r3, #1
 800b3c2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b3c6:	6a23      	ldr	r3, [r4, #32]
 800b3c8:	b123      	cbz	r3, 800b3d4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3ca:	4a03      	ldr	r2, [pc, #12]	; (800b3d8 <HAL_PCD_SuspendCallback+0x2c>)
 800b3cc:	6913      	ldr	r3, [r2, #16]
 800b3ce:	f043 0306 	orr.w	r3, r3, #6
 800b3d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b3d4:	bd10      	pop	{r4, pc}
 800b3d6:	bf00      	nop
 800b3d8:	e000ed00 	.word	0xe000ed00

0800b3dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b3de:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800b3e2:	f7fb ff2d 	bl	8007240 <USBD_LL_Resume>
}
 800b3e6:	bd08      	pop	{r3, pc}

0800b3e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e8:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b3ea:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800b3ee:	f7fb ff5c 	bl	80072aa <USBD_LL_IsoOUTIncomplete>
}
 800b3f2:	bd08      	pop	{r3, pc}

0800b3f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3f4:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b3f6:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800b3fa:	f7fb ff3f 	bl	800727c <USBD_LL_IsoINIncomplete>
}
 800b3fe:	bd08      	pop	{r3, pc}

0800b400 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b400:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b402:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800b406:	f7fb ff67 	bl	80072d8 <USBD_LL_DevConnected>
}
 800b40a:	bd08      	pop	{r3, pc}

0800b40c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b40c:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b40e:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800b412:	f7fb ff63 	bl	80072dc <USBD_LL_DevDisconnected>
}
 800b416:	bd08      	pop	{r3, pc}

0800b418 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b418:	7802      	ldrb	r2, [r0, #0]
 800b41a:	b10a      	cbz	r2, 800b420 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800b41c:	2000      	movs	r0, #0
 800b41e:	4770      	bx	lr
{
 800b420:	b510      	push	{r4, lr}
 800b422:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 800b424:	4815      	ldr	r0, [pc, #84]	; (800b47c <USBD_LL_Init+0x64>)
 800b426:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b42a:	f8c3 02c8 	str.w	r0, [r3, #712]	; 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b42e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800b432:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b434:	2306      	movs	r3, #6
 800b436:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b438:	2202      	movs	r2, #2
 800b43a:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b43c:	2300      	movs	r3, #0
 800b43e:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b440:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b442:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b444:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b446:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b448:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b44a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b44c:	f7f7 fa9e 	bl	800298c <HAL_PCD_Init>
 800b450:	b980      	cbnz	r0, 800b474 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b452:	4c0a      	ldr	r4, [pc, #40]	; (800b47c <USBD_LL_Init+0x64>)
 800b454:	2180      	movs	r1, #128	; 0x80
 800b456:	4620      	mov	r0, r4
 800b458:	f7f8 f8be 	bl	80035d8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b45c:	2240      	movs	r2, #64	; 0x40
 800b45e:	2100      	movs	r1, #0
 800b460:	4620      	mov	r0, r4
 800b462:	f7f8 f893 	bl	800358c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b466:	2280      	movs	r2, #128	; 0x80
 800b468:	2101      	movs	r1, #1
 800b46a:	4620      	mov	r0, r4
 800b46c:	f7f8 f88e 	bl	800358c <HAL_PCDEx_SetTxFiFo>
}
 800b470:	2000      	movs	r0, #0
 800b472:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800b474:	f7f6 f860 	bl	8001538 <Error_Handler>
 800b478:	e7eb      	b.n	800b452 <USBD_LL_Init+0x3a>
 800b47a:	bf00      	nop
 800b47c:	200063a8 	.word	0x200063a8

0800b480 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b480:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8

  if((ep_addr & 0x80) == 0x80)
 800b484:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b488:	d108      	bne.n	800b49c <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b48a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b48e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800b492:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b496:	f893 027e 	ldrb.w	r0, [r3, #638]	; 0x27e
  }
}
 800b49a:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b49c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b4a0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800b4a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b4a8:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 800b4ac:	4770      	bx	lr

0800b4ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4ae:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b4b0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800b4b4:	f7f7 fc95 	bl	8002de2 <HAL_PCD_EP_GetRxCount>
}
 800b4b8:	bd08      	pop	{r3, pc}
	...

0800b4bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	4604      	mov	r4, r0
  switch (msg)
 800b4c0:	b111      	cbz	r1, 800b4c8 <HAL_PCDEx_LPM_Callback+0xc>
 800b4c2:	2901      	cmp	r1, #1
 800b4c4:	d016      	beq.n	800b4f4 <HAL_PCDEx_LPM_Callback+0x38>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b4c6:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800b4c8:	6a03      	ldr	r3, [r0, #32]
 800b4ca:	b95b      	cbnz	r3, 800b4e4 <HAL_PCDEx_LPM_Callback+0x28>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b4cc:	6822      	ldr	r2, [r4, #0]
 800b4ce:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800b4d2:	f023 0301 	bic.w	r3, r3, #1
 800b4d6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 800b4da:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 800b4de:	f7fb feaf 	bl	8007240 <USBD_LL_Resume>
    break;
 800b4e2:	e7f0      	b.n	800b4c6 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClock_Config();
 800b4e4:	f7f6 f920 	bl	8001728 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4e8:	4a0c      	ldr	r2, [pc, #48]	; (800b51c <HAL_PCDEx_LPM_Callback+0x60>)
 800b4ea:	6913      	ldr	r3, [r2, #16]
 800b4ec:	f023 0306 	bic.w	r3, r3, #6
 800b4f0:	6113      	str	r3, [r2, #16]
 800b4f2:	e7eb      	b.n	800b4cc <HAL_PCDEx_LPM_Callback+0x10>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b4f4:	6802      	ldr	r2, [r0, #0]
 800b4f6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800b4fa:	f043 0301 	orr.w	r3, r3, #1
 800b4fe:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 800b502:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800b506:	f7fb fe91 	bl	800722c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b50a:	6a23      	ldr	r3, [r4, #32]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0da      	beq.n	800b4c6 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b510:	4a02      	ldr	r2, [pc, #8]	; (800b51c <HAL_PCDEx_LPM_Callback+0x60>)
 800b512:	6913      	ldr	r3, [r2, #16]
 800b514:	f043 0306 	orr.w	r3, r3, #6
 800b518:	6113      	str	r3, [r2, #16]
}
 800b51a:	e7d4      	b.n	800b4c6 <HAL_PCDEx_LPM_Callback+0xa>
 800b51c:	e000ed00 	.word	0xe000ed00

0800b520 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800b520:	4800      	ldr	r0, [pc, #0]	; (800b524 <USBD_static_malloc+0x4>)
 800b522:	4770      	bx	lr
 800b524:	200068b4 	.word	0x200068b4

0800b528 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 800b528:	4770      	bx	lr

0800b52a <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800b52a:	2803      	cmp	r0, #3
 800b52c:	d805      	bhi.n	800b53a <USBD_Get_USB_Status+0x10>
 800b52e:	e8df f000 	tbb	[pc, r0]
 800b532:	0405      	.short	0x0405
 800b534:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b536:	2001      	movs	r0, #1
    break;
 800b538:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800b53a:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800b53c:	4770      	bx	lr

0800b53e <USBD_LL_Start>:
{
 800b53e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800b540:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800b544:	f7f7 fac0 	bl	8002ac8 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b548:	f7ff ffef 	bl	800b52a <USBD_Get_USB_Status>
}
 800b54c:	bd08      	pop	{r3, pc}

0800b54e <USBD_LL_OpenEP>:
{
 800b54e:	b508      	push	{r3, lr}
 800b550:	4694      	mov	ip, r2
 800b552:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b554:	4663      	mov	r3, ip
 800b556:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800b55a:	f7f7 fb95 	bl	8002c88 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b55e:	f7ff ffe4 	bl	800b52a <USBD_Get_USB_Status>
}
 800b562:	bd08      	pop	{r3, pc}

0800b564 <USBD_LL_CloseEP>:
{
 800b564:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b566:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800b56a:	f7f7 fbd2 	bl	8002d12 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b56e:	f7ff ffdc 	bl	800b52a <USBD_Get_USB_Status>
}
 800b572:	bd08      	pop	{r3, pc}

0800b574 <USBD_LL_StallEP>:
{
 800b574:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b576:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800b57a:	f7f7 fc6a 	bl	8002e52 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b57e:	f7ff ffd4 	bl	800b52a <USBD_Get_USB_Status>
}
 800b582:	bd08      	pop	{r3, pc}

0800b584 <USBD_LL_ClearStallEP>:
{
 800b584:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b586:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800b58a:	f7f7 fca6 	bl	8002eda <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b58e:	f7ff ffcc 	bl	800b52a <USBD_Get_USB_Status>
}
 800b592:	bd08      	pop	{r3, pc}

0800b594 <USBD_LL_SetUSBAddress>:
{
 800b594:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b596:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800b59a:	f7f7 fb61 	bl	8002c60 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b59e:	f7ff ffc4 	bl	800b52a <USBD_Get_USB_Status>
}
 800b5a2:	bd08      	pop	{r3, pc}

0800b5a4 <USBD_LL_Transmit>:
{
 800b5a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b5a6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800b5aa:	f7f7 fc23 	bl	8002df4 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5ae:	f7ff ffbc 	bl	800b52a <USBD_Get_USB_Status>
}
 800b5b2:	bd08      	pop	{r3, pc}

0800b5b4 <USBD_LL_PrepareReceive>:
{
 800b5b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b5b6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800b5ba:	f7f7 fbe3 	bl	8002d84 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5be:	f7ff ffb4 	bl	800b52a <USBD_Get_USB_Status>
}
 800b5c2:	bd08      	pop	{r3, pc}

0800b5c4 <siprintf>:
 800b5c4:	b40e      	push	{r1, r2, r3}
 800b5c6:	b500      	push	{lr}
 800b5c8:	b09c      	sub	sp, #112	; 0x70
 800b5ca:	ab1d      	add	r3, sp, #116	; 0x74
 800b5cc:	9002      	str	r0, [sp, #8]
 800b5ce:	9006      	str	r0, [sp, #24]
 800b5d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5d4:	4809      	ldr	r0, [pc, #36]	; (800b5fc <siprintf+0x38>)
 800b5d6:	9107      	str	r1, [sp, #28]
 800b5d8:	9104      	str	r1, [sp, #16]
 800b5da:	4909      	ldr	r1, [pc, #36]	; (800b600 <siprintf+0x3c>)
 800b5dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5e0:	9105      	str	r1, [sp, #20]
 800b5e2:	6800      	ldr	r0, [r0, #0]
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	a902      	add	r1, sp, #8
 800b5e8:	f000 f9a0 	bl	800b92c <_svfiprintf_r>
 800b5ec:	9b02      	ldr	r3, [sp, #8]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	701a      	strb	r2, [r3, #0]
 800b5f2:	b01c      	add	sp, #112	; 0x70
 800b5f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5f8:	b003      	add	sp, #12
 800b5fa:	4770      	bx	lr
 800b5fc:	2000028c 	.word	0x2000028c
 800b600:	ffff0208 	.word	0xffff0208

0800b604 <memset>:
 800b604:	4402      	add	r2, r0
 800b606:	4603      	mov	r3, r0
 800b608:	4293      	cmp	r3, r2
 800b60a:	d100      	bne.n	800b60e <memset+0xa>
 800b60c:	4770      	bx	lr
 800b60e:	f803 1b01 	strb.w	r1, [r3], #1
 800b612:	e7f9      	b.n	800b608 <memset+0x4>

0800b614 <__errno>:
 800b614:	4b01      	ldr	r3, [pc, #4]	; (800b61c <__errno+0x8>)
 800b616:	6818      	ldr	r0, [r3, #0]
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	2000028c 	.word	0x2000028c

0800b620 <__libc_init_array>:
 800b620:	b570      	push	{r4, r5, r6, lr}
 800b622:	4d0d      	ldr	r5, [pc, #52]	; (800b658 <__libc_init_array+0x38>)
 800b624:	4c0d      	ldr	r4, [pc, #52]	; (800b65c <__libc_init_array+0x3c>)
 800b626:	1b64      	subs	r4, r4, r5
 800b628:	10a4      	asrs	r4, r4, #2
 800b62a:	2600      	movs	r6, #0
 800b62c:	42a6      	cmp	r6, r4
 800b62e:	d109      	bne.n	800b644 <__libc_init_array+0x24>
 800b630:	4d0b      	ldr	r5, [pc, #44]	; (800b660 <__libc_init_array+0x40>)
 800b632:	4c0c      	ldr	r4, [pc, #48]	; (800b664 <__libc_init_array+0x44>)
 800b634:	f000 fc6a 	bl	800bf0c <_init>
 800b638:	1b64      	subs	r4, r4, r5
 800b63a:	10a4      	asrs	r4, r4, #2
 800b63c:	2600      	movs	r6, #0
 800b63e:	42a6      	cmp	r6, r4
 800b640:	d105      	bne.n	800b64e <__libc_init_array+0x2e>
 800b642:	bd70      	pop	{r4, r5, r6, pc}
 800b644:	f855 3b04 	ldr.w	r3, [r5], #4
 800b648:	4798      	blx	r3
 800b64a:	3601      	adds	r6, #1
 800b64c:	e7ee      	b.n	800b62c <__libc_init_array+0xc>
 800b64e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b652:	4798      	blx	r3
 800b654:	3601      	adds	r6, #1
 800b656:	e7f2      	b.n	800b63e <__libc_init_array+0x1e>
 800b658:	0800c7f8 	.word	0x0800c7f8
 800b65c:	0800c7f8 	.word	0x0800c7f8
 800b660:	0800c7f8 	.word	0x0800c7f8
 800b664:	0800c7fc 	.word	0x0800c7fc

0800b668 <__retarget_lock_acquire_recursive>:
 800b668:	4770      	bx	lr

0800b66a <__retarget_lock_release_recursive>:
 800b66a:	4770      	bx	lr

0800b66c <memcpy>:
 800b66c:	440a      	add	r2, r1
 800b66e:	4291      	cmp	r1, r2
 800b670:	f100 33ff 	add.w	r3, r0, #4294967295
 800b674:	d100      	bne.n	800b678 <memcpy+0xc>
 800b676:	4770      	bx	lr
 800b678:	b510      	push	{r4, lr}
 800b67a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b67e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b682:	4291      	cmp	r1, r2
 800b684:	d1f9      	bne.n	800b67a <memcpy+0xe>
 800b686:	bd10      	pop	{r4, pc}

0800b688 <_free_r>:
 800b688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b68a:	2900      	cmp	r1, #0
 800b68c:	d044      	beq.n	800b718 <_free_r+0x90>
 800b68e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b692:	9001      	str	r0, [sp, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	f1a1 0404 	sub.w	r4, r1, #4
 800b69a:	bfb8      	it	lt
 800b69c:	18e4      	addlt	r4, r4, r3
 800b69e:	f000 f8df 	bl	800b860 <__malloc_lock>
 800b6a2:	4a1e      	ldr	r2, [pc, #120]	; (800b71c <_free_r+0x94>)
 800b6a4:	9801      	ldr	r0, [sp, #4]
 800b6a6:	6813      	ldr	r3, [r2, #0]
 800b6a8:	b933      	cbnz	r3, 800b6b8 <_free_r+0x30>
 800b6aa:	6063      	str	r3, [r4, #4]
 800b6ac:	6014      	str	r4, [r2, #0]
 800b6ae:	b003      	add	sp, #12
 800b6b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6b4:	f000 b8da 	b.w	800b86c <__malloc_unlock>
 800b6b8:	42a3      	cmp	r3, r4
 800b6ba:	d908      	bls.n	800b6ce <_free_r+0x46>
 800b6bc:	6825      	ldr	r5, [r4, #0]
 800b6be:	1961      	adds	r1, r4, r5
 800b6c0:	428b      	cmp	r3, r1
 800b6c2:	bf01      	itttt	eq
 800b6c4:	6819      	ldreq	r1, [r3, #0]
 800b6c6:	685b      	ldreq	r3, [r3, #4]
 800b6c8:	1949      	addeq	r1, r1, r5
 800b6ca:	6021      	streq	r1, [r4, #0]
 800b6cc:	e7ed      	b.n	800b6aa <_free_r+0x22>
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	b10b      	cbz	r3, 800b6d8 <_free_r+0x50>
 800b6d4:	42a3      	cmp	r3, r4
 800b6d6:	d9fa      	bls.n	800b6ce <_free_r+0x46>
 800b6d8:	6811      	ldr	r1, [r2, #0]
 800b6da:	1855      	adds	r5, r2, r1
 800b6dc:	42a5      	cmp	r5, r4
 800b6de:	d10b      	bne.n	800b6f8 <_free_r+0x70>
 800b6e0:	6824      	ldr	r4, [r4, #0]
 800b6e2:	4421      	add	r1, r4
 800b6e4:	1854      	adds	r4, r2, r1
 800b6e6:	42a3      	cmp	r3, r4
 800b6e8:	6011      	str	r1, [r2, #0]
 800b6ea:	d1e0      	bne.n	800b6ae <_free_r+0x26>
 800b6ec:	681c      	ldr	r4, [r3, #0]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	6053      	str	r3, [r2, #4]
 800b6f2:	440c      	add	r4, r1
 800b6f4:	6014      	str	r4, [r2, #0]
 800b6f6:	e7da      	b.n	800b6ae <_free_r+0x26>
 800b6f8:	d902      	bls.n	800b700 <_free_r+0x78>
 800b6fa:	230c      	movs	r3, #12
 800b6fc:	6003      	str	r3, [r0, #0]
 800b6fe:	e7d6      	b.n	800b6ae <_free_r+0x26>
 800b700:	6825      	ldr	r5, [r4, #0]
 800b702:	1961      	adds	r1, r4, r5
 800b704:	428b      	cmp	r3, r1
 800b706:	bf04      	itt	eq
 800b708:	6819      	ldreq	r1, [r3, #0]
 800b70a:	685b      	ldreq	r3, [r3, #4]
 800b70c:	6063      	str	r3, [r4, #4]
 800b70e:	bf04      	itt	eq
 800b710:	1949      	addeq	r1, r1, r5
 800b712:	6021      	streq	r1, [r4, #0]
 800b714:	6054      	str	r4, [r2, #4]
 800b716:	e7ca      	b.n	800b6ae <_free_r+0x26>
 800b718:	b003      	add	sp, #12
 800b71a:	bd30      	pop	{r4, r5, pc}
 800b71c:	20006c14 	.word	0x20006c14

0800b720 <sbrk_aligned>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	4e0e      	ldr	r6, [pc, #56]	; (800b75c <sbrk_aligned+0x3c>)
 800b724:	460c      	mov	r4, r1
 800b726:	6831      	ldr	r1, [r6, #0]
 800b728:	4605      	mov	r5, r0
 800b72a:	b911      	cbnz	r1, 800b732 <sbrk_aligned+0x12>
 800b72c:	f000 fba6 	bl	800be7c <_sbrk_r>
 800b730:	6030      	str	r0, [r6, #0]
 800b732:	4621      	mov	r1, r4
 800b734:	4628      	mov	r0, r5
 800b736:	f000 fba1 	bl	800be7c <_sbrk_r>
 800b73a:	1c43      	adds	r3, r0, #1
 800b73c:	d00a      	beq.n	800b754 <sbrk_aligned+0x34>
 800b73e:	1cc4      	adds	r4, r0, #3
 800b740:	f024 0403 	bic.w	r4, r4, #3
 800b744:	42a0      	cmp	r0, r4
 800b746:	d007      	beq.n	800b758 <sbrk_aligned+0x38>
 800b748:	1a21      	subs	r1, r4, r0
 800b74a:	4628      	mov	r0, r5
 800b74c:	f000 fb96 	bl	800be7c <_sbrk_r>
 800b750:	3001      	adds	r0, #1
 800b752:	d101      	bne.n	800b758 <sbrk_aligned+0x38>
 800b754:	f04f 34ff 	mov.w	r4, #4294967295
 800b758:	4620      	mov	r0, r4
 800b75a:	bd70      	pop	{r4, r5, r6, pc}
 800b75c:	20006c18 	.word	0x20006c18

0800b760 <_malloc_r>:
 800b760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b764:	1ccd      	adds	r5, r1, #3
 800b766:	f025 0503 	bic.w	r5, r5, #3
 800b76a:	3508      	adds	r5, #8
 800b76c:	2d0c      	cmp	r5, #12
 800b76e:	bf38      	it	cc
 800b770:	250c      	movcc	r5, #12
 800b772:	2d00      	cmp	r5, #0
 800b774:	4607      	mov	r7, r0
 800b776:	db01      	blt.n	800b77c <_malloc_r+0x1c>
 800b778:	42a9      	cmp	r1, r5
 800b77a:	d905      	bls.n	800b788 <_malloc_r+0x28>
 800b77c:	230c      	movs	r3, #12
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	2600      	movs	r6, #0
 800b782:	4630      	mov	r0, r6
 800b784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b788:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b85c <_malloc_r+0xfc>
 800b78c:	f000 f868 	bl	800b860 <__malloc_lock>
 800b790:	f8d8 3000 	ldr.w	r3, [r8]
 800b794:	461c      	mov	r4, r3
 800b796:	bb5c      	cbnz	r4, 800b7f0 <_malloc_r+0x90>
 800b798:	4629      	mov	r1, r5
 800b79a:	4638      	mov	r0, r7
 800b79c:	f7ff ffc0 	bl	800b720 <sbrk_aligned>
 800b7a0:	1c43      	adds	r3, r0, #1
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	d155      	bne.n	800b852 <_malloc_r+0xf2>
 800b7a6:	f8d8 4000 	ldr.w	r4, [r8]
 800b7aa:	4626      	mov	r6, r4
 800b7ac:	2e00      	cmp	r6, #0
 800b7ae:	d145      	bne.n	800b83c <_malloc_r+0xdc>
 800b7b0:	2c00      	cmp	r4, #0
 800b7b2:	d048      	beq.n	800b846 <_malloc_r+0xe6>
 800b7b4:	6823      	ldr	r3, [r4, #0]
 800b7b6:	4631      	mov	r1, r6
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	eb04 0903 	add.w	r9, r4, r3
 800b7be:	f000 fb5d 	bl	800be7c <_sbrk_r>
 800b7c2:	4581      	cmp	r9, r0
 800b7c4:	d13f      	bne.n	800b846 <_malloc_r+0xe6>
 800b7c6:	6821      	ldr	r1, [r4, #0]
 800b7c8:	1a6d      	subs	r5, r5, r1
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	f7ff ffa7 	bl	800b720 <sbrk_aligned>
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	d037      	beq.n	800b846 <_malloc_r+0xe6>
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	442b      	add	r3, r5
 800b7da:	6023      	str	r3, [r4, #0]
 800b7dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d038      	beq.n	800b856 <_malloc_r+0xf6>
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	42a2      	cmp	r2, r4
 800b7e8:	d12b      	bne.n	800b842 <_malloc_r+0xe2>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	605a      	str	r2, [r3, #4]
 800b7ee:	e00f      	b.n	800b810 <_malloc_r+0xb0>
 800b7f0:	6822      	ldr	r2, [r4, #0]
 800b7f2:	1b52      	subs	r2, r2, r5
 800b7f4:	d41f      	bmi.n	800b836 <_malloc_r+0xd6>
 800b7f6:	2a0b      	cmp	r2, #11
 800b7f8:	d917      	bls.n	800b82a <_malloc_r+0xca>
 800b7fa:	1961      	adds	r1, r4, r5
 800b7fc:	42a3      	cmp	r3, r4
 800b7fe:	6025      	str	r5, [r4, #0]
 800b800:	bf18      	it	ne
 800b802:	6059      	strne	r1, [r3, #4]
 800b804:	6863      	ldr	r3, [r4, #4]
 800b806:	bf08      	it	eq
 800b808:	f8c8 1000 	streq.w	r1, [r8]
 800b80c:	5162      	str	r2, [r4, r5]
 800b80e:	604b      	str	r3, [r1, #4]
 800b810:	4638      	mov	r0, r7
 800b812:	f104 060b 	add.w	r6, r4, #11
 800b816:	f000 f829 	bl	800b86c <__malloc_unlock>
 800b81a:	f026 0607 	bic.w	r6, r6, #7
 800b81e:	1d23      	adds	r3, r4, #4
 800b820:	1af2      	subs	r2, r6, r3
 800b822:	d0ae      	beq.n	800b782 <_malloc_r+0x22>
 800b824:	1b9b      	subs	r3, r3, r6
 800b826:	50a3      	str	r3, [r4, r2]
 800b828:	e7ab      	b.n	800b782 <_malloc_r+0x22>
 800b82a:	42a3      	cmp	r3, r4
 800b82c:	6862      	ldr	r2, [r4, #4]
 800b82e:	d1dd      	bne.n	800b7ec <_malloc_r+0x8c>
 800b830:	f8c8 2000 	str.w	r2, [r8]
 800b834:	e7ec      	b.n	800b810 <_malloc_r+0xb0>
 800b836:	4623      	mov	r3, r4
 800b838:	6864      	ldr	r4, [r4, #4]
 800b83a:	e7ac      	b.n	800b796 <_malloc_r+0x36>
 800b83c:	4634      	mov	r4, r6
 800b83e:	6876      	ldr	r6, [r6, #4]
 800b840:	e7b4      	b.n	800b7ac <_malloc_r+0x4c>
 800b842:	4613      	mov	r3, r2
 800b844:	e7cc      	b.n	800b7e0 <_malloc_r+0x80>
 800b846:	230c      	movs	r3, #12
 800b848:	603b      	str	r3, [r7, #0]
 800b84a:	4638      	mov	r0, r7
 800b84c:	f000 f80e 	bl	800b86c <__malloc_unlock>
 800b850:	e797      	b.n	800b782 <_malloc_r+0x22>
 800b852:	6025      	str	r5, [r4, #0]
 800b854:	e7dc      	b.n	800b810 <_malloc_r+0xb0>
 800b856:	605b      	str	r3, [r3, #4]
 800b858:	deff      	udf	#255	; 0xff
 800b85a:	bf00      	nop
 800b85c:	20006c14 	.word	0x20006c14

0800b860 <__malloc_lock>:
 800b860:	4801      	ldr	r0, [pc, #4]	; (800b868 <__malloc_lock+0x8>)
 800b862:	f7ff bf01 	b.w	800b668 <__retarget_lock_acquire_recursive>
 800b866:	bf00      	nop
 800b868:	20006c10 	.word	0x20006c10

0800b86c <__malloc_unlock>:
 800b86c:	4801      	ldr	r0, [pc, #4]	; (800b874 <__malloc_unlock+0x8>)
 800b86e:	f7ff befc 	b.w	800b66a <__retarget_lock_release_recursive>
 800b872:	bf00      	nop
 800b874:	20006c10 	.word	0x20006c10

0800b878 <__ssputs_r>:
 800b878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b87c:	688e      	ldr	r6, [r1, #8]
 800b87e:	461f      	mov	r7, r3
 800b880:	42be      	cmp	r6, r7
 800b882:	680b      	ldr	r3, [r1, #0]
 800b884:	4682      	mov	sl, r0
 800b886:	460c      	mov	r4, r1
 800b888:	4690      	mov	r8, r2
 800b88a:	d82c      	bhi.n	800b8e6 <__ssputs_r+0x6e>
 800b88c:	898a      	ldrh	r2, [r1, #12]
 800b88e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b892:	d026      	beq.n	800b8e2 <__ssputs_r+0x6a>
 800b894:	6965      	ldr	r5, [r4, #20]
 800b896:	6909      	ldr	r1, [r1, #16]
 800b898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b89c:	eba3 0901 	sub.w	r9, r3, r1
 800b8a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8a4:	1c7b      	adds	r3, r7, #1
 800b8a6:	444b      	add	r3, r9
 800b8a8:	106d      	asrs	r5, r5, #1
 800b8aa:	429d      	cmp	r5, r3
 800b8ac:	bf38      	it	cc
 800b8ae:	461d      	movcc	r5, r3
 800b8b0:	0553      	lsls	r3, r2, #21
 800b8b2:	d527      	bpl.n	800b904 <__ssputs_r+0x8c>
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	f7ff ff53 	bl	800b760 <_malloc_r>
 800b8ba:	4606      	mov	r6, r0
 800b8bc:	b360      	cbz	r0, 800b918 <__ssputs_r+0xa0>
 800b8be:	6921      	ldr	r1, [r4, #16]
 800b8c0:	464a      	mov	r2, r9
 800b8c2:	f7ff fed3 	bl	800b66c <memcpy>
 800b8c6:	89a3      	ldrh	r3, [r4, #12]
 800b8c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8d0:	81a3      	strh	r3, [r4, #12]
 800b8d2:	6126      	str	r6, [r4, #16]
 800b8d4:	6165      	str	r5, [r4, #20]
 800b8d6:	444e      	add	r6, r9
 800b8d8:	eba5 0509 	sub.w	r5, r5, r9
 800b8dc:	6026      	str	r6, [r4, #0]
 800b8de:	60a5      	str	r5, [r4, #8]
 800b8e0:	463e      	mov	r6, r7
 800b8e2:	42be      	cmp	r6, r7
 800b8e4:	d900      	bls.n	800b8e8 <__ssputs_r+0x70>
 800b8e6:	463e      	mov	r6, r7
 800b8e8:	6820      	ldr	r0, [r4, #0]
 800b8ea:	4632      	mov	r2, r6
 800b8ec:	4641      	mov	r1, r8
 800b8ee:	f000 faab 	bl	800be48 <memmove>
 800b8f2:	68a3      	ldr	r3, [r4, #8]
 800b8f4:	1b9b      	subs	r3, r3, r6
 800b8f6:	60a3      	str	r3, [r4, #8]
 800b8f8:	6823      	ldr	r3, [r4, #0]
 800b8fa:	4433      	add	r3, r6
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	2000      	movs	r0, #0
 800b900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b904:	462a      	mov	r2, r5
 800b906:	f000 fac9 	bl	800be9c <_realloc_r>
 800b90a:	4606      	mov	r6, r0
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d1e0      	bne.n	800b8d2 <__ssputs_r+0x5a>
 800b910:	6921      	ldr	r1, [r4, #16]
 800b912:	4650      	mov	r0, sl
 800b914:	f7ff feb8 	bl	800b688 <_free_r>
 800b918:	230c      	movs	r3, #12
 800b91a:	f8ca 3000 	str.w	r3, [sl]
 800b91e:	89a3      	ldrh	r3, [r4, #12]
 800b920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b924:	81a3      	strh	r3, [r4, #12]
 800b926:	f04f 30ff 	mov.w	r0, #4294967295
 800b92a:	e7e9      	b.n	800b900 <__ssputs_r+0x88>

0800b92c <_svfiprintf_r>:
 800b92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b930:	4698      	mov	r8, r3
 800b932:	898b      	ldrh	r3, [r1, #12]
 800b934:	061b      	lsls	r3, r3, #24
 800b936:	b09d      	sub	sp, #116	; 0x74
 800b938:	4607      	mov	r7, r0
 800b93a:	460d      	mov	r5, r1
 800b93c:	4614      	mov	r4, r2
 800b93e:	d50e      	bpl.n	800b95e <_svfiprintf_r+0x32>
 800b940:	690b      	ldr	r3, [r1, #16]
 800b942:	b963      	cbnz	r3, 800b95e <_svfiprintf_r+0x32>
 800b944:	2140      	movs	r1, #64	; 0x40
 800b946:	f7ff ff0b 	bl	800b760 <_malloc_r>
 800b94a:	6028      	str	r0, [r5, #0]
 800b94c:	6128      	str	r0, [r5, #16]
 800b94e:	b920      	cbnz	r0, 800b95a <_svfiprintf_r+0x2e>
 800b950:	230c      	movs	r3, #12
 800b952:	603b      	str	r3, [r7, #0]
 800b954:	f04f 30ff 	mov.w	r0, #4294967295
 800b958:	e0d0      	b.n	800bafc <_svfiprintf_r+0x1d0>
 800b95a:	2340      	movs	r3, #64	; 0x40
 800b95c:	616b      	str	r3, [r5, #20]
 800b95e:	2300      	movs	r3, #0
 800b960:	9309      	str	r3, [sp, #36]	; 0x24
 800b962:	2320      	movs	r3, #32
 800b964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b968:	f8cd 800c 	str.w	r8, [sp, #12]
 800b96c:	2330      	movs	r3, #48	; 0x30
 800b96e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb14 <_svfiprintf_r+0x1e8>
 800b972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b976:	f04f 0901 	mov.w	r9, #1
 800b97a:	4623      	mov	r3, r4
 800b97c:	469a      	mov	sl, r3
 800b97e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b982:	b10a      	cbz	r2, 800b988 <_svfiprintf_r+0x5c>
 800b984:	2a25      	cmp	r2, #37	; 0x25
 800b986:	d1f9      	bne.n	800b97c <_svfiprintf_r+0x50>
 800b988:	ebba 0b04 	subs.w	fp, sl, r4
 800b98c:	d00b      	beq.n	800b9a6 <_svfiprintf_r+0x7a>
 800b98e:	465b      	mov	r3, fp
 800b990:	4622      	mov	r2, r4
 800b992:	4629      	mov	r1, r5
 800b994:	4638      	mov	r0, r7
 800b996:	f7ff ff6f 	bl	800b878 <__ssputs_r>
 800b99a:	3001      	adds	r0, #1
 800b99c:	f000 80a9 	beq.w	800baf2 <_svfiprintf_r+0x1c6>
 800b9a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9a2:	445a      	add	r2, fp
 800b9a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b9a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 80a1 	beq.w	800baf2 <_svfiprintf_r+0x1c6>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9ba:	f10a 0a01 	add.w	sl, sl, #1
 800b9be:	9304      	str	r3, [sp, #16]
 800b9c0:	9307      	str	r3, [sp, #28]
 800b9c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9c6:	931a      	str	r3, [sp, #104]	; 0x68
 800b9c8:	4654      	mov	r4, sl
 800b9ca:	2205      	movs	r2, #5
 800b9cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d0:	4850      	ldr	r0, [pc, #320]	; (800bb14 <_svfiprintf_r+0x1e8>)
 800b9d2:	f7f4 fc25 	bl	8000220 <memchr>
 800b9d6:	9a04      	ldr	r2, [sp, #16]
 800b9d8:	b9d8      	cbnz	r0, 800ba12 <_svfiprintf_r+0xe6>
 800b9da:	06d0      	lsls	r0, r2, #27
 800b9dc:	bf44      	itt	mi
 800b9de:	2320      	movmi	r3, #32
 800b9e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9e4:	0711      	lsls	r1, r2, #28
 800b9e6:	bf44      	itt	mi
 800b9e8:	232b      	movmi	r3, #43	; 0x2b
 800b9ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b9f4:	d015      	beq.n	800ba22 <_svfiprintf_r+0xf6>
 800b9f6:	9a07      	ldr	r2, [sp, #28]
 800b9f8:	4654      	mov	r4, sl
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	f04f 0c0a 	mov.w	ip, #10
 800ba00:	4621      	mov	r1, r4
 800ba02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba06:	3b30      	subs	r3, #48	; 0x30
 800ba08:	2b09      	cmp	r3, #9
 800ba0a:	d94d      	bls.n	800baa8 <_svfiprintf_r+0x17c>
 800ba0c:	b1b0      	cbz	r0, 800ba3c <_svfiprintf_r+0x110>
 800ba0e:	9207      	str	r2, [sp, #28]
 800ba10:	e014      	b.n	800ba3c <_svfiprintf_r+0x110>
 800ba12:	eba0 0308 	sub.w	r3, r0, r8
 800ba16:	fa09 f303 	lsl.w	r3, r9, r3
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	9304      	str	r3, [sp, #16]
 800ba1e:	46a2      	mov	sl, r4
 800ba20:	e7d2      	b.n	800b9c8 <_svfiprintf_r+0x9c>
 800ba22:	9b03      	ldr	r3, [sp, #12]
 800ba24:	1d19      	adds	r1, r3, #4
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	9103      	str	r1, [sp, #12]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	bfbb      	ittet	lt
 800ba2e:	425b      	neglt	r3, r3
 800ba30:	f042 0202 	orrlt.w	r2, r2, #2
 800ba34:	9307      	strge	r3, [sp, #28]
 800ba36:	9307      	strlt	r3, [sp, #28]
 800ba38:	bfb8      	it	lt
 800ba3a:	9204      	strlt	r2, [sp, #16]
 800ba3c:	7823      	ldrb	r3, [r4, #0]
 800ba3e:	2b2e      	cmp	r3, #46	; 0x2e
 800ba40:	d10c      	bne.n	800ba5c <_svfiprintf_r+0x130>
 800ba42:	7863      	ldrb	r3, [r4, #1]
 800ba44:	2b2a      	cmp	r3, #42	; 0x2a
 800ba46:	d134      	bne.n	800bab2 <_svfiprintf_r+0x186>
 800ba48:	9b03      	ldr	r3, [sp, #12]
 800ba4a:	1d1a      	adds	r2, r3, #4
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	9203      	str	r2, [sp, #12]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	bfb8      	it	lt
 800ba54:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba58:	3402      	adds	r4, #2
 800ba5a:	9305      	str	r3, [sp, #20]
 800ba5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bb24 <_svfiprintf_r+0x1f8>
 800ba60:	7821      	ldrb	r1, [r4, #0]
 800ba62:	2203      	movs	r2, #3
 800ba64:	4650      	mov	r0, sl
 800ba66:	f7f4 fbdb 	bl	8000220 <memchr>
 800ba6a:	b138      	cbz	r0, 800ba7c <_svfiprintf_r+0x150>
 800ba6c:	9b04      	ldr	r3, [sp, #16]
 800ba6e:	eba0 000a 	sub.w	r0, r0, sl
 800ba72:	2240      	movs	r2, #64	; 0x40
 800ba74:	4082      	lsls	r2, r0
 800ba76:	4313      	orrs	r3, r2
 800ba78:	3401      	adds	r4, #1
 800ba7a:	9304      	str	r3, [sp, #16]
 800ba7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba80:	4825      	ldr	r0, [pc, #148]	; (800bb18 <_svfiprintf_r+0x1ec>)
 800ba82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba86:	2206      	movs	r2, #6
 800ba88:	f7f4 fbca 	bl	8000220 <memchr>
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d038      	beq.n	800bb02 <_svfiprintf_r+0x1d6>
 800ba90:	4b22      	ldr	r3, [pc, #136]	; (800bb1c <_svfiprintf_r+0x1f0>)
 800ba92:	bb1b      	cbnz	r3, 800badc <_svfiprintf_r+0x1b0>
 800ba94:	9b03      	ldr	r3, [sp, #12]
 800ba96:	3307      	adds	r3, #7
 800ba98:	f023 0307 	bic.w	r3, r3, #7
 800ba9c:	3308      	adds	r3, #8
 800ba9e:	9303      	str	r3, [sp, #12]
 800baa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa2:	4433      	add	r3, r6
 800baa4:	9309      	str	r3, [sp, #36]	; 0x24
 800baa6:	e768      	b.n	800b97a <_svfiprintf_r+0x4e>
 800baa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800baac:	460c      	mov	r4, r1
 800baae:	2001      	movs	r0, #1
 800bab0:	e7a6      	b.n	800ba00 <_svfiprintf_r+0xd4>
 800bab2:	2300      	movs	r3, #0
 800bab4:	3401      	adds	r4, #1
 800bab6:	9305      	str	r3, [sp, #20]
 800bab8:	4619      	mov	r1, r3
 800baba:	f04f 0c0a 	mov.w	ip, #10
 800babe:	4620      	mov	r0, r4
 800bac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bac4:	3a30      	subs	r2, #48	; 0x30
 800bac6:	2a09      	cmp	r2, #9
 800bac8:	d903      	bls.n	800bad2 <_svfiprintf_r+0x1a6>
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d0c6      	beq.n	800ba5c <_svfiprintf_r+0x130>
 800bace:	9105      	str	r1, [sp, #20]
 800bad0:	e7c4      	b.n	800ba5c <_svfiprintf_r+0x130>
 800bad2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bad6:	4604      	mov	r4, r0
 800bad8:	2301      	movs	r3, #1
 800bada:	e7f0      	b.n	800babe <_svfiprintf_r+0x192>
 800badc:	ab03      	add	r3, sp, #12
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	462a      	mov	r2, r5
 800bae2:	4b0f      	ldr	r3, [pc, #60]	; (800bb20 <_svfiprintf_r+0x1f4>)
 800bae4:	a904      	add	r1, sp, #16
 800bae6:	4638      	mov	r0, r7
 800bae8:	f3af 8000 	nop.w
 800baec:	1c42      	adds	r2, r0, #1
 800baee:	4606      	mov	r6, r0
 800baf0:	d1d6      	bne.n	800baa0 <_svfiprintf_r+0x174>
 800baf2:	89ab      	ldrh	r3, [r5, #12]
 800baf4:	065b      	lsls	r3, r3, #25
 800baf6:	f53f af2d 	bmi.w	800b954 <_svfiprintf_r+0x28>
 800bafa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bafc:	b01d      	add	sp, #116	; 0x74
 800bafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb02:	ab03      	add	r3, sp, #12
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	462a      	mov	r2, r5
 800bb08:	4b05      	ldr	r3, [pc, #20]	; (800bb20 <_svfiprintf_r+0x1f4>)
 800bb0a:	a904      	add	r1, sp, #16
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	f000 f879 	bl	800bc04 <_printf_i>
 800bb12:	e7eb      	b.n	800baec <_svfiprintf_r+0x1c0>
 800bb14:	0800c7ba 	.word	0x0800c7ba
 800bb18:	0800c7c4 	.word	0x0800c7c4
 800bb1c:	00000000 	.word	0x00000000
 800bb20:	0800b879 	.word	0x0800b879
 800bb24:	0800c7c0 	.word	0x0800c7c0

0800bb28 <_printf_common>:
 800bb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb2c:	4616      	mov	r6, r2
 800bb2e:	4699      	mov	r9, r3
 800bb30:	688a      	ldr	r2, [r1, #8]
 800bb32:	690b      	ldr	r3, [r1, #16]
 800bb34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	bfb8      	it	lt
 800bb3c:	4613      	movlt	r3, r2
 800bb3e:	6033      	str	r3, [r6, #0]
 800bb40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb44:	4607      	mov	r7, r0
 800bb46:	460c      	mov	r4, r1
 800bb48:	b10a      	cbz	r2, 800bb4e <_printf_common+0x26>
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	6033      	str	r3, [r6, #0]
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	0699      	lsls	r1, r3, #26
 800bb52:	bf42      	ittt	mi
 800bb54:	6833      	ldrmi	r3, [r6, #0]
 800bb56:	3302      	addmi	r3, #2
 800bb58:	6033      	strmi	r3, [r6, #0]
 800bb5a:	6825      	ldr	r5, [r4, #0]
 800bb5c:	f015 0506 	ands.w	r5, r5, #6
 800bb60:	d106      	bne.n	800bb70 <_printf_common+0x48>
 800bb62:	f104 0a19 	add.w	sl, r4, #25
 800bb66:	68e3      	ldr	r3, [r4, #12]
 800bb68:	6832      	ldr	r2, [r6, #0]
 800bb6a:	1a9b      	subs	r3, r3, r2
 800bb6c:	42ab      	cmp	r3, r5
 800bb6e:	dc26      	bgt.n	800bbbe <_printf_common+0x96>
 800bb70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb74:	1e13      	subs	r3, r2, #0
 800bb76:	6822      	ldr	r2, [r4, #0]
 800bb78:	bf18      	it	ne
 800bb7a:	2301      	movne	r3, #1
 800bb7c:	0692      	lsls	r2, r2, #26
 800bb7e:	d42b      	bmi.n	800bbd8 <_printf_common+0xb0>
 800bb80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb84:	4649      	mov	r1, r9
 800bb86:	4638      	mov	r0, r7
 800bb88:	47c0      	blx	r8
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	d01e      	beq.n	800bbcc <_printf_common+0xa4>
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	6922      	ldr	r2, [r4, #16]
 800bb92:	f003 0306 	and.w	r3, r3, #6
 800bb96:	2b04      	cmp	r3, #4
 800bb98:	bf02      	ittt	eq
 800bb9a:	68e5      	ldreq	r5, [r4, #12]
 800bb9c:	6833      	ldreq	r3, [r6, #0]
 800bb9e:	1aed      	subeq	r5, r5, r3
 800bba0:	68a3      	ldr	r3, [r4, #8]
 800bba2:	bf0c      	ite	eq
 800bba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bba8:	2500      	movne	r5, #0
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	bfc4      	itt	gt
 800bbae:	1a9b      	subgt	r3, r3, r2
 800bbb0:	18ed      	addgt	r5, r5, r3
 800bbb2:	2600      	movs	r6, #0
 800bbb4:	341a      	adds	r4, #26
 800bbb6:	42b5      	cmp	r5, r6
 800bbb8:	d11a      	bne.n	800bbf0 <_printf_common+0xc8>
 800bbba:	2000      	movs	r0, #0
 800bbbc:	e008      	b.n	800bbd0 <_printf_common+0xa8>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	4652      	mov	r2, sl
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	47c0      	blx	r8
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d103      	bne.n	800bbd4 <_printf_common+0xac>
 800bbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbd4:	3501      	adds	r5, #1
 800bbd6:	e7c6      	b.n	800bb66 <_printf_common+0x3e>
 800bbd8:	18e1      	adds	r1, r4, r3
 800bbda:	1c5a      	adds	r2, r3, #1
 800bbdc:	2030      	movs	r0, #48	; 0x30
 800bbde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbe2:	4422      	add	r2, r4
 800bbe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbe8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbec:	3302      	adds	r3, #2
 800bbee:	e7c7      	b.n	800bb80 <_printf_common+0x58>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	4649      	mov	r1, r9
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	47c0      	blx	r8
 800bbfa:	3001      	adds	r0, #1
 800bbfc:	d0e6      	beq.n	800bbcc <_printf_common+0xa4>
 800bbfe:	3601      	adds	r6, #1
 800bc00:	e7d9      	b.n	800bbb6 <_printf_common+0x8e>
	...

0800bc04 <_printf_i>:
 800bc04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc08:	7e0f      	ldrb	r7, [r1, #24]
 800bc0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc0c:	2f78      	cmp	r7, #120	; 0x78
 800bc0e:	4691      	mov	r9, r2
 800bc10:	4680      	mov	r8, r0
 800bc12:	460c      	mov	r4, r1
 800bc14:	469a      	mov	sl, r3
 800bc16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc1a:	d807      	bhi.n	800bc2c <_printf_i+0x28>
 800bc1c:	2f62      	cmp	r7, #98	; 0x62
 800bc1e:	d80a      	bhi.n	800bc36 <_printf_i+0x32>
 800bc20:	2f00      	cmp	r7, #0
 800bc22:	f000 80d4 	beq.w	800bdce <_printf_i+0x1ca>
 800bc26:	2f58      	cmp	r7, #88	; 0x58
 800bc28:	f000 80c0 	beq.w	800bdac <_printf_i+0x1a8>
 800bc2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc34:	e03a      	b.n	800bcac <_printf_i+0xa8>
 800bc36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc3a:	2b15      	cmp	r3, #21
 800bc3c:	d8f6      	bhi.n	800bc2c <_printf_i+0x28>
 800bc3e:	a101      	add	r1, pc, #4	; (adr r1, 800bc44 <_printf_i+0x40>)
 800bc40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc44:	0800bc9d 	.word	0x0800bc9d
 800bc48:	0800bcb1 	.word	0x0800bcb1
 800bc4c:	0800bc2d 	.word	0x0800bc2d
 800bc50:	0800bc2d 	.word	0x0800bc2d
 800bc54:	0800bc2d 	.word	0x0800bc2d
 800bc58:	0800bc2d 	.word	0x0800bc2d
 800bc5c:	0800bcb1 	.word	0x0800bcb1
 800bc60:	0800bc2d 	.word	0x0800bc2d
 800bc64:	0800bc2d 	.word	0x0800bc2d
 800bc68:	0800bc2d 	.word	0x0800bc2d
 800bc6c:	0800bc2d 	.word	0x0800bc2d
 800bc70:	0800bdb5 	.word	0x0800bdb5
 800bc74:	0800bcdd 	.word	0x0800bcdd
 800bc78:	0800bd6f 	.word	0x0800bd6f
 800bc7c:	0800bc2d 	.word	0x0800bc2d
 800bc80:	0800bc2d 	.word	0x0800bc2d
 800bc84:	0800bdd7 	.word	0x0800bdd7
 800bc88:	0800bc2d 	.word	0x0800bc2d
 800bc8c:	0800bcdd 	.word	0x0800bcdd
 800bc90:	0800bc2d 	.word	0x0800bc2d
 800bc94:	0800bc2d 	.word	0x0800bc2d
 800bc98:	0800bd77 	.word	0x0800bd77
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	1d1a      	adds	r2, r3, #4
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	602a      	str	r2, [r5, #0]
 800bca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcac:	2301      	movs	r3, #1
 800bcae:	e09f      	b.n	800bdf0 <_printf_i+0x1ec>
 800bcb0:	6820      	ldr	r0, [r4, #0]
 800bcb2:	682b      	ldr	r3, [r5, #0]
 800bcb4:	0607      	lsls	r7, r0, #24
 800bcb6:	f103 0104 	add.w	r1, r3, #4
 800bcba:	6029      	str	r1, [r5, #0]
 800bcbc:	d501      	bpl.n	800bcc2 <_printf_i+0xbe>
 800bcbe:	681e      	ldr	r6, [r3, #0]
 800bcc0:	e003      	b.n	800bcca <_printf_i+0xc6>
 800bcc2:	0646      	lsls	r6, r0, #25
 800bcc4:	d5fb      	bpl.n	800bcbe <_printf_i+0xba>
 800bcc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bcca:	2e00      	cmp	r6, #0
 800bccc:	da03      	bge.n	800bcd6 <_printf_i+0xd2>
 800bcce:	232d      	movs	r3, #45	; 0x2d
 800bcd0:	4276      	negs	r6, r6
 800bcd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcd6:	485a      	ldr	r0, [pc, #360]	; (800be40 <_printf_i+0x23c>)
 800bcd8:	230a      	movs	r3, #10
 800bcda:	e012      	b.n	800bd02 <_printf_i+0xfe>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	6820      	ldr	r0, [r4, #0]
 800bce0:	1d19      	adds	r1, r3, #4
 800bce2:	6029      	str	r1, [r5, #0]
 800bce4:	0605      	lsls	r5, r0, #24
 800bce6:	d501      	bpl.n	800bcec <_printf_i+0xe8>
 800bce8:	681e      	ldr	r6, [r3, #0]
 800bcea:	e002      	b.n	800bcf2 <_printf_i+0xee>
 800bcec:	0641      	lsls	r1, r0, #25
 800bcee:	d5fb      	bpl.n	800bce8 <_printf_i+0xe4>
 800bcf0:	881e      	ldrh	r6, [r3, #0]
 800bcf2:	4853      	ldr	r0, [pc, #332]	; (800be40 <_printf_i+0x23c>)
 800bcf4:	2f6f      	cmp	r7, #111	; 0x6f
 800bcf6:	bf0c      	ite	eq
 800bcf8:	2308      	moveq	r3, #8
 800bcfa:	230a      	movne	r3, #10
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd02:	6865      	ldr	r5, [r4, #4]
 800bd04:	60a5      	str	r5, [r4, #8]
 800bd06:	2d00      	cmp	r5, #0
 800bd08:	bfa2      	ittt	ge
 800bd0a:	6821      	ldrge	r1, [r4, #0]
 800bd0c:	f021 0104 	bicge.w	r1, r1, #4
 800bd10:	6021      	strge	r1, [r4, #0]
 800bd12:	b90e      	cbnz	r6, 800bd18 <_printf_i+0x114>
 800bd14:	2d00      	cmp	r5, #0
 800bd16:	d04b      	beq.n	800bdb0 <_printf_i+0x1ac>
 800bd18:	4615      	mov	r5, r2
 800bd1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd1e:	fb03 6711 	mls	r7, r3, r1, r6
 800bd22:	5dc7      	ldrb	r7, [r0, r7]
 800bd24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd28:	4637      	mov	r7, r6
 800bd2a:	42bb      	cmp	r3, r7
 800bd2c:	460e      	mov	r6, r1
 800bd2e:	d9f4      	bls.n	800bd1a <_printf_i+0x116>
 800bd30:	2b08      	cmp	r3, #8
 800bd32:	d10b      	bne.n	800bd4c <_printf_i+0x148>
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	07de      	lsls	r6, r3, #31
 800bd38:	d508      	bpl.n	800bd4c <_printf_i+0x148>
 800bd3a:	6923      	ldr	r3, [r4, #16]
 800bd3c:	6861      	ldr	r1, [r4, #4]
 800bd3e:	4299      	cmp	r1, r3
 800bd40:	bfde      	ittt	le
 800bd42:	2330      	movle	r3, #48	; 0x30
 800bd44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd48:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd4c:	1b52      	subs	r2, r2, r5
 800bd4e:	6122      	str	r2, [r4, #16]
 800bd50:	f8cd a000 	str.w	sl, [sp]
 800bd54:	464b      	mov	r3, r9
 800bd56:	aa03      	add	r2, sp, #12
 800bd58:	4621      	mov	r1, r4
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	f7ff fee4 	bl	800bb28 <_printf_common>
 800bd60:	3001      	adds	r0, #1
 800bd62:	d14a      	bne.n	800bdfa <_printf_i+0x1f6>
 800bd64:	f04f 30ff 	mov.w	r0, #4294967295
 800bd68:	b004      	add	sp, #16
 800bd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	f043 0320 	orr.w	r3, r3, #32
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	4833      	ldr	r0, [pc, #204]	; (800be44 <_printf_i+0x240>)
 800bd78:	2778      	movs	r7, #120	; 0x78
 800bd7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	6829      	ldr	r1, [r5, #0]
 800bd82:	061f      	lsls	r7, r3, #24
 800bd84:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd88:	d402      	bmi.n	800bd90 <_printf_i+0x18c>
 800bd8a:	065f      	lsls	r7, r3, #25
 800bd8c:	bf48      	it	mi
 800bd8e:	b2b6      	uxthmi	r6, r6
 800bd90:	07df      	lsls	r7, r3, #31
 800bd92:	bf48      	it	mi
 800bd94:	f043 0320 	orrmi.w	r3, r3, #32
 800bd98:	6029      	str	r1, [r5, #0]
 800bd9a:	bf48      	it	mi
 800bd9c:	6023      	strmi	r3, [r4, #0]
 800bd9e:	b91e      	cbnz	r6, 800bda8 <_printf_i+0x1a4>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	f023 0320 	bic.w	r3, r3, #32
 800bda6:	6023      	str	r3, [r4, #0]
 800bda8:	2310      	movs	r3, #16
 800bdaa:	e7a7      	b.n	800bcfc <_printf_i+0xf8>
 800bdac:	4824      	ldr	r0, [pc, #144]	; (800be40 <_printf_i+0x23c>)
 800bdae:	e7e4      	b.n	800bd7a <_printf_i+0x176>
 800bdb0:	4615      	mov	r5, r2
 800bdb2:	e7bd      	b.n	800bd30 <_printf_i+0x12c>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	6826      	ldr	r6, [r4, #0]
 800bdb8:	6961      	ldr	r1, [r4, #20]
 800bdba:	1d18      	adds	r0, r3, #4
 800bdbc:	6028      	str	r0, [r5, #0]
 800bdbe:	0635      	lsls	r5, r6, #24
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	d501      	bpl.n	800bdc8 <_printf_i+0x1c4>
 800bdc4:	6019      	str	r1, [r3, #0]
 800bdc6:	e002      	b.n	800bdce <_printf_i+0x1ca>
 800bdc8:	0670      	lsls	r0, r6, #25
 800bdca:	d5fb      	bpl.n	800bdc4 <_printf_i+0x1c0>
 800bdcc:	8019      	strh	r1, [r3, #0]
 800bdce:	2300      	movs	r3, #0
 800bdd0:	6123      	str	r3, [r4, #16]
 800bdd2:	4615      	mov	r5, r2
 800bdd4:	e7bc      	b.n	800bd50 <_printf_i+0x14c>
 800bdd6:	682b      	ldr	r3, [r5, #0]
 800bdd8:	1d1a      	adds	r2, r3, #4
 800bdda:	602a      	str	r2, [r5, #0]
 800bddc:	681d      	ldr	r5, [r3, #0]
 800bdde:	6862      	ldr	r2, [r4, #4]
 800bde0:	2100      	movs	r1, #0
 800bde2:	4628      	mov	r0, r5
 800bde4:	f7f4 fa1c 	bl	8000220 <memchr>
 800bde8:	b108      	cbz	r0, 800bdee <_printf_i+0x1ea>
 800bdea:	1b40      	subs	r0, r0, r5
 800bdec:	6060      	str	r0, [r4, #4]
 800bdee:	6863      	ldr	r3, [r4, #4]
 800bdf0:	6123      	str	r3, [r4, #16]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdf8:	e7aa      	b.n	800bd50 <_printf_i+0x14c>
 800bdfa:	6923      	ldr	r3, [r4, #16]
 800bdfc:	462a      	mov	r2, r5
 800bdfe:	4649      	mov	r1, r9
 800be00:	4640      	mov	r0, r8
 800be02:	47d0      	blx	sl
 800be04:	3001      	adds	r0, #1
 800be06:	d0ad      	beq.n	800bd64 <_printf_i+0x160>
 800be08:	6823      	ldr	r3, [r4, #0]
 800be0a:	079b      	lsls	r3, r3, #30
 800be0c:	d413      	bmi.n	800be36 <_printf_i+0x232>
 800be0e:	68e0      	ldr	r0, [r4, #12]
 800be10:	9b03      	ldr	r3, [sp, #12]
 800be12:	4298      	cmp	r0, r3
 800be14:	bfb8      	it	lt
 800be16:	4618      	movlt	r0, r3
 800be18:	e7a6      	b.n	800bd68 <_printf_i+0x164>
 800be1a:	2301      	movs	r3, #1
 800be1c:	4632      	mov	r2, r6
 800be1e:	4649      	mov	r1, r9
 800be20:	4640      	mov	r0, r8
 800be22:	47d0      	blx	sl
 800be24:	3001      	adds	r0, #1
 800be26:	d09d      	beq.n	800bd64 <_printf_i+0x160>
 800be28:	3501      	adds	r5, #1
 800be2a:	68e3      	ldr	r3, [r4, #12]
 800be2c:	9903      	ldr	r1, [sp, #12]
 800be2e:	1a5b      	subs	r3, r3, r1
 800be30:	42ab      	cmp	r3, r5
 800be32:	dcf2      	bgt.n	800be1a <_printf_i+0x216>
 800be34:	e7eb      	b.n	800be0e <_printf_i+0x20a>
 800be36:	2500      	movs	r5, #0
 800be38:	f104 0619 	add.w	r6, r4, #25
 800be3c:	e7f5      	b.n	800be2a <_printf_i+0x226>
 800be3e:	bf00      	nop
 800be40:	0800c7cb 	.word	0x0800c7cb
 800be44:	0800c7dc 	.word	0x0800c7dc

0800be48 <memmove>:
 800be48:	4288      	cmp	r0, r1
 800be4a:	b510      	push	{r4, lr}
 800be4c:	eb01 0402 	add.w	r4, r1, r2
 800be50:	d902      	bls.n	800be58 <memmove+0x10>
 800be52:	4284      	cmp	r4, r0
 800be54:	4623      	mov	r3, r4
 800be56:	d807      	bhi.n	800be68 <memmove+0x20>
 800be58:	1e43      	subs	r3, r0, #1
 800be5a:	42a1      	cmp	r1, r4
 800be5c:	d008      	beq.n	800be70 <memmove+0x28>
 800be5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be66:	e7f8      	b.n	800be5a <memmove+0x12>
 800be68:	4402      	add	r2, r0
 800be6a:	4601      	mov	r1, r0
 800be6c:	428a      	cmp	r2, r1
 800be6e:	d100      	bne.n	800be72 <memmove+0x2a>
 800be70:	bd10      	pop	{r4, pc}
 800be72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be7a:	e7f7      	b.n	800be6c <memmove+0x24>

0800be7c <_sbrk_r>:
 800be7c:	b538      	push	{r3, r4, r5, lr}
 800be7e:	4d06      	ldr	r5, [pc, #24]	; (800be98 <_sbrk_r+0x1c>)
 800be80:	2300      	movs	r3, #0
 800be82:	4604      	mov	r4, r0
 800be84:	4608      	mov	r0, r1
 800be86:	602b      	str	r3, [r5, #0]
 800be88:	f7f6 f810 	bl	8001eac <_sbrk>
 800be8c:	1c43      	adds	r3, r0, #1
 800be8e:	d102      	bne.n	800be96 <_sbrk_r+0x1a>
 800be90:	682b      	ldr	r3, [r5, #0]
 800be92:	b103      	cbz	r3, 800be96 <_sbrk_r+0x1a>
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	bd38      	pop	{r3, r4, r5, pc}
 800be98:	20006c0c 	.word	0x20006c0c

0800be9c <_realloc_r>:
 800be9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea0:	4680      	mov	r8, r0
 800bea2:	4614      	mov	r4, r2
 800bea4:	460e      	mov	r6, r1
 800bea6:	b921      	cbnz	r1, 800beb2 <_realloc_r+0x16>
 800bea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beac:	4611      	mov	r1, r2
 800beae:	f7ff bc57 	b.w	800b760 <_malloc_r>
 800beb2:	b92a      	cbnz	r2, 800bec0 <_realloc_r+0x24>
 800beb4:	f7ff fbe8 	bl	800b688 <_free_r>
 800beb8:	4625      	mov	r5, r4
 800beba:	4628      	mov	r0, r5
 800bebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec0:	f000 f81b 	bl	800befa <_malloc_usable_size_r>
 800bec4:	4284      	cmp	r4, r0
 800bec6:	4607      	mov	r7, r0
 800bec8:	d802      	bhi.n	800bed0 <_realloc_r+0x34>
 800beca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bece:	d812      	bhi.n	800bef6 <_realloc_r+0x5a>
 800bed0:	4621      	mov	r1, r4
 800bed2:	4640      	mov	r0, r8
 800bed4:	f7ff fc44 	bl	800b760 <_malloc_r>
 800bed8:	4605      	mov	r5, r0
 800beda:	2800      	cmp	r0, #0
 800bedc:	d0ed      	beq.n	800beba <_realloc_r+0x1e>
 800bede:	42bc      	cmp	r4, r7
 800bee0:	4622      	mov	r2, r4
 800bee2:	4631      	mov	r1, r6
 800bee4:	bf28      	it	cs
 800bee6:	463a      	movcs	r2, r7
 800bee8:	f7ff fbc0 	bl	800b66c <memcpy>
 800beec:	4631      	mov	r1, r6
 800beee:	4640      	mov	r0, r8
 800bef0:	f7ff fbca 	bl	800b688 <_free_r>
 800bef4:	e7e1      	b.n	800beba <_realloc_r+0x1e>
 800bef6:	4635      	mov	r5, r6
 800bef8:	e7df      	b.n	800beba <_realloc_r+0x1e>

0800befa <_malloc_usable_size_r>:
 800befa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800befe:	1f18      	subs	r0, r3, #4
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	bfbc      	itt	lt
 800bf04:	580b      	ldrlt	r3, [r1, r0]
 800bf06:	18c0      	addlt	r0, r0, r3
 800bf08:	4770      	bx	lr
	...

0800bf0c <_init>:
 800bf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0e:	bf00      	nop
 800bf10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf12:	bc08      	pop	{r3}
 800bf14:	469e      	mov	lr, r3
 800bf16:	4770      	bx	lr

0800bf18 <_fini>:
 800bf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1a:	bf00      	nop
 800bf1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf1e:	bc08      	pop	{r3}
 800bf20:	469e      	mov	lr, r3
 800bf22:	4770      	bx	lr
